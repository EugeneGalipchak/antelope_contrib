/* The following code was generated by JFlex 1.4 on 7/9/04 4:46 PM */

/*
 * Copyright (c) 2004 by the Regents of the University of California
 *
 * Written by Tobin Fricke 2004-07-09
 *
 * Compile with JLex, http://www.cs.princeton.edu/~appel/modern/java/JLex/
 *
 * http://bmrc.berkeley.edu/courseware/cs164/fall99/assignment/a1/tutorial.html
 *
 * Based on $DSAP/src/lib/dataformat/db/dblex.l from DSAP 3.4 (public domain)
*/



/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4
 * on 7/9/04 4:46 PM from the specification file
 * <tt>DatabaseSchemaLexer.flex</tt>
 */
class DatabaseSchemaLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = {
     0,  0,  0,  0,  0,  0,  0,  0,  0,  1, 38,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     1,  0, 36,  0, 37, 37,  0,  0,  0,  0,  0,  0,  0,  0, 37,  0, 
    35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 37,  0,  0,  0,  0,  0, 
     0,  8, 25, 37, 23, 37, 33, 37, 37, 20, 37, 37, 29, 37, 32, 37, 
    34, 37, 14,  2, 18, 31, 37, 37, 37, 22, 37,  0,  0,  0,  0, 37, 
     0,  7, 12,  3, 19,  5, 26, 21,  4, 11, 37, 30, 15,  6, 17, 16, 
    28, 37, 10, 27,  9, 13, 37, 37, 37, 24, 37, 36,  0,  0,  0,  0
  };

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\1\1\2\1\3\16\4\1\1\1\5\1\6\66\4"+
    "\1\7\3\4\1\10\6\4\1\11\3\4\1\12\1\4"+
    "\1\13\12\4\1\14\7\4\1\15\3\4\1\16\4\4"+
    "\1\17\1\4\1\20\7\4\1\21\3\4\1\22\1\23"+
    "\1\24\1\4\1\25\7\4\1\26\1\27\1\30\1\4"+
    "\1\31\1\32\1\33\3\4\1\34\1\4\1\35\1\4"+
    "\1\36\1\37\1\40\1\41\2\4\1\42";

  private static int [] zzUnpackAction() {
    int [] result = new int[166];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\47\0\47\0\116\0\165\0\234\0\303\0\352"+
    "\0\u0111\0\u0138\0\u015f\0\u0186\0\u01ad\0\u01d4\0\u01fb\0\u0222"+
    "\0\u0249\0\u0270\0\47\0\47\0\u0297\0\u02be\0\u02e5\0\u030c"+
    "\0\u0333\0\u035a\0\u0381\0\u03a8\0\u03cf\0\u03f6\0\u041d\0\u0444"+
    "\0\u046b\0\u0492\0\u04b9\0\u04e0\0\u0507\0\u052e\0\u0555\0\u057c"+
    "\0\u05a3\0\u05ca\0\u05f1\0\u0618\0\u063f\0\u0666\0\u068d\0\u06b4"+
    "\0\u06db\0\u0702\0\u0729\0\u0750\0\u0777\0\u079e\0\u07c5\0\u07ec"+
    "\0\u0813\0\u083a\0\u0861\0\u0888\0\u08af\0\u08d6\0\u08fd\0\u0924"+
    "\0\u094b\0\u0972\0\u0999\0\u09c0\0\u09e7\0\u0a0e\0\u0a35\0\u0a5c"+
    "\0\u0a83\0\u0aaa\0\165\0\u0ad1\0\u0af8\0\u0b1f\0\u0b46\0\u0b6d"+
    "\0\u0b94\0\u0bbb\0\u0be2\0\u0c09\0\u0c30\0\165\0\u0c57\0\u0c7e"+
    "\0\u0ca5\0\165\0\u0ccc\0\165\0\u0cf3\0\u0d1a\0\u0d41\0\u0d68"+
    "\0\u0d8f\0\u0db6\0\u0ddd\0\u0e04\0\u0e2b\0\u0e52\0\165\0\u0e79"+
    "\0\u0ea0\0\u0ec7\0\u0eee\0\u0f15\0\u0f3c\0\u0f63\0\165\0\u0f8a"+
    "\0\u0fb1\0\u0fd8\0\165\0\u0fff\0\u1026\0\u104d\0\u1074\0\165"+
    "\0\u109b\0\165\0\u10c2\0\u10e9\0\u1110\0\u1137\0\u115e\0\u1185"+
    "\0\u11ac\0\165\0\u11d3\0\u11fa\0\u1221\0\165\0\165\0\165"+
    "\0\u1248\0\165\0\u126f\0\u1296\0\u12bd\0\u12e4\0\u130b\0\u1332"+
    "\0\u1359\0\165\0\165\0\165\0\u1380\0\165\0\165\0\165"+
    "\0\u13a7\0\u13ce\0\u13f5\0\165\0\u141c\0\165\0\u1443\0\165"+
    "\0\165\0\165\0\165\0\u146a\0\u1491\0\165";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[166];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\5\5\1\6\5\5\1\7\3\5"+
    "\1\10\1\5\1\11\1\5\1\12\1\13\1\5\1\14"+
    "\3\5\1\15\1\5\1\16\1\17\1\20\1\21\1\22"+
    "\1\23\1\5\1\24\51\0\1\5\1\25\1\5\1\26"+
    "\3\5\1\27\32\5\1\0\1\5\3\0\42\5\1\0"+
    "\1\5\3\0\7\5\1\30\5\5\1\31\24\5\1\0"+
    "\1\5\3\0\3\5\1\32\1\5\1\33\34\5\1\0"+
    "\1\5\3\0\10\5\1\34\1\35\30\5\1\0\1\5"+
    "\3\0\17\5\1\36\22\5\1\0\1\5\3\0\3\5"+
    "\1\37\36\5\1\0\1\5\3\0\3\5\1\40\6\5"+
    "\1\41\27\5\1\0\1\5\3\0\11\5\1\42\7\5"+
    "\1\43\6\5\1\44\1\45\10\5\1\0\1\5\3\0"+
    "\11\5\1\46\30\5\1\0\1\5\3\0\17\5\1\47"+
    "\22\5\1\0\1\5\3\0\13\5\1\50\26\5\1\0"+
    "\1\5\3\0\11\5\1\51\4\5\1\52\23\5\1\0"+
    "\1\5\3\0\10\5\1\53\31\5\1\0\1\5\3\0"+
    "\41\5\1\22\1\0\1\5\3\0\2\5\1\54\37\5"+
    "\1\0\1\5\3\0\32\5\1\55\7\5\1\0\1\5"+
    "\3\0\10\5\1\56\31\5\1\0\1\5\3\0\7\5"+
    "\1\57\32\5\1\0\1\5\3\0\7\5\1\60\32\5"+
    "\1\0\1\5\3\0\5\5\1\61\7\5\1\62\24\5"+
    "\1\0\1\5\3\0\17\5\1\63\22\5\1\0\1\5"+
    "\3\0\5\5\1\64\34\5\1\0\1\5\3\0\4\5"+
    "\1\65\35\5\1\0\1\5\3\0\7\5\1\66\32\5"+
    "\1\0\1\5\3\0\5\5\1\67\34\5\1\0\1\5"+
    "\3\0\7\5\1\70\20\5\1\71\1\72\10\5\1\0"+
    "\1\5\3\0\32\5\1\73\7\5\1\0\1\5\3\0"+
    "\17\5\1\74\22\5\1\0\1\5\3\0\16\5\1\75"+
    "\23\5\1\0\1\5\3\0\15\5\1\76\24\5\1\0"+
    "\1\5\3\0\2\5\1\77\37\5\1\0\1\5\3\0"+
    "\34\5\1\100\5\5\1\0\1\5\3\0\11\5\1\101"+
    "\30\5\1\0\1\5\3\0\15\5\1\102\24\5\1\0"+
    "\1\5\3\0\3\5\1\103\36\5\1\0\1\5\3\0"+
    "\10\5\1\104\31\5\1\0\1\5\3\0\11\5\1\105"+
    "\30\5\1\0\1\5\3\0\3\5\1\106\36\5\1\0"+
    "\1\5\3\0\5\5\1\107\34\5\1\0\1\5\3\0"+
    "\11\5\1\110\30\5\1\0\1\5\3\0\10\5\1\111"+
    "\31\5\1\0\1\5\3\0\3\5\1\112\36\5\1\0"+
    "\1\5\3\0\15\5\1\113\24\5\1\0\1\5\3\0"+
    "\5\5\1\114\34\5\1\0\1\5\3\0\23\5\1\115"+
    "\16\5\1\0\1\5\3\0\17\5\1\116\22\5\1\0"+
    "\1\5\3\0\3\5\1\117\36\5\1\0\1\5\3\0"+
    "\3\5\1\120\36\5\1\0\1\5\3\0\10\5\1\121"+
    "\31\5\1\0\1\5\3\0\5\5\1\122\34\5\1\0"+
    "\1\5\3\0\11\5\1\123\30\5\1\0\1\5\3\0"+
    "\1\5\1\124\40\5\1\0\1\5\3\0\7\5\1\125"+
    "\32\5\1\0\1\5\3\0\7\5\1\126\32\5\1\0"+
    "\1\5\3\0\13\5\1\127\26\5\1\0\1\5\3\0"+
    "\16\5\1\130\23\5\1\0\1\5\3\0\16\5\1\131"+
    "\23\5\1\0\1\5\3\0\3\5\1\132\36\5\1\0"+
    "\1\5\3\0\7\5\1\133\32\5\1\0\1\5\3\0"+
    "\15\5\1\134\24\5\1\0\1\5\3\0\15\5\1\135"+
    "\24\5\1\0\1\5\3\0\3\5\1\136\1\137\35\5"+
    "\1\0\1\5\3\0\4\5\1\140\35\5\1\0\1\5"+
    "\3\0\4\5\1\141\35\5\1\0\1\5\3\0\10\5"+
    "\1\142\31\5\1\0\1\5\3\0\17\5\1\143\22\5"+
    "\1\0\1\5\3\0\11\5\1\144\30\5\1\0\1\5"+
    "\3\0\10\5\1\145\31\5\1\0\1\5\3\0\7\5"+
    "\1\146\32\5\1\0\1\5\3\0\3\5\1\147\36\5"+
    "\1\0\1\5\3\0\31\5\1\150\10\5\1\0\1\5"+
    "\3\0\21\5\1\151\20\5\1\0\1\5\3\0\23\5"+
    "\1\152\16\5\1\0\1\5\3\0\25\5\1\153\14\5"+
    "\1\0\1\5\3\0\11\5\1\154\30\5\1\0\1\5"+
    "\3\0\17\5\1\155\22\5\1\0\1\5\3\0\10\5"+
    "\1\156\31\5\1\0\1\5\3\0\10\5\1\157\31\5"+
    "\1\0\1\5\3\0\12\5\1\160\27\5\1\0\1\5"+
    "\3\0\5\5\1\161\34\5\1\0\1\5\3\0\10\5"+
    "\1\162\31\5\1\0\1\5\3\0\31\5\1\163\10\5"+
    "\1\0\1\5\3\0\21\5\1\164\20\5\1\0\1\5"+
    "\3\0\11\5\1\165\30\5\1\0\1\5\3\0\5\5"+
    "\1\166\34\5\1\0\1\5\3\0\5\5\1\167\34\5"+
    "\1\0\1\5\3\0\5\5\1\170\34\5\1\0\1\5"+
    "\3\0\5\5\1\171\34\5\1\0\1\5\3\0\23\5"+
    "\1\172\16\5\1\0\1\5\3\0\12\5\1\173\27\5"+
    "\1\0\1\5\3\0\17\5\1\174\22\5\1\0\1\5"+
    "\3\0\11\5\1\175\30\5\1\0\1\5\3\0\11\5"+
    "\1\176\30\5\1\0\1\5\3\0\5\5\1\177\34\5"+
    "\1\0\1\5\3\0\3\5\1\200\36\5\1\0\1\5"+
    "\3\0\5\5\1\201\34\5\1\0\1\5\3\0\15\5"+
    "\1\202\24\5\1\0\1\5\3\0\3\5\1\203\36\5"+
    "\1\0\1\5\3\0\11\5\1\204\30\5\1\0\1\5"+
    "\3\0\15\5\1\205\24\5\1\0\1\5\3\0\7\5"+
    "\1\206\32\5\1\0\1\5\3\0\7\5\1\207\32\5"+
    "\1\0\1\5\3\0\31\5\1\210\10\5\1\0\1\5"+
    "\3\0\23\5\1\211\16\5\1\0\1\5\3\0\7\5"+
    "\1\212\32\5\1\0\1\5\3\0\10\5\1\213\31\5"+
    "\1\0\1\5\3\0\7\5\1\214\32\5\1\0\1\5"+
    "\3\0\13\5\1\215\26\5\1\0\1\5\3\0\5\5"+
    "\1\216\34\5\1\0\1\5\3\0\16\5\1\217\23\5"+
    "\1\0\1\5\3\0\3\5\1\220\36\5\1\0\1\5"+
    "\3\0\7\5\1\221\32\5\1\0\1\5\3\0\10\5"+
    "\1\222\31\5\1\0\1\5\3\0\26\5\1\223\13\5"+
    "\1\0\1\5\3\0\31\5\1\224\10\5\1\0\1\5"+
    "\3\0\32\5\1\225\7\5\1\0\1\5\3\0\3\5"+
    "\1\226\36\5\1\0\1\5\3\0\17\5\1\227\22\5"+
    "\1\0\1\5\3\0\26\5\1\230\13\5\1\0\1\5"+
    "\3\0\16\5\1\231\23\5\1\0\1\5\3\0\7\5"+
    "\1\232\32\5\1\0\1\5\3\0\7\5\1\233\32\5"+
    "\1\0\1\5\3\0\17\5\1\234\22\5\1\0\1\5"+
    "\3\0\17\5\1\235\22\5\1\0\1\5\3\0\3\5"+
    "\1\236\36\5\1\0\1\5\3\0\7\5\1\237\32\5"+
    "\1\0\1\5\3\0\10\5\1\240\31\5\1\0\1\5"+
    "\3\0\3\5\1\241\36\5\1\0\1\5\3\0\3\5"+
    "\1\242\36\5\1\0\1\5\3\0\7\5\1\243\32\5"+
    "\1\0\1\5\3\0\11\5\1\244\30\5\1\0\1\5"+
    "\3\0\16\5\1\245\23\5\1\0\1\5\3\0\17\5"+
    "\1\246\22\5\1\0\1\5\1\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[5304];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\1\2\11\17\1\2\11\222\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[166];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /* user code: */

/* The following can be generated with the following command:

   cat $DSAP/src/lib/dataformat/db |
     awk ' $1=="#" && $2=="define" { print "public static final int ",$3," = ",$4,";" }' 
*/

    public static final int  STRING  =  257 ;
    public static final int  NUMBER  =  258 ;
    public static final int  SCHEMA  =  259 ;
    public static final int  ATTRIBUTE  =  260 ;
    public static final int  RELATION  =  261 ;
    public static final int  DESCRIPTION  =  262 ;
    public static final int  DETAIL  =  263 ;
    public static final int  LIKE  =  264 ;
    public static final int  TIMEDATE  =  265 ;
    public static final int  UNITS  =  266 ;
    public static final int  NULLVAL  =  267 ;
    public static final int  FORMAT  =  268 ;
    public static final int  RANGE  =  269 ;
    public static final int  SEPARATOR  =  270 ;
    public static final int  REAL  =  271 ;
    public static final int  INTEGER  =  272 ;
    public static final int  TIME  =  273 ;
    public static final int  YEARDAY  =  274 ;
    public static final int  ASCII  =  275 ;
    public static final int  WAVEFORM  =  276 ;
    public static final int  RESPONSE  =  277 ;
    public static final int  BFLOAT  =  278 ;
    public static final int  BDOUBLE  =  279 ;
    public static final int  BSHORT  =  280 ;
    public static final int  BINT  =  281 ;
    public static final int  DBPTR  =  282 ;
    public static final int  FIELDS  =  283 ;
    public static final int  PRIMARY  =  284 ;
    public static final int  ALTERNATE  =  285 ;
    public static final int  FOREIGN  =  286 ;
    public static final int  DEFINES  =  287 ;
    public static final int  TRANSIENT  =  288 ;
    


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  DatabaseSchemaLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  DatabaseSchemaLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzPushbackPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead < 0) {
      return true;
    }
    else {
      zzEndRead+= numRead;
      return false;
    }
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = zzPushbackPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Yytoken yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = zzLexicalState;


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 29: 
          { return TIMEDATE;
          }
        case 35: break;
        case 18: 
          { return BFLOAT;
          }
        case 36: break;
        case 4: 
          { /* string/identifier */
          }
        case 37: break;
        case 7: 
          { return REAL;
          }
        case 38: break;
        case 11: 
          { return NULLVAL;
          }
        case 39: break;
        case 10: 
          { return LIKE;
          }
        case 40: break;
        case 14: 
          { return UNITS;
          }
        case 41: break;
        case 34: 
          { return DESCRIPTION;
          }
        case 42: break;
        case 8: 
          { return TIME;
          }
        case 43: break;
        case 23: 
          { return YEARDAY;
          }
        case 44: break;
        case 33: 
          { return TRANSIENT;
          }
        case 45: break;
        case 27: 
          { return PRIMARY;
          }
        case 46: break;
        case 13: 
          { return DBPTR;
          }
        case 47: break;
        case 15: 
          { return SCHEMA;
          }
        case 48: break;
        case 16: 
          { return ASCII;
          }
        case 49: break;
        case 21: 
          { return FORMAT;
          }
        case 50: break;
        case 3: 
          { /* Discard whitespace. */
          }
        case 51: break;
        case 25: 
          { return BDOUBLE;
          }
        case 52: break;
        case 24: 
          { return DEFINES;
          }
        case 53: break;
        case 26: 
          { return FOREIGN;
          }
        case 54: break;
        case 12: 
          { return RANGE;
          }
        case 55: break;
        case 5: 
          { /* string */
          }
        case 56: break;
        case 19: 
          { return BSHORT;
          }
        case 57: break;
        case 2: 
          { /* character */
          }
        case 58: break;
        case 1: 
          { /* number */
          }
        case 59: break;
        case 31: 
          { return ATTRIBUTE;
          }
        case 60: break;
        case 20: 
          { return FIELDS;
          }
        case 61: break;
        case 9: 
          { return BINT;
          }
        case 62: break;
        case 32: 
          { return ALTERNATE;
          }
        case 63: break;
        case 22: 
          { return INTEGER;
          }
        case 64: break;
        case 17: 
          { return DETAIL;
          }
        case 65: break;
        case 30: 
          { return SEPARATOR;
          }
        case 66: break;
        case 28: 
          { return RELATION;
          }
        case 67: break;
        case 6: 
          { 
          }
        case 68: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            return null;
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
