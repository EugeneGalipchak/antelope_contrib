.TH DB2XML 3 "$Date$"
.SH NAME
db2ptolemy \- convert a database view to a Ptolemy II expression
.SH SYNOPSIS
.nf
#include "dbptolemy.h"

int \fBdb2ptolemy\fP(Dbptr \fIdb\fP, 
                 Tbl *\fIfields\fP, Tbl *\fIexpressions\fP, void **\fIptexp\fP,
                 int \fIflags\fP)
.fi
.SH DESCRIPTION
\fBdb2ptolemy\fP returns a Ptolemy II expression which evaluates to an array
of records, with one record for each row of the view,
returning 0 for success and negative values on error.

By default (i.e. with \fIflags\fP set to 0) the result is
returned as a string in the \fIptexp\fP pointer.  This string
is freshly allocated on each call. Previous contents of the pointer are
ignored. Freeing the returned string is the responsibility of the user. If the
\fIflags\fP argument is set to DBXML_BNS, the returned argument
\fIptexp\fP is the address of a pointer to a Buffered Network Stream
object, which allows the result to be read out in pieces. For
further detail see bns(3). Once again, freeing the returned Bns structure is 
the responsibility of the user.

.SH EXAMPLE

.SH RETURN VALUES
\fBdb2ptolemy\fP returns 0 upon success, -1 upon error. Any errors encountered
are registered with the elog(3) facility.
.SH LIBRARY
-ldbptolemy $(DBLIBS)
.SH "SEE ALSO"
.nf
db2xml(3), dbselect(3)
.fi
.SH "BUGS AND CAVEATS"
The \fIptexp\fP pointer is a void pointer to support multiple return
types. 

This program could be reimplemented with a combination of db2xml and an 
XSLT stylesheet.  Or a more general program could be implemented which 
would transform a database view into a textual representation given a recipe
contained in a parameter file, using morph(3) (for instance) and sprintf to
perform the transformation.

.SH AUTHOR
.nf
Tobin Fricke, University of California
This program is a rather trivial modification of Kent Lindquist's db2xml
.fi
.\" $Id$
