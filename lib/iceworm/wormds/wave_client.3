.\" %W% %G%
.TH WAVE_CLIENT 3 $Date$
.SH NAME
wave_client \- library for interacting with the Iceworm wave_server
.SH SYNOPSIS
.nf
#include "wave_client.h"

extern char WaveServer[]; 

typedef union {
        char    *c;
        short   *s2;
        int     *s4;
        float   *t4;
} DataPtr;
 
typedef struct {
        double  starttime;      /* time of first sample in waveform segment */
        double  endtime;        /* time of last sample in waveform segment */
        double  samprate;       /* Averaged sample rate in waveform segment */
        int     nsamp;          /* Number of samples in waveform segment */
        DataPtr dp;             /* Pointer to data in this waveform segment */
} TraceSegment;                 /* Section of contiguous waveform data */
 
typedef struct {
        int     pin;            /* Earthworm Pin number */
        char    sta[7];         /* Station name */
        char    chan[9];        /* Channel name */
        char    net[9];         /* Channel name */
        double  tstart;         /* Start time of tank */
        double  tend;           /* Start time of latest buffer in tank */
} WSEntry;      /* Wave-server entry: info on data the wave-server has stored */

wave_client_pin_to_file(
        int     pin,            /* requested pin number */
        double  reqs,           /* requested start-time of waveforms */
        double  reqe,           /* requested end-time of waveforms */
        int     gapflag,        /* How to handle gaps in the data */
        char    *pathfile,      /* Where to write the file of waveform data */
        int     append,         /* flag to append to file if file exists */
        int     *foff,          /* returned byte-offset of data in file */
        double  *ts,            /* start time of first sample saved */
        int     *nsamp,         /* number of samples saved */
        double  *samprate,      /* sample rate of saved data */
        char    *datatype)      /* datatype of saved data */


int
wave_client_stachan_to_file(
        char    *sta,           /* requested station */
        char    *chan,          /* requested channel */
        char    *net,           /* requested network */
        double  reqs,           /* requested start-time of waveforms */
        double  reqe,           /* requested end-time of waveforms */
        int     gapflag,        /* How to handle gaps in the data */
        char    *pathfile,      /* Where to write the file of waveform data */
        int     append,         /* flag to append to file if file exists */
        int     *foff,          /* returned byte-offset of data in file */
        double  *ts,            /* start time of first sample saved */
        int     *nsamp,         /* number of samples saved */
        double  *samprate,      /* sample rate of saved data */
        char    *datatype)      /* datatype of saved data */

static int
wave_client_buf_to_file(
        DataPtr *data,          /* Data to save to file */
        char    *datatype,      /* type of data to save */
        int     nsamp,          /* number of data samples to save */
        char    *pathfile,      /* Where to write the file of waveform data */
        int     append,         /* flag to append to file if file exists */
        int     *foff)          /* returned byte-offset of data in file */

int
wave_client_pin_to_buf(
        int     pin,            /* Requested pin number */
        double  reqs,           /* requested start-time of waveforms */
        double  reqe,           /* requested end-time of waveforms */
        int     gapflag,        /* how to handle gaps in the data */
        double  *ts,            /* start time of first sample returned */
        int     *nsamp,         /* number of samples returned */
        double  *samprate,      /* sample rate of returned data */
        char    *datatype,      /* datatype of the returned data */
        DataPtr *data)          /* pointer to the returned data */
int
wave_client_stachan_to_buf(
        char    *sta,           /* requested station */
        char    *chan,          /* requested channel */
        char    *net,           /* requested network */
        double  reqs,           /* requested start-time of waveforms */
        double  reqe,           /* requested end-time of waveforms */
        int     gapflag,        /* how to handle gaps in the data */
        double  *ts,            /* start time of first sample returned */
        int     *nsamp,         /* number of samples returned */
        double  *samprate,      /* sample rate of returned data */
        char    *datatype,      /* datatype of the returned data */
        DataPtr *data)          /* pointer to the returned data */
int
wave_client_get_stachan_segments(
        char    *sta,           /* requested station */
        char    *chan,          /* requested channel */
        char    *net,           /* requested network */
        double  reqs,           /* requested start-time of waveforms */
        double  reqe,           /* requested end-time of waveforms */
        char    *datatype,      /* datatype of the returned data */
        DataPtr *data,          /* pointer to the returned data */
        int     *nseg,          /* Number of data-segments returned */
        TraceSegment **tseg)    /* Structures for the returned data segments */
int
wave_client_get_pin_segments(
        int     pin,            /* requested pin number */
        double  reqs,           /* requested start-time of waveforms */
        double  reqe,           /* requested end-time of waveforms */
        char    *datatype,      /* datatype of the returned data */
        DataPtr *data,          /* pointer to the returned data */
        int     *nseg,          /* Number of data-segments returned */
        TraceSegment **tseg)    /* Structures for the returned data segments */
int
wave_client_get_menu( int *nstachans, WSEntry **menu )
 
int
wave_client_buf_to_float( char *datatype, int nsamp, DataPtr *data )

.fi
.SH DESCRIPTION
The wave_client library allows one to interact with the Iceworm wave-server,
requesting segments of recent waveform data. These routines expect 
the global string WaveServer to be set. This is declared in the wave_client.h
file, and should be filled with "IP:Port", specifying the IP address and 
port number on which the wave-server is listening: e.g. "137.229.32.103:16022".
wave_client routines will fail if this is not set. 
.LP
wave_client_get_menu() Inquires about the data the wave-server has
available. The menu structures returned must be freed by the caller
unless an error is returned.
.LP
wave_client_get_pin_segments() Get the data for a given pin        
from the wave-server.                                            
It is the caller's responsibility to free the memory for the     
DataPtr and the TraceSegment structures.                         
.LP
wave_client_get_stachan_segments() Get the data for a given        
station-channel from the wave-server.                            
It is the caller's responsibility to free the memory for the     
DataPtr and the TraceSegment structures.                         
.LP
wave_client_stachan_to_buf() Returns a buffer of data with gaps   
handled as requested. It is the caller's responsibility to free  
the memory for the returned data buffer. Returns the number of   
gaps that were filled.                                           
.LP
wave_client_pin_to_buf() Returns a buffer of data with gaps        
handled as requested. It is the caller's responsibility to free  
the memory for the returned data buffer. Returns the number of   
gaps that were filled.                                           
.LP
wave_client_stachan_to_file() Saves the requested station-channel  
to a file.                                                      
.LP
wave_client_pin_to_file() Saves the requested data for a pin       
to a file.                                                      
.LP
wave_client_buf_to_float() Convert a buffer of waveform data to    
four-byte floating-point if it is not already in that form.
.SH OPTIONS
The gapflag argument can be set to GAP_FAIL, GAP_FILL_ZEROS, or GAP_FILL_MAX.
The latter fills the data segment with the maximum value of the storage class.
.SH FILES
.SH ENVIRONMENT
.SH PARAMETER FILE
.SH EXAMPLE
.SH RETURN VALUES
.nf
ERR_ALLOC     -1       /* error allocating memory buffer        */
ERR_NOHOST    -2       /* host name unknown                     */
ERR_SOCKET    -3       /* error with socket connect, send, recv */
ERR_FILEIO    -4       /* error opening or writing to file      */
ERR_NODATA    -5       /* data requested is not in tank         */
ERR_OVRFLW    -6       /* data buffer length > BufferSize       */
ERR_GAP       -7       /* gap in data                           */
ERR_DATATYPE  -8       /* Unknown data type                     */
.fi
.SH LIBRARY
.SH DIAGNOSTICS
.SH "SEE ALSO"
.nf
wave_server(1), iceworm(1)
.fi
.SH "BUGS AND CAVEATS"
wave_client_buf_to_float will not re-cast maximum values of the source
storage class to maximum values of the target storage class. This may
not be a bug, but can have an unintended effect in dbpick.
.SH AUTHOR
.nf
Kent Lindquist
Geophysical Institute
University of Alaska, Fairbanks
.fi
