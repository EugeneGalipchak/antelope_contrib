.TH LIBWORMUTIL 3 "$Date$"
.SH NAME
libwormutil \- Shared library versions of Earthworm Solaris-independent functions
.SH SYNOPSIS
.nf
SOCKET  accept_ew ( 
		SOCKET s, struct sockaddr FAR* addr, 
		int FAR* addrlen, int timeout_msec );

int     bind_ew ( SOCKET s, struct sockaddr FAR* name, int namelen );

float   brent ( 
		float ax, float bx, float cx, float (*f)(float), 
		float tol, float *xmin );

int     closesocket_ew ( SOCKET s, int HowToClose );

int     connect_ew ( 
		SOCKET s, struct sockaddr FAR* name, int namelen, 
		int timeout_msec );

void    date17 ( double secs, char *c17 );

void    date20 ( double secs, char *c20 );

struct Greg *datime ( double secs, struct Greg *pg );

int     dequeue ( QUEUE *q, DATA x, long* size, MSG_LOGO* userLogoPtr );

int     dumpqueue ( QUEUE *q, char *filename );

int     enqueue ( QUEUE *q, DATA x, long size, MSG_LOGO userLogo );

int     epochsec17 ( double *sec, char *tstr );

int     GetInst ( char *instName, unsigned char *instId );

long    GetKey ( char *ringName );

int     GetLocalInst ( unsigned char *localId );

int     GetModId ( char *modName, unsigned char *modId );

Q_POS   getNext ( QUEUE * q, int QueuePosition );

int     getNextLine ( char** pNxtLine, char* line );

int     getNumOfElementsInQueue ( QUEUE * q );

Q_POS   getPosFirst ( QUEUE * q );

Q_POS   getPosLast ( QUEUE * q );

Q_POS   getPrev ( QUEUE * q, int QueuePosition );

int     GetType ( char *msgName, unsigned char *msgType );

void    GetUtil_LoadTable ( void );

int     get_prog_name ( char *full_name, char *prog_name );

struct Greg *gregor ( long min, struct Greg *pg );

struct Greg *grg ( long min, struct Greg *pg );

void    html_logit ( char *flag, char *format, ... );

int     initqueue ( 
		QUEUE* q, unsigned long maxElements,
		unsigned long elementMaxSize );

long    julian ( struct Greg *pg );

long    julmin ( struct Greg *pg );

double  julsec17 ( char *c17 );

int     k_close ( void );

char    *k_com ( void );

void    k_dump ( void );

int     k_err ( void );

char    *k_get ( void );

int     k_int ( void );

int     k_its ( char *c );

long    k_long ( void );

int     k_open ( char *name );

int     k_put ( char *crd );

int     k_rd ( void );

char    *k_str ( void );

double  k_val ( void );

int     listen_ew ( SOCKET s, int backlog );

void    logit ( char *flag, char *format, ... );

void    logit_init ( char *prog, short mid, int bufSize, int logflag );

void    mnbrak ( 
		float *ax, float *bx, float *cx, float *fa, float *fb, 
		float *fc, float(*func)(float) );

int     parseSnippet ( char* msg, SNIPPET* pSnp, char** nxtLine );

DATA    peekNextElement ( QUEUE *q );

int     recvfrom_ew ( 
		SOCKET s, char FAR* buf, int len, int flags, 
		struct sockaddr FAR* from, int FAR* fromlen, 
		int timeout_msec );

int     recv_all ( 
		SOCKET s, char FAR* buf, int len, int flags, 
		int timeout_msec );

int     recv_ew ( 
		SOCKET s, char FAR* buf, int len, int flags, 
		int timeout_msec );

struct timeval FAR * resetTimeout ( struct timeval FAR * pSelectTimeout );

int     select_ew ( 
		int nfds, fd_set FAR * readfds, fd_set FAR * writefds,
		fd_set FAR * exceptfds, int timeout_msec );

int     sendto_ew ( 
		SOCKET s, const char FAR * buf, int len, int flags,
		const struct sockaddr FAR * to, int tolen,
		int timeout_msec );

int     send_ew ( 
		SOCKET s, const char FAR * buf, int len, int flags,
		int timeout_msec );

int     setSocket_ewDebug ( int debug );

int     setSocket_ewSelectTimeout ( unsigned int Timeout );

int     site_com ( void );

int     site_index ( char *site, char *net, char *comp );

void    site_init ( void );

int     site_load ( char *name );

void    site_read ( char *name );

SOCKET  socket_ew ( int af, int type, int protocol );

void    SwapDouble ( double *data );

void    SwapFloat ( float *data );

void    SwapInt ( int *data );

void    SwapLong ( long *data );

void    SwapShort ( short *data );

time_t  timegm ( struct tm *tm );

double  tnow ( void );

int     t_atodbl ( char* YYYYMMDD, char* HHMMSS, double* starttime );

int     t_com ( void );

double  t_direct ( double r, double z, double *dtdr, double *dtdz );

float   t_dis ( float r );

float   t_fun ( float r );

double  t_lay ( double r, double z, double *dtdr, double *dtdz );

int     t_model ( double z, double v );

double  t_phase ( int ph, double r, double z, double *dtdr, double *dtdz );

double  t_pmp ( double r, double z, double *dtdr, double *dtdz );

int     t_region ( double r, double z, TPHASE *treg );

int     t_set ( void );

int     undumpqueue ( QUEUE *q, char *filename );

int     WaveMsgMakeLocal ( TRACE_HEADER* wvmsg );

.fi
.SH DESCRIPTION
These routines are part of the USGS Earthworm package, version 6.2, 
available through http://www.cr.usgs.gov/. They have been converted
to shared-object libraries. For full documentation of these routines 
see the USGS web pages at http://gldbrick.cr.usgs.gov/ew-doc/.
.SH OPTIONS
.SH FILES
.SH ENVIRONMENT
.SH PARAMETER FILE
.SH EXAMPLE
.ft CW
.in 2c
.nf
.fi
.in
.ft R
.SH RETURN VALUES
.SH LIBRARY
.SH ATTRIBUTES
MT-Safe ?
.SH DIAGNOSTICS
.SH "SEE ALSO"
.nf
libwormsol(3), libwormds(3), http://gldbrick.cr.usgs.gov/ew-doc/
.fi
.SH "BUGS AND CAVEATS"
.SH AUTHOR
Various, part of the Earthworm project of the U.S. Geological Survey. 
Converted to Shared-object libraries by Kent Lindquist as part of the 
Iceworm project.
.\" $Id$
