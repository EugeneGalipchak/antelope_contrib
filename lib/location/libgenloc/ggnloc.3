.\" %W% %G%
.TH GGNLOC 3 "%G%"
.SH NAME
ggnloc - generic Gauss-Newton location procedure and location error analysis
.SH SYNOPSIS
.nf
#include "stock.h"
#include "arrays.h"
#include "location.h"
int ggnloc(Hypocenter *h0, Tbl *ta, Tbl *tu, Location_options o,
	Tbl **history, Tbl **reasons, Tbl **residuals);
void predicted_errors(Hypocenter h, Tbl *ta, Tbl *tu,
        Location_options o, float **C, float *emodel)
.fi
.SH DESCRIPTION
.LP
This pair of functions implement the standard Gauss-Newton
(Geiger's method) single event location method and provide
error estimates of the resulting solution.  
.LP
\fBggnloc\fR is a general purpose location procedure for
locating seismic events using an arbitrary mix of arrival times and
array slowness vector measurements.  The algorithm is designed
to work with any seismic phase for which one can supply a suitable
method for calculating theoretical travel times and array slowness
vectors.  \fBggnloc\fR implements the standard method of 
seismic event location based on the well known Gauss-Newton method
commonly called Geiger's method in seismology.  However, the 
range of options that are available are rich and a huge 
variation in behavior of the algorithm is possible depending 
upon the inputs supplied to it.  
.LP
The behavior of ggnloc is primarily controlled by a long
list of parameters passed through the control structure
Location_options o.  
Inputs that build this structure are described in greater detail under 
genloc_intro(3), but major features of the procedure are as
follows:
.LP
\fIgeneralized inverse.\fR  Two fundamentally different algorithms
can be invoked;  a least squares solution based on the pseudoinverse 
with possible singular value truncation (similar to HYPOELLIPSE) or
an implementation of the Marquardt algorithm (similar to LOCSAT).  
In addition, the procedure supports the use of so called recentering
which treats the origin time independently from the spatial 
coordinates of the hypocenter.  A minor variant of this procedure
that has not been used before is that I use the median travel time
residual (slowness vectors are not used in recentering) to adjust
the origin time when recentering is turned on.  This is 
sensible, although not standard practice, because the median is
less sensitive to outliers.  In the same spirit, the scale factor
for residual weighting functions (see below) is also determined
using the interquartiles rather than rms because the interquartile
distance is well know to be a more robust measure of error scale.
.LP
\fIweighting\fR.  A range of complex weighting schemes is 
supported.  This includes a number of options for residual 
weighting schemes, a completely general distance weighting
scheme that requires the user to enter a discrete representation
of weight as a function of epicentral distance, and 
a variable weight assigned to control the relative importance
of arrival time and slowness vector measurements.  In addition,
each datum is weighted by an input estimate of expected measurement
error.  
Because ggnloc assumes a mix of units (slowness and travel time 
measurements) the uncertainty weight cannot be turned off.  
Weighted rms residual is than always a nondimensional number 
scaled to units of 
nominal measurement error.  
In contrast, the raw rms residual ignores slowness residuals so 
it can be in the correct units of seconds.  
.LP
\fIearth model\fR.  A novel feature of \fBggnloc\fR is that
it utilizes a highly flexible travel time interface that has
virtually unlimited capabilities for supporting arbitrarily 
complex earth models and any combinations of seismic
phases.  For further details see genloc_intro(3). 
.LP
ggnloc arguments:
.ce
INPUTS
.LP
Hypocenter *h0 = starting guess to use for location.  
(The typedef for the Hypocenter and other objects referred to below
are found in location.h)
.LP
Tbl *ta = Arrival time table returned by the related function read_arrivals.
.LP
Tbl *tu = Slowness vector returned by function read_slowness_vectors
.LP
Location_options o = control structure (see genloc_intro(3)).
.ce 
OUTPUTS
.LP
Tbl **history = table of hypocenter objects containing the entire 
convergence history of this event.  The first entry in the Tbl 
is the initial location, and the last entry is the ending solution.
.LP
Tbl **reasons = table of strings containing human readable 
description of why the iteration sequence terminated.  
.LP
Tbl **residuals = table of strings containing residual and weighting
information about the final solution.  For a description of the 
quantities in this table see sgnloc(1) which dumps this table 
directly to an output parameter file.  
.LP
The companion function predicted_errors computes two different error estimates 
for an earthquake location computed by ggnloc:  (1)  the standard covariance matrix 
used to compute conventional error ellipses, and (2) a velocity model error bound (defined 
in the following paper:  Pavlis, G. L. (1986).  Appraising earthquake hypocenter errors:  
a complete practical approach for single-event locations, 
\fIBull. Seism. Soc. Amer.\fR, \fB76\fR, 1699-1717. ).  
.LP
The covariance matrix computed by predicted_errors has three 
features the user must recognize. 
.IP (1)
C is unscaled.  That is, it defines the form of the covariance matrix, 
but a scale factor is required to convert the covariance to an ellipsoid of 
a specified statistical confidence level.  This was an intentional design decision 
imposed because multiple statistical measures can be used to define this scale 
factor (notably chi-squared or F statistics).  Furthermore, the author's strong 
prejudice is that error ellipsoids computed by this measure should be "taken with 
a grain of salt" to use a cliche.  This said, it is important to recognize the scaling 
that actually has been applied to compute the covariance because it is a simple 
process to rescale C to produce true confidence ellipses.  The matrix C returned 
by predicted_errors is computed from the standard matrix of partial derivatives 
with the full suite of weights the user selected.  This always includes 
the base weights determined from the 1/sigma (deltime field in css3.0's arrival table) 
and can optionally include distance weights and/or residual weights.   
.IP (2)
C is computed from a pure pseudoinverse no matter which generalized inverse 
the user selected for running ggnloc.  That is, the program forms A_w=WA and 
computes the SVD of A_w=USV^T.  C is then computed from the pure pseudoinverse 
form C=V(S-2)V^T where S-2 is the diagonal matrix of reciprocal singular values 
(squared).  The "pure" adjective means that we do not do singular value truncation 
unless the singular value, s, is a machine zero.  This is established here in 
the standard way by finding the largest singular value, smax, and deleting 
only singular values that have s/smax < epsilon where epsilon is the floating 
point precision constant (around E-6 for 32 bit IEEE floats).  This was done because 
the error estimates computed this way are more honest than those that would be 
computed by other inverses that are useful in a iterative program like ggnloc for 
stability.  Error analysis is about appraising the reliability of the final answer, 
not about getting an answer.  Consequently, a near singular matrix will yield a 
C matrix with very large elements and can be recognized as poorly constrained 
even if a stable solution was returned by ggnloc. 
.IP (3)
ggnloc allows fixing any of the four hypocentral parameters.  
The predicted_errors function handles this by setting the rows and columns of 
C for any fixed parameter to 0.  Thus, C is always returned as a 4 by 4 array with 
the rows/columns in x,y,z,t order, but whenever a fixed coordinate is used one or 
more columns and rows are zeroed.  Programs using the output of this function 
downstream with Datascope and the css3.0 schema (notably dbgenloc, relocate, 
and orbgenloc) can then  dump the full form of this matrix into the origerr table 
with no complications.  
.LP
The model error return (emodel) is a different measure described in the 
Pavlis (1986) paper.  It is computed by a modification of equation (25) of 
that paper.  There are two differences.    
.IP (1)
In the 1986 paper I used a travel time bounding criteria that scaled 
with source to receiver distance and a slowness error scale factor.  
Here the bound on the model error in each travel time is computed with 
a simple scale factor derived from the predicted travel time of each measured 
travel time as b=dtscale*T.  dtscale is a fraction that describes how good 
you think your velocity model is.  Physically it is of the rate at which 
travel time errors accumulate with time.  Its value is set independently 
for each phase in the phase description portion of the input parameter 
space.
.IP (2)
The 1986 paper did not consider slowness measurements.  
Slowness data enter into the solution, however, the same as travel times, 
but their dependence upon source position is definitely different.  Here I 
adopted the simplest possible approach and made the slowness model 
error bound  a fixed constant (in units of s/km) for each phase.  
This choice was made because my experience is that slowness residuals 
do not seem to consistently scale with distance like travel times.  
A more exact approach would be use an empirical function that depended 
upon the slowness vector, but my view was that this was uncharted territory 
and use of a simple constant for each phase was preferable.  This constant 
is set in the phase descriptions 
(see genloc_intro(3) and genloc_ttinterface(3)). 
.SH DIAGNOSTICS
.LP
These functions both use Dan Quinlan's library error functions 
(die, complain, and register_error) to post warning messages.
They will only die from malloc failures.  
.SH "SEE ALSO"
.nf
genloc_ttinterface(3), sgnloc(1), genloc(3), arr(3), tbl(3)
.fi
.SH "BUGS AND CAVEATS"
.SH AUTHOR
Gary L. Pavlis
