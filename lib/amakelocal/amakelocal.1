.TH AMAKELOCAL 1 "$Date$"
.SH NAME
amakelocal \- construct antelopemake.local for local site conditions
.SH SYNOPSIS
.nf
amakelocal [-v] [-i] [-p pfname] [MACRO [MACRO ...]]
.fi
.SH DESCRIPTION
Antelope has a self-contained compile mechanism and structure with rules codified in a standardized 
file $(ANTELOPEMAKE), as documented in antelopemakefile(5). In general, contributed code is written 
to stay within this self-contained framework as much as possible. At times, however, it is necessary to 
write contributed-code utilities that depend not only on the elements contained in or implied by 
the standard Antelope framework, but also on elements available externally and installed by the 
administrators of a given host system. 

The \fBamakelocal\fP utility helps automate the process 
of compiling Antelope contrib code against Antelope and against external packages, whose location may 
vary on individual systems. Internally, \fBamakelocal\fP has two modes of operation, the \fIconstruct\fP
mode and the \fIverify\fP mode. Operators needing to compile contributed code on their local system 
need to understand only the first mode. Developers of contributed-code modules need to understand both. 

In \fIconstruct\fP mode, \fBamakelocal\fP creates an $(ANTELOPEMAKE).local file (see antelopemakelocal(5))
appropriate to the system-administration conditions for the local system, tailored to support 
the compilation of contributed-code modules that depend not only on Antelope but also on external 
packages. Specifically, this program adjusts for the parochial locations of software packages and 
libraries external to Antelope but on which Antelope contributed-code programs depend. More 
specifically, \fBamakelocal\fP allows a parameter file to handle, in a standardized way, the configuration 
of Makefile macros which may vary across different machines and different operating systems. What 
\fBamakelocal\fP puts in the $(ANTELOPEMAKE).local file depends on the contents of a local parameter file 
called \fIamakelocal.pf\fP. If this parameter file isn't available, \fBamakelocal\fP defaults to using the 
parameter-file \fIamakelocal_proto.pf\fP, which comes with the program and should not be modified. 

In \fIverify\fP mode, \fBamakelocal\fP takes the names of one or more necessary Makefile macros on the 
command line. If these macros are configured and non-empty on the local system, \fBamakelocal\fP allows the compilation of 
a module which depends on them to proceed. If these are empty or not present on the local system, 
\fBamakelocal\fP aborts the compilation of the current subdirectory. \fBamakelocal\fP's success at this control
depends on setting up a certain Makefile structure, as shown in the example below. 

.SH OPTIONS
.IP -v 
verbose
.IP "-p pfname"
Specify an alternate parameter file. If this option is used, \fBamakelocal\fP does not default to using 
the \fIamakelocal_proto.pf\fP file in the absence of the specified file. 
.IP -i 
Install mode. The default behavior of \fBamakelocal\fP is to create an antelopemake.local file in the 
local directory, for installation by a surrounding make hierarchy. If the -i option is invoked, 
\fBamakelocal\fP will install the created file in $ANTELOPE/include and remove the copy from the local 
directory, allowing the \fBamakelocal\fP command to be run by hand from anywhere after updating the driver 
parameter file. 
.SH FILES
.SH ENVIRONMENT
.SH PARAMETER FILE
The \fIamakelocal.pf\fP parameter file contains specifications for macros that will be custom-configured 
for the machine on which compilation is taking place. If this parameter-file is present, these contents
are used. If \fIamakelocal.pf\fP is not present, \fBamakelocal\fP defaults to the supplied 
\fIamakelocal_proto.pf\fP parameter file. If an element is not present, or if the entry for 
the current operating system is not specified or is empty, the corresponding macro is omitted from 
the output file. 
.nf

output_file antelopemake.local

elements &Arr{
        XMOTIFLIB &Arr{
                Darwin 	-L/sw/lib
                Solaris -L/usr/openwin/lib
                Linux 	-L/usr/X11R6/lib
        }
        XMOTIFINCLUDE &Arr{
                Darwin 	-I/sw/include
                Solaris -I/usr/openwin/include
                Linux 	-I/usr/X11R6/include
        }
        PYTHONINCLUDE       &Arr{
                Darwin  /sw/include/python2.5
                Linux   /usr/local/include/python2.5
                Solaris /usr/local/include/python2.5
        }

}
.fi
.SH EXAMPLE
In \fIconstruct\fP mode, the \fBamakelocal\fP program creates an antelopemake.local file based on the 
contents of \fIamakelocal.pf\fP or \fIamakelocal_proto.pf\fP. This can happen as part of the normal compilation 
process for the contributed-code repository, or can be invoked from the command line by use of the 
\fI-i\fP option. The example below shows the latter case:
.in 2c
.ft CW
.nf
% \fBamakelocal -iv\fP
amakelocal: Couldn't find '\fIamakelocal.pf\fP Using parameter-file 'amakelocal_proto.pf'
amakelocal: Generated 'antelopemake.local' from parameter-file 'amakelocal_proto'
amakelocal: Installing 'antelopemake.local' in /opt/antelope/4.10/include
%
.fi
.ft R
.in
In \fPverify\fP mode, the \fBamakelocal\fP program serves as an element in the compile process for a given
software module. The normal Antelope Makefile for the module should be moved to the name Makefile2. 
Under the standard 
.nf
include $(ANTELOPEMAKE) 
.fi
line one should add an additional line for the automatically generated local make rules:
.nf
include $(ANTELOPEMAKE) 
include $(ANTELOPEMAKE).local
.fi
The required macros can then be used inside this normal Antelope Makefile (per antelopemakefile(5)).

Another \fImakefile\fP (lowercase 'm'!!) should then be created with the following contents, listing the 
required macro names on the command line for \fBamakelocal\fP (the example below is taken from the compilation 
structure for the Antelope Python libraries):
.nf
% pwd
/opt/antelope/4.10/src/contrib/data/python/datascope

% cat makefile 

all clean Include install installMAN pf relink tags uninstall test :: FORCED
        @-if amakelocal PYTHONINCLUDE ; then \
        $(MAKE) -f Makefile2 $@ ; \
        fi

FORCED:

% 
.fi
.SH RETURN VALUES
.SH LIBRARY
.SH ATTRIBUTES
.SH DIAGNOSTICS
.SH "SEE ALSO"
.nf
antelopemake(5), antelopemakelocal(5), localmake(1)
.fi
.SH "BUGS AND CAVEATS"
This is a development prototype. 

Do not modify the parameter-file \fIamakelocal_proto.pf\fP unless you are a developer extending the capabilities
and external linkages of the Antelope contributed-code source-tree itself. If you just want to use 
the configuration mechanism for your local site, copy \fIamakelocal_proto.pf\fP to \fIamakelocal.pf\fP (putting the 
latter somewhere on your parameter-file path), and edit the latter appropriately. 

It would be nice for \fBamakelocal\fP or some other program to have a GUI editing mode to modify the 
\fIamakelocal.pf\fP file. 

\fBamakelocal\fP could be more sophisticated in its tests and its flexibility for specifying 
required dependencies (presence of perl modules, for example); this is a work in progress. 
.SH AUTHOR
Kent Lindquist
Lindquist Consulting, Inc.
.\" $Id$
