'\" te
.TH TOP_MUTE 3 "$Date$"
.SH NAME
TopMute - apply a front-end mute to various types of Time Series objects
.SH SYNOPSIS
.nf
#include "seispp.h"
using namespace SEISPP;
class TopMute
{
public:
        double t0e, t1;
        TimeReferenceType reftype; 
        TopMute(){t0e=1.0; t1=2.0; reftype=relative;};
        TopMute(Pf *pf,string tag);
};
void ApplyTopMute(TimeSeries &ts,TopMute& mute);
void ApplyTopMute(ThreeComponentSeismogram& ts,TopMute& mute);
void ApplyTopMute(TimeSeriesEnsemble& t, TopMute& mute);
void ApplyTopMute(ThreeComponentEnsemble &t3c, TopMute& mute);
.fi
.SH DESCRIPTION
.LP
A \fITopMute\fR object is an OEP implementation of the concept of
a front-end or top mute common in seismic data processing.
A mute is essentially a way to place an artificial gap in a time
series to remove something that is not wanted.  The classic is
to remove the direct arrival from seismic reflection data.  
.LP
The mute defined here has two zones.  The front zone is a region
that is set to zeros and the second zone is a linear ramp segment.
The section of the data from the start to the time \fIt0e\fR
(defined in the TopMute object definition) is set to zero.
The section between \fIt0e\fR and \fIt1\fR is the linear ramp
segment.  Data after time \fIt1\fR are not altered.  In the
linear ramp segment a weight is applied to each sample within
that zone.  The weight scales from 0 to 1.0 using a linear fit 
between \fIt0e\fR and \fIt1\fR.  The normal purpose for this 
is to smooth the transition from zero values to unaltered 
data.  This is important, for example, to avoid strong step
offsets.
.LP
The \fIreftype\fR arguement is similar to the concept in
a BasicTimeSeries(3) object.  Normally reftype would
be "relative" meaning the times for t0e and t1 are relative
to the start time of the data.  If set to \fIabsolute\fR
then the mute will be assumed to be based on an absolute
time standard.
.SH CONSTRUCTORS
.LP
This is a simple object with all of it's members public.
It can thus be constucted manually.  The parameter file
based constructor, \fITopMute(Pf *pf,string tag)\fR,
is provided for convenience.  \fItag\fR is an &Arr
label for parameters to describe a top mute object. The
tag allows multiple mutes to be defined and stored by 
different names.  Here is an example:
.nf
Data_TopMute &Arr{
  TimeReferenceType relative
  Zero_End_Time 1.0
  End_Time 2.0
}
Stack_TopMute &Arr{
  TimeReferenceType relative
  Zero_End_Time 2.0
  End_Time 3.0
}
.fi
.LP
This could be used to load two different TopMute definitions
using two different tags (in this example "Data_TopMute" and
"Stack_TopMute").  
.SH PROCEDURES
.LP
The overloaded versions of the function \fIApplyTopMute\fR
apply the specified mute to the relevant object.  
Note the ensemble versions simply call the single object
versions in a loop over an iterator.
.LP
All the procedures add a gap for the zone that is zeroed at the
top of the trace.  This allows unambiguous counting of nonzero
data in stacks of muted data.
.SH EXCEPTIONS
.LP
All the procedures silently do nothing if the mute zone is
outside the range of the data.  The pf-based constructor 
will throw a metadata_error exception if there is a problem
parsing the parameter file.
.SH LIBRARY
-lseispp
.SH "SEE ALSO"
.nf
BasicTimeSeries(3), TimeSeries(3), ThreeComponentSeismogram(3),
metadata_error(3)
.fi
.SH "BUGS AND CAVEATS"
.LP
If a gap is already present at the head of a trace the gap added by
appy_top_mute functions can supercede the original due to the 
way the set STL container works.  For this reason data with front
end gaps should be truncated before calling the mute functions.
.LP
There probably should be a plain pf constructor that doesn't require
the tag, but since everything is public anyone could do this 
simply with three calls to pfget functions.
.SH AUTHOR
.nf
Gary L. Pavlis
Indiana University
pavlis@indiana.edu
.fi
.\" $Id$
