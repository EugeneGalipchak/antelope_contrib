base_section C Interface
Entries &Tbl{
	&Arr{
		command dirbase
		args char *path, char *dir, char *base
		return void
		options &Tbl{
		}
		section General Programming Utilities:Files and Directories
		description separate a path into directory and basename components
		private 0
		deprecated 0
	}
	&Arr{
		command abspath
		args char *relp, char *absp
		return int
		options &Tbl{
		}
		section General Programming Utilities:Files and Directories
		description return an absolute pathname from a relative pathname
		private 0
		deprecated 0
	}
	&Arr{
		command align_double
		args int i
		return int
		options &Tbl{
		}
		section General Programming Utilities:Byte Swapping, Casting, and Alignment
		description align an address to a multiple of double
		private 0
		deprecated 0
	}
	&Arr{
		command align_int
		args int i
		return int
		options &Tbl{
		}
		section General Programming Utilities:Byte Swapping, Casting, and Alignment
		description align an address to a multiple of int
		private 0
		deprecated 0
	}
	&Arr{
		command antelope_glob
		args char *globpattern
		return char **
		options &Tbl{
		}
		section General Programming Utilities:Files and Directories
		description c-callable glob routine
		private 0
		deprecated 0
	}
	&Arr{
		command ask
		args char *format, ... 
		return char *
		options &Tbl{
		}
		section General Programming Utilities:User Interaction
		description query user for a response
		private 0
		deprecated 0
	}
	&Arr{
		command asknoecho
		args char *format, ...
		return char *
		options &Tbl{
		}
		section General Programming Utilities:User Interaction
		description query user for a response with no echo
		private 0
		deprecated 0
	}
	&Arr{
		command askyn
		args char *format, ...
		return int
		options &Tbl{
		}
		section General Programming Utilities:User Interaction
		description query user for a yes/no response
		private 0
		deprecated 0
	}
	&Arr{
		command compress
		args char *path
		return void
		options &Tbl{
		}
		section General Programming Utilities:Files and Directories
		description compress files in background
		private 0
		deprecated 0
	}
	&Arr{
		command HD2NF
		args char *to, double *from, int n
		return void
		options &Tbl{
		}
		section General Programming Utilities:Byte Swapping, Casting, and Alignment
		description convert from host double to net float
		private 0
		deprecated 0
	}
	&Arr{
		command HF2HD
		args double *to, char *from, int n
		return void
		options &Tbl{
		}
		section General Programming Utilities:Byte Swapping, Casting, and Alignment
		description convert from host float to net double
		private 0
		deprecated 0
	}
	&Arr{
		command HI2NC
		args char *to, int *from, int n
		return void
		options &Tbl{
		}
		section General Programming Utilities:Byte Swapping, Casting, and Alignment
		description convert from host int to net character
		private 0
		deprecated 0
	}
	&Arr{
		command NC2HI
		args int *to, char *from, int n
		return void
		options &Tbl{
		}
		section General Programming Utilities:Byte Swapping, Casting, and Alignment
		description convert from net character to host int
		private 0
		deprecated 0
	}
	&Arr{
		command HI2NF
		args char *to, int *from, int n
		return void
		options &Tbl{
		}
		section General Programming Utilities:Byte Swapping, Casting, and Alignment
		description convert from host int to net float
		private 0
		deprecated 0
	}
	&Arr{
		command NF2HI
		args int *to, char *from, int n
		return void
		options &Tbl{
		}
		section General Programming Utilities:Byte Swapping, Casting, and Alignment
		description convert from net float to host int
		private 0
		deprecated 0
	}
	&Arr{
		command HI2NS
		args char *to, int *from, int n
		return void
		options &Tbl{
		}
		section General Programming Utilities:Byte Swapping, Casting, and Alignment
		description convert from host int to net short
		private 0
		deprecated 0
	}
	&Arr{
		command NS2HI
		args int *to, char *from, int n
		return void
		options &Tbl{
		}
		section General Programming Utilities:Byte Swapping, Casting, and Alignment
		description convert from net short to host int
		private 0
		deprecated 0
	}
	&Arr{
		command expand_env
		args char *s
		return char *
		options &Tbl{
		}
		section General Programming Utilities:Strings
		description substitute environment variables into string
		private 0
		deprecated 0
	}
	&Arr{
		command fdkey
		args int fd
		return int
		options &Tbl{
		}
		section General Programming Utilities:Files and Directories
		description tests file descriptor for pending input
		private 0
		deprecated 0
	}
	&Arr{
		command fdwait
		args int fd, int msec
		return int
		options &Tbl{
		}
		section General Programming Utilities:Files and Directories
		description wait up to msec milliseconds for pending input
		private 0
		deprecated 0
	}
	&Arr{
		command fill_random
		args char *packet, int nchar, int *pp
		return void
		options &Tbl{
		}
		section General Programming Utilities:Buffer testing, translation, and dumping
		description fill a buffer with random values
		private 0
		deprecated 0
	}
	&Arr{
		command set_random
		args int intcount
		return int
		options &Tbl{
		}
		section General Programming Utilities:Buffer testing, translation, and dumping
		description return the previous count of integer values in the buffer
		private 0
		deprecated 0
	}
	&Arr{
		command check_random
		args char *packet, int nchar 
		return int
		options &Tbl{
		}
		section General Programming Utilities:Buffer testing, translation, and dumping
		description returns a count of bytes which differ from expected value
		private 0
		deprecated 0
	}
	&Arr{
		command fs2cs
		args char *dst, char *src, int nmax 
		return int
		options &Tbl{
		}
		section General Programming Utilities:Strings
		description cast a fortran string to C format
		private 0
		deprecated 0
	}
	&Arr{
		command cs2fs
		args char *dst, char *src, int nmax 
		return int
		options &Tbl{
		}
		section General Programming Utilities:Strings
		description cast a C string for Fortran
		private 0
		deprecated 0
	}
	&Arr{
		command newcs
		args char *fs, int n
		return char *
		options &Tbl{
		}
		section General Programming Utilities:Strings
		description copy a fortran string into a newly allocated buffer
		private 0
		deprecated 0
	}
	&Arr{
		command strcpy_pad
		args char *dst, int dstmax, char *src, int srcmax, char pad
		return int
		options &Tbl{
		}
		section General Programming Utilities:Strings
		description copy a string, truncating or padding as necessary
		private 0
		deprecated 0
	}
	&Arr{
		command gethdir
		args char *user, char *home
		return int
		options &Tbl{
		}
		section General Programming Utilities:Files and Directories
		description get home directory of user
		private 0
		deprecated 0
	}
	&Arr{
		command new_hook
		args void (*hookfree)()
		return Hook *
		options &Tbl{
		}
		section General Programming Utilities
		description Create an opaque pointer
		private 0
		deprecated 0
	}
	&Arr{
		command free_hook
		args void **hookp
		return void
		options &Tbl{
		}
		section General Programming Utilities
		description Free an opaque pointer
		private 0
		deprecated 0
	}
	&Arr{
		command htond
		args double val
		return double
		options &Tbl{
		}
		section General Programming Utilities:Byte Swapping, Casting, and Alignment
		description convert host double to net double
		private 0
		deprecated 0
	}
	&Arr{
		command ntohd
		args double val
		return double
		options &Tbl{
		}
		section General Programming Utilities:Byte Swapping, Casting, and Alignment
		description convert net double to host double
		private 0
		deprecated 0
	}
	&Arr{
		command htondp
		args double *valp_from, double *valp_to
		return void
		options &Tbl{
		}
		section General Programming Utilities:Byte Swapping, Casting, and Alignment
		description convert pointer to host double to pointer to net double
		private 0
		deprecated 0
	}
	&Arr{
		command ntohdp
		args double *valp_from, double *valp_to
		return void
		options &Tbl{
		}
		section General Programming Utilities:Byte Swapping, Casting, and Alignment
		description convert pointer to net double to pointer to host double
		private 0
		deprecated 0
	}
	&Arr{
		command htonf
		args float val
		return float
		options &Tbl{
		}
		section General Programming Utilities:Byte Swapping, Casting, and Alignment
		description convert host float to net float
		private 0
		deprecated 0
	}
	&Arr{
		command ntohf
		args float val
		return float
		options &Tbl{
		}
		section General Programming Utilities:Byte Swapping, Casting, and Alignment
		description convert net float to host float
		private 0
		deprecated 0
	}
	&Arr{
		command htonfp
		args float *valp_from, float *valp_to
		return void
		options &Tbl{
		}
		section General Programming Utilities:Byte Swapping, Casting, and Alignment
		description convert pointer to host float to pointer to net float
		private 0
		deprecated 0
	}
	&Arr{
		command ntohfp
		args float *valp_from, float *valp_to
		return void
		options &Tbl{
		}
		section General Programming Utilities:Byte Swapping, Casting, and Alignment
		description convert pointer to net float to pointer to host float
		private 0
		deprecated 0
	}
	&Arr{
		command rev4
		args char *from, char *to, int n
		return int
		options &Tbl{
		}
		section General Programming Utilities:Byte Swapping, Casting, and Alignment
		description reverse order of 4 bytes
		private 0
		deprecated 0
	}
	&Arr{
		command rev8
		args char *from, char *to, int n
		return int
		options &Tbl{
		}
		section General Programming Utilities:Byte Swapping, Casting, and Alignment
		description reverse order of 8 bytes
		private 0
		deprecated 0
	}
	&Arr{
		command isnetorder
		args NONE
		return int
		options &Tbl{
		}
		section General Programming Utilities:Byte Swapping, Casting, and Alignment
		description Returns true if local machine uses network order
		private 0
		deprecated 0
	}
	&Arr{
		command isort
		args char *a, int n, int size, int (*compare)(), void *private
		return void
		options &Tbl{
		}
		section General Programming Utilities:Sorting and Searching
		description insertion sort implementation
		private 0
		deprecated 0
	}
	&Arr{
		command makedir
		args char *dir
		return int
		options &Tbl{
		}
		section General Programming Utilities:Files and Directories
		description ensure that a directory exists
		private 0
		deprecated 0
	}
	&Arr{
		command hexdump
		args FILE *file, void *memory, int l
		return void
		options &Tbl{
		}
		section General Programming Utilities:Buffer testing, translation, and dumping
		description Write a hex and ascii dump of a memory buffer
		private 0
		deprecated 0
	}
	&Arr{
		command Hexdump
		args FILE *file, int base, void *memory, int l
		return void
		options &Tbl{
		}
		section General Programming Utilities:Buffer testing, translation, and dumping
		description hex dump a memory buffer, with base added
		private 0
		deprecated 0
	}
	&Arr{
		command asciidump
		args FILE *file, char *memory, int l
		return void
		options &Tbl{
		}
		section General Programming Utilities:Buffer testing, translation, and dumping
		description write ascii dump of a buffer, with escaped non-printing chars
		private 0
		deprecated 0
	}
	&Arr{
		command printable
		args char *memory, int l
		return int
		options &Tbl{
		}
		section General Programming Utilities:Buffer testing, translation, and dumping
		description tests bytes to see if they're printable
		private 0
		deprecated 0
	}
	&Arr{
		command printable_string
		args char *buf, int n, char *memory, int l
		return void
		options &Tbl{
		}
		section General Programming Utilities:Buffer testing, translation, and dumping
		description copies bytes from memory into ascii-printable form
		private 0
		deprecated 0
	}
	&Arr{
		command hex2int
		args char c
		return int
		options &Tbl{
		}
		section General Programming Utilities:Buffer testing, translation, and dumping
		description returns the integer value of a hexadecimal character
		private 0
		deprecated 0
	}
	&Arr{
		command read_asciidump
		args FILE *file, char *memory, int l  
		return void
		options &Tbl{
		}
		section General Programming Utilities:Buffer testing, translation, and dumping
		description read an ascii dump back into memory
		private 0
		deprecated 0
	}
	&Arr{
		command read_hexdump
		args FILE *file, char *memory, int l
		return void
		options &Tbl{
		}
		section General Programming Utilities:Buffer testing, translation, and dumping
		description read a hex dump back into memory
		private 0
		deprecated 0
	}
	&Arr{
		command mapfile
		args char *filename, Arr **maparr, char **mmap_datap
		return int
		options &Tbl{
		}
		section General Programming Utilities:Files and Directories
		description map a file into memory if necessary
		private 0
		deprecated 0
	}
	&Arr{
		command unmapfile
		args char *filename, Arr **maparr
		return int
		options &Tbl{
		}
		section General Programming Utilities:Files and Directories
		description unmap the specified filename from memory
		private 0
		deprecated 0
	}
	&Arr{
		command unmaparr
		args Arr **maparr 
		return int
		options &Tbl{
		}
		section General Programming Utilities:Files and Directories
		description unmap all mapped files
		private 0
		deprecated 0
	}
	&Arr{
		command nomem
		args char *memory, int n
		return int
		options &Tbl{
		}
		section General Programming Utilities:Buffer testing, translation, and dumping
		description test memory address for validity in process
		private 0
		deprecated 0
	}
	&Arr{
		command patsub
		args char *old, struct re_pattern_buffer *pattern_buffer, char *substitution, char *new
		return int
		options &Tbl{
		}
		section General Programming Utilities:Strings
		description string substitution
		private 0
		deprecated 0
	}
	&Arr{
		command quicksort
		args char *a, int n, int size, int (*compare)(), void *private
		return void
		options &Tbl{
		}
		section General Programming Utilities:Sorting and Searching
		description quick sort implementation
		private 0
		deprecated 0
	}
	&Arr{
		command runcmd
		args char *argv[], char **result
		return int
		options &Tbl{
		}
		section General Programming Utilities
		description execute a command, returning a result and the exit code
		private 0
		deprecated 0
	}
	&Arr{
		command clr_fl
		args int fd, int flags
		return int
		options &Tbl{
		}
		section General Programming Utilities:Files and Directories
		description clear file status flags
		private 0
		deprecated 0
	}
	&Arr{
		command set_fl
		args int fd, int flags
		return int
		options &Tbl{
		}
		section General Programming Utilities:Files and Directories
		description set file status flags
		private 0
		deprecated 0
	}
	&Arr{
		command shellsort
		args char *a, int n, int size, int (*compare)(), void *private
		return void
		options &Tbl{
		}
		section General Programming Utilities:Sorting and Searching
		description shell sort implementation
		private 0
		deprecated 0
	}
	&Arr{
		command zopen
		args char *filename, char *permissions
		return FILE *
		options &Tbl{
		}
		section General Programming Utilities:Files and Directories
		description fopen a compressed or uncompressed file
		private 0
		deprecated 0
	}
	&Arr{
		command gz_open
		args char *filename, char *permissions
		return FILE *
		options &Tbl{
		}
		section General Programming Utilities:Files and Directories
		description alternate interface to zopen
		private 0
		deprecated 0
	}
	&Arr{
		command gz_cat
		args char *filename, char *permissions
		return FILE *
		options &Tbl{
		}
		section General Programming Utilities:Files and Directories
		description returns a FILE open to the output of zcat
		private 0
		deprecated 0
	}
	&Arr{
		command xlatname
		args char *name, Xlat *xlat, int nxlat
		return int
		options &Tbl{
		}
		section General Programming Utilities
		description lookup a name in a static translation table
		private 0
		deprecated 0
	}
	&Arr{
		command xlatnum
		args int num, Xlat *xlat, int nxlat
		return char *
		options &Tbl{
		}
		section General Programming Utilities
		description look up a number in a static translation table
		private 0
		deprecated 0
	}
	&Arr{
		command yesno
		args char *s
		return int
		options &Tbl{
		}
		section General Programming Utilities:User Interaction
		description check string for various ways of meaning yes or no
		private 0
		deprecated 0
	}
	&Arr{
		command signal_bysig
		args int sig
		return Signal_info *
		options &Tbl{
		}
		section General Programming Utilities
		description translate a signal code into name and description
		private 0
		deprecated 0
	}
	&Arr{
		command signal_byname
		args char *name
		return Signal_info *
		options &Tbl{
		}
		section General Programming Utilities
		description translate a signal name into description
		private 0
		deprecated 0
	}
	&Arr{
		command ssearch
		args char *key, int keysize, char *index, int nkeys, int unique, int (*compare)(), void *private, int *ns, int *ne
		return int
		options &Tbl{
		}
		section General Programming Utilities:Sorting and Searching
		description binary search of index
		private 0
		deprecated 0
	}
	&Arr{
		command blank
		args char *s
		return int
		options &Tbl{
		}
		section General Programming Utilities:Strings
		description return non-zero if string is entirely blank characters
		private 0
		deprecated 0
	}
	&Arr{
		command whitespace
		args char *s
		return int
		options &Tbl{
		}
		section General Programming Utilities:Strings
		description returns non-zero if string is entirely whitespace
		private 0
		deprecated 0
	}
	&Arr{
		command split
		args char *string, char c
		return Tbl *
		options &Tbl{
		}
		section General Programming Utilities:Strings
		description split a string into component pieces
		private 0
		deprecated 0
	}
	&Arr{
		command sncopy
		args char *dest, char *source, int n
		return void
		options &Tbl{
		}
		section General Programming Utilities:Strings
		description copy a string with max n characters, padding if necessary
		private 0
		deprecated 0
	}
	&Arr{
		command szcopy
		args char *dest, char *source, int n 
		return void
		options &Tbl{
		}
		section General Programming Utilities:Strings
		description copy exacly n characters, then append null
		private 0
		deprecated 0
	}
	&Arr{
		command copystrip
		args char *dest, char *source, int n 
		return void
		options &Tbl{
		}
		section General Programming Utilities:Strings
		description copy a string, stripping leading and trailing blanks
		private 0
		deprecated 0
	}
	&Arr{
		command wait_for_time
		args double time, int verbose
		return void
		options &Tbl{
		}
		section General Programming Utilities
		description sleep until a specified epoch time
		private 0
		deprecated 0
	}
	&Arr{
		command swap2
		args unsigned char *from, unsigned char *to, int n
		return void
		options &Tbl{
		}
		section General Programming Utilities:Byte Swapping, Casting, and Alignment
		description swap two bytes
		private 0
		deprecated 0
	}
	&Arr{
		command swap4
		args unsigned char *from, unsigned char *to, int n
		return void
		options &Tbl{
		}
		section General Programming Utilities:Byte Swapping, Casting, and Alignment
		description swap four bytes
		private 0
		deprecated 0
	}
	&Arr{
		command swap8
		args unsigned char *from, unsigned char *to, int n
		return void
		options &Tbl{
		}
		section General Programming Utilities:Byte Swapping, Casting, and Alignment
		description swap eight bytes
		private 0
		deprecated 0
	}
}
