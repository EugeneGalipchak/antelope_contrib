<chapter Perl Interface>
<info>
use Datascope ; 
</info>
<man>
% man perldb
</man>

<subsection Opening a database>
<function>

dbopen (database, permissions)
    returns a database pointer to the database

dbopen_database (database, permissions)
    open database (or database.table or "-" for view from stdin), returning database pointer

dbopen_table (database.table, permissions)
    open database.table (or "-" for view from stdin), returning database pointer for a table

dbcreate(filename, schema, dbpath, desc, detail)
    create database descriptor file filename with specified schema, dbpath, desc and detail

dbtmp(schema)
    returns a database pointer to a temporary, transient database with specified schema


dbclose (@db)
    closes the database, freeing all resources used by it

dbfree (@db)
    frees resources for a table or a database


dblookup (@db, database, table, field, row)
    returns a database pointer for the specified database, table, field, and row.

<subsection Manipulating fields and records>
dbadd (@db [, record])
    add the new record to the table in @db. If record is not specified, add the scratch record. returns the new row number, or an error code < 0.

dbaddnull (@db)
    add a new null row to a table

dbaddv (@db, field_name, value, [field_name, value, ...])
    add a new row with the specified values to the database


dbmark (@db)
    set the specified rows to all null values

dbdelete (@db)
    delete a row from the database

dbcrunch (@db)
    delete all marked (null) rows from the specified table

dbtruncate (@db, n)
    truncate a table to the specified number of rows

dbdestroy (@db)
    delete all tables and the descriptor file for the specified database, but not external files


dbget (@db [, 0])
    returns [or copies to the scratch rows] the specified field or rows 

dbgetv (@db, field_name [, field_name, ...])
    returns the values of the specified fields for a particular rows


dbput (@db [, string])
    copies from string (or from the scratch rows) to the specified field or rows

dbputv (@db, field_name, value [, field_name, value, ...])
    save the specified values into the specified fields for a particular row


dbadd_remark (@db, remark)
    add a comment in the remark table for the specified table/rows

dbget_remark (@db)
    get any comment from the remark table for the specified table/rows


<subsection Forming views>
dbgroup (@db, key [, key, ...])
    group the input table according to the specified keys

dbjoin (@db1, @db2 [, join-keys])
    return a join of the two tables, using the join-keys if specified

dbmatches (@db1, @db2, hookname [, join-keys])
    returns a list of the rows in db2 which match the rows specified by db1

dbnojoin (db1, db2 [, join-keys])
    returns a view of all rows in the first table which don't join to the second.

dbprocess (@db, commands)
    returns a new view which is the result of applying the dbprocess
    commands to the input view; possible operations are: dbopen,
    dbjoin, dbgroup, dbleftjoin, dbnojoin, dbselect, dbseparate,
    dbsever, dbsort, dbsubset, dbtheta, dbungroup

dbseparate (@db, table)
    returns a new view which consists of all the rows of the
    specified table which participate in the joined view @db

dbsever (@db, table)
    returns a new view which consists of all the unique rows left
    after removing the specified table from a joined view @db

dbsort (@db [, -u][, -r][, key, key..])
    sort the input table according to the specified keys, uniquely if -u, 
    in reverse order if -r 

dbsubset (@db, expression)
    returns a new view which is the set of all rows which satisfy the expression

dbtheta (@db1, @db2, [expression])
    returns new join view with all combinations of rows from the two tables which 
    satisfy expression, or all combinations if no expression is specified

dbunjoin (@db, database)
    create a new database, containing all the records referenced in the input view @db


dbsave_view (@db, name)
    save the view into a file named database.name

<subsection Miscellaneous Datascope Functions>
dbquery (@db, code)
    query the database for information, e.g. dbquery(@db, "dbRECORD_COUNT"). see 
    Datascope Constants for valid query codes.

dbex_eval (@db, expression)
    evaluate expression for a particular row

dbcompile (@db, string)
    add new attributes or relations to the schema directly from the perl script

dbextfile (@db [, base-table])
    return the filename for an external file for a particular row in a view

dbnextid (@db, id_name)
    gets the next free id value for the specified database and id_name

dbstrtype (@db, string)
    classifies string, returning "strREAL", "strINTEGER", "strNULL", "strSTRING", 
    "strTIME", "strFIELD", or "strUNKNOWN"

dbfind (@db, string [, first [,reverse]])
    find first row matching expression, starting with first; if reverse, search backwards 

dbinvalid()
    return a database pointer of dbINVALID

<subsection Error handling>
elog_init ($0, @ARGV)
    initialize the elog message routines

elog_log (msg)
    save a message on the elog message log

elog_debug (msg)
    send a debug message to the elog facility

elog_notify (msg)
    send a notify message to the elog facility

elog_alert (msg)
    send an alert message to the elog facility

elog_complain (msg)
    send an error message to the elog message facility 

elog_die (msg)
    send a message to the elog message facility and die

elog_string (n)
    return error log starting with message n

elog_clear ()
    clear the elog message log


elog_mark ()
    return the count of messages currently held in the error log

elog_flush (deliver, first)
    eliminate log messages after first, printing them if deliver is set

<subsection Parameter files>
pfget (pfname, key)
    returns the value for the key from the parameter file pfname

pfget_boolean (pfname, key)
    returns 0 or 1 depending on the value of key in the parameter file pfname

pfupdate (pfname)
    checks and rereads a parameter file if one of the components along PFPATH has changed

pffiles (pfname [, all]) 
    returns a list of filenames which make up the corresponding parameter file object.
    If all is specified, returns all filenames inspected, including non-existent files.

pf2string(pfname)
    returns a string representation of the parameter file object pfname

pfcompile (string, pfname)
  convert the specified string into a parameter file object name pfname.
 
pfput (key, value, pfname)
    save the specified value into the pf object  with  name
    pfname under the specified key.  The value is converted
    to a string if it's a scalar; when it's a reference  to
    a  perl array or hash, the entire perl array or hash is
    stored in the pf object.

pfwrite (filename, pfname)
    write out pf object pfname to filename

pfrequire(pfname, atime)
    require pf_revision_code from last file pfname is later than atime.


<subsection Special functions>
ask (string)
    pose a question string at the controlling tty, and return the response

askyn (string)
    pose a yes/no question string at the controlling tty, return 
    0=false, 1=true

askynaq (string)
    pose a yes/no question string at the controlling tty, return 
    0=false, 1=true, 2=all, 3=quit

yesno (s) 
    returns -1 if $s =~ /yes|ok|y|true|1|on|t/, 0 if $s =~ /no|n|false|0|off|f/, 1 otherwise

datafile (env, file)
    find the specified file by looking first at the environment variable, then along the path

datapath (env, dir, file, suffix)
    find the specified file by looking first at the environment variable, then along the path

makedir(d)
    make the complete directory path d (like "mkdir -p") 

abspath (a)
    returns the absolute path to the specified file a.

relpath (d, t)
    returns a relative path from directory f to t 

cleanpath (p [, nolinks])
    normalize the input path p, removing extra "..", "//", and
    "./" strings. With a second argument,
    resolve any symbolic links along the path.

concatpaths (a,b)
    concatenate the two paths a and b properly, adding a
    slash if necessary.

parsepath (a)
    returns directory, file basename, and suffix for path a.

close_descriptors()
    close all file descriptors after stderr; useful after fork

strsignal (code)
    return name for signal, given the integer code

is_nfs (path)
    returns true if path is on an nfs-mounted filesystem.

limit (resource, [limit2set])
    return the current resource limit, or set a new resource limit; possible
    resources are:
<example>
cputime      filesize     datasize      
stacksize    coredumpsize vmemoryuse    
</example>

grn (lat, lon)
    return the geographic region number

grname (lat, lon)
    return the geopgraphic region name

srn (lat, lon)
    return the seismic region number

srname (lat, lon)
    return the seismic region name

<subsection Simple Ring Buffers>

openring(filename, id, depth, flags) ;
    open or create new simple ring buffer in filename with 
    (up to) 64 byte id field, maximum depth entries. if flags & 1 is
    set, open read-only, no locking; otherwise ring buffer must be
    on local filesystem. returns handle to ring buffer.

newring(filename, id, depth, flags) ;
    create new simple ring buffer like openring, overwriting any old ring buffer

closering(rb)
    close specified ring buffer
    
pushring(rb, time, value)
    add time/value pair to ring (in time order)

getring(rb, i)
    return the i'th time/value pair from the ring; 
    0 is the most recent pair

avgring(rb, tdelta)
    return the average value in the ring rb for the latest
    tdelta seconds in the ring

minring(rb, tdelta)
    return the min value and the corresponding index in the ring 
    rb for the latest tdelta seconds in the ring

maxring(rb, tdelta)
    return the max value and the corresponding index in the ring 
    rb for the latest tdelta seconds in the ring
    
countring(rb)
    returns the number of time/value pairs in the ring

findring(rb, value, tdelta)
     findring searches the ring buffer rb over the specified time
     period tdelta for the specific value.

<subsection Time conversion>

now()
    returns current time to (usually) microseconds accuracy

epoch2str (epoch, fmt [, timezone])
    returns the epoch time formatted according to the fmt string and converted to timezone

str2epoch (string)
    returns the epoch time corresponding to the free-form input time/date


strtime (epoch)
    returns epoch time formatted like "4/23/2001  15:35:15.000"

strydtime (epoch)
    returns epoch time formattted like "4/23/2001 (113) 15:35:15.000"

strdate (epoch)
    convert epoch time to a date, eg "4/23/2001"

strtdelta (dt)
    convert the time-difference dt (in seconds) to a string, eg "30:35 minutes"


epoch (yearday)
    returns the epoch time corresponding to the integer yearday

yearday (epoch)
    returns the yearday corresponding to an epoch time

<chapter Perl Orb Access>
<info>
use orb; 
</info>
<man>
% man perlorb
</man>
<function>

orbopen(name, perm)
    open the specified orbserver name with permission perm ("r", "w", "r&", or "w&"), returning the open file descriptor orb

orbclose(orb)
    close an orbserver connection

orbselect(orb, re)
    select packets with sourcenames which match the regular expression re.

orbreject(orb, re)
    reject packets with sourcenames which match the regular expression re.

orbseek(orb, which)
    position the orb connection packet pointer according to which;
    which may be an explicit pktid, or "ORBCURRENT", "ORBPREV",
    "ORBNEXT", "ORBNEXT_WAIT", "ORBOLDEST", or "ORBNEWEST".

orbposition(orb, from)
    position the orb connection packet pointer according to
    from; from may be "newest", "oldest", or any (UTC) time string
    recognized by str2epoch(3).

orbtell(orb)
    return the current orb connection position (pktid).

orbafter(orb, time)
    position the orb connection packet pointer to the first
    packet after the specified time. Time must be a UTC
    epoch time in seconds, not a string.

orbping(orb)
    test if the specified orb responds; returns a version number.

orbwait(orb, re, mintime, timeout)
    wait for all reading clients of orb with a program
    name which matches the regular expression re to have
    read packets younger than mintime. If timeout is
    non-zero, then orbwait returns with an error code
    if the timeout expires before the specified program
    catches up.

($pktid, $srcname, $pkttime, $pkt, $nbytes) = orbget(orb, which)
    get a single packet corresponding to which; this can be an
    explicit pktid, or "ORBCURRENT", "ORBPREV", "ORBNEXT",
    "ORBNEXT_WAIT", "ORBOLDEST", or "ORBNEWEST". 

($pktid, $srcname, $pkttime, $pkt, $nbytes) = orbreap(orb)
    get the next packet from the orb; this is the fastest,
    most efficient way of reading packets.

($pktid, $srcname, $pkttime, $pkt, $nbytes) = orbreap_timeout(orb, maxseconds)
    get the next packet from the orb, but return early if
    no packets have appeared in maxseconds. In this case,
    the returned pktid will be undef.

orbput(orb, srcname, pkttime, pkt, nbytes)
    put the specified packet onto the orb.

orbstat(orb)
    Get the standard status values from the orb; this
    returns an object with the following methods:
<example>
address     closes      connections 
errors      host        maxdata     
maxpkts     maxsrc      messages    
nclients    nsources    opens       
orb_start   pid         port        
rejected    started     version     
when        who         
</example>

($when, @clients) = orbclients(orb)
    $when is a scalar; @clients is a list of client
    objects, one object per client. Each object has the
    following methods:
<example>
address     and         bytes       
errors      fd          host        
lastpkt     lastrequest mymessages  
nreads      nreject     nrequests   
nselect     nwrites     packets     
perm.       pid         pktid       
port        priority    read        
reject      select      started     
thread      what        who         
</example>

orbsources(orb)
    returns ($when, @sources). $when is a scalar; @sources is a list of source
    objects,  one  object  per source.  Each object has the
    following methods:
<example>
active       and          nbytes       
npkts        slatest      slatest_time 
soldest      soldest_time srcname      
</example>

showPkt(srcname, pkttime, pkt, nbytes, mode)
    print out packet summary, depending on mode:
<example>
1	hex dump
2	unstuff, print all data samples
3	unstuff, print no data samples
4	just show the header information
</example>

unstuffPkt(srcname, pkttime, pkt, nbytes)
    unstuffPkt unstuffs the input packet, returning a packet kind and a packet object.
    the result code indicates what kind of packet was unpacked:
<example>
kind    kind of packet
----    --------------
Pkt_wf  waveform packet
Pkt_st  status packet
Pkt_db  database row
Pkt_pf  parameter file
Pkt_cn  control messages
Pkt_rw  binary data
Pkt_ch  character string
Pkt_tp  test packet
</example>
    The packet object has the following methods which return various
    values from the c Packet structure: parts, time, PacketType,
    nchannels, channels(i), pf, string, db, dfile,
    and version.

    The parts method returns (net, sta, chan, loc, suffix, subcode)

    The PacketType method returns the packet kind (also
    returned by unstuffPkt) and the corresponding description.

    The channels method takes an index (0..n-1) argument 
    and returns a channel object with its own methods:
<example>
calib    calper   chan     cuser1   
cuser2   data     duser1   duser2   
iuser1   iuser2   iuser3   loc      
net      nsamp    samprate segtype  
sta      time     
</example>
    The data method returns all the waveform data in a list of integers.

split_srcname(srcname)
    returns net, sta, chan, loc, suffix, and subcode corresponding to srcname

<chapter Perl System Information >
<info>
use sysinfo ; 
</info>
<man>
% man perlsysinfo
</man>
<function>

my_ip()
    returns ip address (eg, 207.174.76.135)

my_os()
    return os name (eg, SunOS)

my_hardware()
    returns hardware string (eg, sun4u)

my_hostname()
    returns hostname (eg, ament)

ip(dot-notation)
    returns integer corresponding to dot-notation

ip2name(ip)
    looks up hostname for ip address

name2ip(hostname)
    looks up ip address for hostname

nomem(address,n)
    returns first bad address if no memory in range address to address + n 

%sysmem = sysmem()
     returns physical memory, total swap space, and swap used

%loadavg = sysloadavg()
     returns nproc, avg1m, avg5m, and avg15m: number of processes and 15, 5 and 1 minute load averages 

@mounted = sysmounted() 
    returns list of mounted partitions; each element has mount point, filesystem type,
    and remote host and directory 

pidcmdline(pid)
    returns command line for specified pid

pidpwd(pid)
    returns working directory for process pid

pidexecname(pid)
    returns executable name for specified pid

%info = pidinfo(pid)
    returns usage in percent, parent pid, user id, size in kilobytes,
    resident set size in kilobytes, run state, epoch start time, total cpu time,
    and total children cputime for a process pid

   
%statvfs = statvfs (path)
    returns Mb_total, Mb_avail, inodes_avail, inodes_used on disk
    containing path, % disk and inodes used, and a unique id

($ncpu, $idle, $user, $kernel, $iowait, $swap, @othercpus) = syscpu() ;
    returns number of cpus, and idle, user, kernel, iowait and swap time 
    for each cpu.


 
