<chapter Perl Interface>
<info>
use Datascope ; 
</info>
<man>
% man perldb
</man>

<subsection Opening a database>
<function>

dbopen ( database, permissions )
    returns a database pointer to the database

dbopen_database ( database, permissions )
    open database (or database.table or "-" for view from stdin), returning database pointer

dbopen_table ( database.table, permissions )
    open database.table (or "-" for view from stdin), returning database pointer for a table


dbclose ( @db )
    closes the database, freeing all resources used by it

dbfree ( @db )
    frees resources for a table or a database


dblookup ( @db, database, table, field, row )
    returns a database pointer for the specified database, table, field, and row.

dbfind ( @db, expression [, first [,reverse]])
    find first row matching expression, starting with first; if reverse, search backwards 

<subsection Manipulating fields and records>
dbadd ( @db [, record] )
    add the new record to the table in @db. If record is not specified, add the scratch record. returns the new row number, or an error code < 0.

dbaddnull ( @db )
    add a new null row to a table

dbaddv ( @db, field_name, value, [field_name, value, ...] )
    add a new row with the specified values to the database


dbmark ( @db )
    set the specified rows to all null values

dbdelete ( @db )
    delete a row from the database

dbcrunch ( @db )
    delete all marked (null) rows from the specified table

dbtruncate ( @db, n )
    truncate a table to the specified number of rows

dbdestroy ( @db )
    delete all tables and the descriptor file for the specified database, but not external files


dbget ( @db [, 0] )
    returns [or copies to the scratch rows] the specified field or rows 

dbgetv ( @db, field_name [, field_name, ...] )
    returns the values of the specified fields for a particular rows


dbput ( @db [, string] )
    copies from string (or from the scratch rows) to the specified field or rows

dbputv ( @db, field_name, value [, field_name, value, ...] )
    save the specified values into the specified fields for a particular row


dbadd_remark ( @db, remark )
    add a comment in the remark table for the specified table/rows

dbget_remark ( @db )
    get any comment from the remark table for the specified table/rows


<subsection Forming views>
dbgroup ( @db, key [, key, ...] )
    group the input table according to the specified keys

dbjoin ( @db1, @db2 [, join-keys] )
    return a join of the two tables, using the join-keys if specified

dbmatches ( @db1, @db2, hookname [, join-keys] )
    returns a list of the rows in db2 which match the rows specified by db1

dbnojoin ( db1, db2 [, join-keys] )
    returns a view of all rows in the first table which don't join to the second.

dbprocess ( @db, commands )
    returns a new view which is the result of applying the dbprocess
    commands to the input view; possible operations are: dbopen,
    dbjoin, dbgroup, dbleftjoin, dbnojoin, dbselect, dbseparate,
    dbsever, dbsort, dbsubset, dbtheta, dbungroup

dbsort ( @db [, -u][, -r][, key, key..] )
    sort the input table according to the specified keys, uniquely if -u, 
    in reverse order if -r 

dbsubset ( @db, expression )
    returns a new view which is the set of all rows which satisfy the expression

dbtheta ( @db1, @db2, [expression] )
    returns new join view with all combinations of rows from the two tables which 
    satisfy expression, or all combinations if no expression is specified

dbunjoin ( @db, database )
    create a new database, containing all the records referenced in the input view @db


dbsave_view ( @db, name )
    save the view into a file named database.name

<subsection Miscellaneous Datascope Functions>
dbquery ( @db, code )
    query the database for information, e.g. dbquery(@db, "dbRECORD_COUNT").  see 
    Datascope Constants for valid query codes.

dbex_eval ( @db, expression )
    evaluate expression for a particular row

dbcompile ( @db, string )
    add new attributes or relations to the schema directly from the perl script

dbextfile ( @db [, base-table] )
    return the filename for an external file for a particular row in a view

dbnextid ( @db, id_name )
    gets the next free id value for the specified database and id_name

<subsection Error handling>
elog_init ( $0, @ARGV )
    initialize the elog message routines

elog_log ( msg )
    save a message on the elog message log

elog_debug ( msg )
    send a debug message to the elog facility

elog_notify ( msg )
    send a notify message to the elog facility

elog_alert ( msg )
    send a alert message to the elog facility

elog_complain ( msg )
    send an error message to the elog message facility 

elog_die ( msg )
    send a message to the elog message facility and die


elog_clear ( )
    clear the elog message log


elog_mark ( )
    return the count of messages currently held in the error log

elog_flush ( deliver, first )
    eliminate log messages after first, printing them if deliver is set

<subsection Parameter files>
pfget ( pfname, key )
    extracts the value for the key from the parameter file pfname

pfupdate ( pfname )
    checks and rereads a parameter file if one of the components along PFPATH has changed

<subsection Special functions>
ask ( string )
    pose a question string at the controlling tty, and return the response

askyn ( string )
    pose a yes/no question string at the controlling tty, and return 
    0=false, 1=true

askynaq ( string )
    pose a yes/no question string at the controlling tty, and return 
    0=false, 1=true, 2=all, 3=quit

datafile ( env, file )
    find the specified file by looking at first the environment variable, and then along the path

datapath ( env, dir, file, suffix )
    find the specified file by looking at first the environment variable, and then along the path

makedir(d)
    make the complete directory path d (like "mkdir -p") 

abspath (a)
    returns the absolute path to the specified file a.

relpath (f, t)
    returns a relative path from f to t. f must be a directory.

cleanpath (p [, nolinks])
    normalize the input path p, removing extra "..", "//", and
    "./"  strings.   With a  second  argument,
    resolve any symbolic links along the path.

concatpaths (a,b)
    concatenate the two paths a and b  properly,  adding  a
    slash if necessary.

parsepath (a)
    returns directory, file basename, and suffix for path a.


grn ( lat, lon )
    return the geographic region number

grname ( lat, lon )
    return the geopgraphic region name

srn ( lat, lon )
    return the seismic region number

srname ( lat, lon )
    return the seismic region name


limit ( resource, [limit2set] )
    return the current resource limit, or set a new resource limit; possible
    resources are:
<example>
cputime      filesize     datasize      
stacksize    coredumpsize vmemoryuse    
</example>

<subsection Time conversion>

epoch2str ( epoch, fmt [, timezone] )
    returns the epoch time formatted according to the fmt string and converted to timezone

str2epoch ( string )
    returns the epoch time corresponding to the free-form input time/date


strtime ( epoch )
    returns epoch time formatted like "4/23/2001  15:35:15.000"

strydtime ( epoch )
    returns epoch time formattted like "4/23/2001 (113) 15:35:15.000"

strdate ( epoch )
    convert epoch time to a date, eg "4/23/2001"

strtdelta ( dt )
    convert the time-difference dt (in seconds) to a string, eg "30:35 minutes"


epoch ( yearday )
    returns the epoch time corresponding to the integer yearday

yearday ( epoch )
    returns the yearday corresponding to an epoch time

<chapter Perl Orb Access>
<info>
use orb; 
</info>
<man>
% man perlorb
</man>
<function>

orbopen(name, perm)
    open the specified orbserver name with permission perm  ("r", "w", "r&", or "w&"), returning the open file descriptor orb

orbclose(orb)
    close an orbserver connection

orbselect(orb, re)
    select packets with sourcenames which match the regular expression re.   

orbreject(orb, re)
    reject  packets  with sourcenames which match the regular expression re.

orbseek(orb, which)
    position the orb connection packet pointer according to which;
    which may be an explicit pktid, or "ORBCURRENT", "ORBPREV",
    "ORBNEXT", "ORBNEXT_WAIT", "ORBOLDEST", or "ORBNEWEST".

orbposition(orb, from)
    position the orb connection packet pointer according to
    from; from may be "newest", "oldest", or any (UTC) time string
    recognized by str2epoch(3).

orbtell(orb)
    return the current orb connection position (pktid).

orbafter(orb, time)
    position the orb connection packet pointer to the first
    packet  after  the  specified time.  Time must be a UTC
    epoch time in seconds, not a string.

orbping(orb)
    test if the specified orb responds; returns  a  version number.

orbwait(orb, re, mintime, timeout)
    wait  for all reading clients of  orb  with  a  program
    name  which  matches  the regular expression re to have
    read packets younger  than  mintime.   If   timeout  is
    non-zero,  then  orbwait returns  with  an  error  code
    if  the timeout  expires before the  specified  program
    catch up.

orbget(orb, which)
    get a single packet corresponding to which; this be  an
    explicit  pktid, or "ORBCURRENT", "ORBPREV", "ORBNEXT",
    "ORBNEXT_WAIT", "ORBOLDEST", or "ORBNEWEST". returns
    ($pktid, $srcname, $time, $packet, $nbytes) 

orbreap(orb)
    get the next packet from the orb; this is the  fastest,
    most efficient way of reading packets.  
    returns ($pktid, $srcname, $time, $packet, $nbytes) 

orbreap_timeout(orb, maxseconds)
    get the next packet from the orb, but return  early  if
    no  packets have appeared in maxseconds.  In this case,
    the returned pktid will be undef.
    returns ($pktid, $srcname, $time, $packet, $nbytes) 

orbput(orb, srcname, time, packet, nbytes)
    put the specified packet onto the orb.

orbstat(orb)
    Get the standard  status  values  from  the  orb;  this
    returns  an object with the following methods:
<example>
address     closes      connections 
errors      host        maxdata     
maxpkts     maxsrc      messages    
nclients    nsources    opens       
orb_start   pid         port        
rejected    started     version     
when        who         
</example>

orbclients(orb)
          returns ($when, @sources). $when is a scalar; @sources is a list of client
          objects,  one  object  per client.  Each object has the
          following methods:  
<example>
address     and         bytes       
errors      fd          host        
lastpkt     lastrequest mymessages  
nreads      nreject     nrequests   
nselect     nwrites     packets     
perm.       pid         pktid       
port        priority    read        
reject      select      started     
thread      what        who         
</example>

orbsources(orb)
          returns ($when, @sources). $when is a scalar; @sources is a list of source
          objects,  one  object  per source.  Each object has the
          following methods:  
<example>
active       and          nbytes       
npkts        slatest      slatest_time 
soldest      soldest_time srcname      
</example>

showPkt(srcname, time, packet, nbytes, mode)
    print out packet summary, depending on mode:
<example>
1	hex dump
2	unstuff, print all data samples
3	unstuff, print no data samples
4	just show the header information
</example>

unstuffPkt(srcname, time, packet, nbytes)
    unstuffPkt unstuffs  the  input packet,  returning  a  packet kind and a packet object.
    the result code  indicates  what  kind  of  packet  was unpacked:
<example>
kind    kind of packet
----    --------------
Pkt_wf  waveform packet
Pkt_st  status packet
Pkt_db  database row
Pkt_pf  parameter file
Pkt_cn  control messages
Pkt_rw  binary data
Pkt_ch  character string
Pkt_tp  test packet
</example>
    The packet object  has  the following methods which return various
    values from the c Packet structure: parts, time, PacketType,
    nchannels, channels(i), pf, string, db, dfile,
    and version.

    The parts method returns (net, sta, chan, loc, suffix, subcode)

    The PacketType method returns  the  packet  kind  (also
    returned  by unstuffPkt) and the corresponding description.  

    The channels method takes an index (0..n-1) argument 
    and returns a channel object with  its  own  methods:   
<example>
calib    calper   chan     cuser1   
cuser2   data     duser1   duser2   
iuser1   iuser2   iuser3   loc      
net      nsamp    samprate segtype  
sta      time     
</example>
    The data method returns all the waveform data in a list of integers.

<chapter Perl System Information >
<info>
use sysinfo ; 
</info>
<man>
% man perlsysinfo
</man>

<function>
%vminfo  = vminfo() ;
     returns free memory, physical memory, reserved swap and total swap space

%loadavg = loadavg() ;
     returns 15, 5 and 1 minute load averages and the number of cpus and processes

%psinfo  = psinfo($pid) ;
    returns cpu percentage, memory percentage, resident set size,
    total size, start time, execname, truncated command line, parent
    pid and total cpu time for $pid and its children.

($idle, $user, $kernel, $iowait, $swap, $dummy)  = cpu_usage() ;
     returns a list of cpu time percentages:  idle time, user time,
     kernel time, iowait and swap times.
