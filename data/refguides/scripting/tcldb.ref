<chapter Tcl/Tk Datascope and Utilities>
<example>
% man tcldb
<commands>
package require Datascope

<subsection Opening a database>
<commands>
dbopen db {r|r+}
    open database db read-only (r) or read-write(r+); returns a db pointer

dbopen_database db[.table] {r|r+}
    open database db, or optionally a specific table. The
    first argument may also be "-", allowing a view to be read from stdin.
    returns a db pointer

dbclose db
    close the database db

dbfree db
    free memory resources and file descriptors for a database view/table

dblookup db database table field row
    return a database pointer for the specified db, database, table, field, and row
    row can be "dbALL", "dbNULL" or "dbSCRATCH", or a value corresponding to field; then
    the first row number where field == value is returned

dbtruncate db n
    truncate the specified table to the first n rows

<subsection Manipulating Fields and Records>
dbadd db row
    add the specified row to a table, return row number

dbaddnull db
    add a null row to the table, return row number

dbaddv db table field value [field value ...]
    add new row with specified field values, return row number

dbmark db
    set the specified row to all null values

dbcrunch db
    delete marked (all null) rows from the table

dbdelete db
    delete a row


dbget db
    get a table, row, or field from a table

dbgetv db table row field [field ...]
    return a list with the specified values of the specified fields


dbput db value
    put the specified value into the specified location.

dbputv db table row field value [field value ...]
    save the specified values into the specified fields.

<subsection Forming Views>
dbgroup db type field [field ..]
    group the (sorted) input table by the specified fields

dbungroup db
    returns a view containing all the rows which the grouped view references.

dbjoin db1 db2 [keys]
    join the two tables (using the specified join keys)

dbjoin_tables db
    returns a list of tables for which some set of join keys with db can be inferred

dbjoin_keys db table
    returns the inferred join keys between db and table 

dbnojoin db1 db2 [keys]
    returns view of all rows in db1 which do not join with table db2

dbmatches db1 db2 hook [keys ...]
    returns a list of rows in the table specified by db2 which match (join with) the row specified by db1

dbprocess db [command ...]
    construct a view as series of standard operations

dbsever db table
    returns a new view which removes the specified table from the joined view db  

dbseparate db table
    returns a new view containing only the rows from table which participate in the joined view db

dbsort [-r] [-u] db [fields ..]
    sort a table by fields, or the primary key if no fields are specified
<options>
-r	reverse the sense of the sort
-u	eliminate all rows in the output view with duplicate field values
</options>

dbsubset db expression
    returns a db pointer to the rows from the specified table which satisfy expression

dbtheta db1 db2 [ expression ]
    theta join the specified tables db1 and db2


dbselect [-b] [-F separator] [-t] filename db [field ...]
    write selected fields from the input view to the specified filename
<options>
-b	strip blanks from both ends of each field
-t	convert times to readable times
</options>


dbsave_view [-f] db name
    save the specified view as a table in the same database with the specified name
<options>
-f	Allow overwriting files of the same name
</options>

db2pipe db file [row# ...]
    send rows from a database view out a unix pipe

dbunjoin db output
    unjoin the specified table, writing new tables into a new database named output

<subsection Miscellaneous Datascope Functions>

dbeval db expression [type]
    evaluate the specified expression, converting to the specified type

dbquery db code
    query the database for various parameters

dbcompile db string
    add attributes and relations to a database by directly compiling
    schema file fragments


dbstrtype db string
    returns type of string:  strREAL, strINTEGER, strNULL, strSTRING,
    strTIME, strEXPR, strFIELD or strUNKNOWN

dbsearch db first backwards string
    starting from first, locate the first row in db satisfying the
    given expression string, or containing the string

dbadd_remark db remark
    add the specified remark to the specified row

dbget_remark db
    get the remark associated with the specified row

dbgetr db tz i n [expr [fmt]]
    return list of values for n rows beginning at row #i for expr
    optionally formatted using fmt; tz=0 may be 1 to use epoch2str for
    times, or a timezone code (eg, US/Mountain or LOCAL)

dbinvalid
    return a db pointer with all elements dbINVALID

dbnextid db name
    get the next (integer) id for the specified name

<subsection Error Handling>
<commands>
elog_init args
    initialize the elog routines with the command name and arguments


elog_log msg
    save a message on the elog message log

elog_notify msg
    write a message other than an error message to the elog facility

elog_complain msg
    write an error message to the elog message facility for immediate output

elog_die msg
    write a message to the elog message facility and die


elog_clear
    clear the elog message log

clear_register flag
    clear the error register, optionally returning contents


elog_mark
    returns the count of messages currently held in the error log

elog_flush deliver first
    get rid of messages after #first in the error log, printing them if deliver is a boolean true

private <subsection Instrument response routines>
private eval_response resphandle freq_in_hz
    evaluate a response object at a given frequency

private free_response resphandle
    free resources for a response object

private get_response resphandle {nstages | stage_types | paz stageno}
    get information about a response object

private peterson {low|high} frequency rsptype
    compute Peterson low/high noise model

private put_response resphandle stageno param_list
    put values into a response object

private read_response filename
    read a response object

<subsection Parameter Files>
pfget pf name
    get the value for the specified name from the specified parameter file

pfgetarr variable name
    return the array corresponding to the specified name (eg, %pf#name) in the variable

pfgetlist name
    return the list corresponding to the specified name (eg, @pf#name)

pfput pf name value
    save the specified value into the parameter space

pfputarr pf name [array]
    save the specified array into the parameter space

pfputlist pf name [list]
    save the specified list into the parameter space

pfread pf
    force rereading the parameter file

pfwrite pf filename
    write the specified parameter file


<subsection Seismic Utility Functions>
carsph x y z
    convert from unit vector x y z to latitude, longitude in degrees

dbdist lat1 lon1 lat2 lon2
    return the angular distance between the specified locations. All units are degrees.

dblatlon lat lon delta azimuth
    return the latitude and longitude of the point at delta degrees in the direction azimuth from lat, lon

sphcar lat lon
    convert from latitude, longitude to unit vector x, y, z

<subsection Time conversion>
epoch yearday
    convert yearday (eg, 1999234) to epoch time

epoch2str epoch fmt
    convert epoch time to a string according to specified fmt

str2epoch string
    convert time strings from many formats to epoch time

strtime epoch
    convert epoch time to a time string like "4/23/2001  15:35:15.000"

strydtime epoch
    convert epoch time to a time string like "4/23/2001 (113) 15:35:15.000"

strdate epoch
    convert epoch time to a date, eg "4/23/2001"

strtdelta dt
    convert the time-difference dt (in seconds) to a string, eg "30:35 minutes"


yearday epoch
    convert from epoch time to yearday

<subsection Utility Functions>
makedir dir
    make the directory hierarchy dir (like "mkdir -p")

writefile filename var
    write value of variable var to filename

datafile envname file 
    returns complete path for file under $ANTELOPE/data
