<chapter Matlab Interface>
<subsection Getting Help>
<commands>
doc antelope
    launch web-browser with html documentation

helpwin antelope
    launch Matlab help tool

help antelope
    standard Matlab help

help antelope/examples
    list of example scripts using Antelope toolbox

doc COMMAND_NAME
    web-browser help on specified command

helpwin COMMAND_NAME
    Matlab help-tool help on specified command

help COMMAND_NAME
    standard Matlab help for specified command

<subsection Opening a database>
<function>
DBPTR = dbopen ( FILENAME, OPENTYPE )
    open a Datascope Database

DBPTR = dblookup ( DBPTR, DATABASE, TABLE, FIELD, RECORD )
    aim a Datascope database pointer as specified

DBPTR = dblookup_table ( DBPTR, TABLE )
    aim a Datascope database pointer at a specified table

dbclose ( DBPTR )
    close a Datascope database

<subsection Manipulating fields and records>
S = db2struct ( DBPTR [, FIELD [, FIELD, ... ]] )
    convert a database view to a Matlab structure array

RECORD_NUMBER = dbadd ( DBPTR, RECORD )
    add a record to a Datascope database

RECORD_NUMBER = dbaddnull ( DBPTR )
    add a null record to a Datascope database

dbaddv ( DBPTR, FIELD, VALUE [, FIELD, VALUE ... ] )
    add values to a Datascope database

dbcrunch ( DBPTR )
    crunch out null rows in a Datascope database table

dbdelete ( DBPTR )
    delete the specified record in a Datascope database

RECORD = dbget ( DBPTR [, 'dbSCRATCH'] )
    get a table, record, or field from a database

[VALUE, VALUE, ...] = dbgetv ( DBPTR, FIELD [, FIELD, ...] )
    get the specified values from a Datascope database

DBPTR = dbinvalid ( )
    create an invalid database pointer

dbmark ( DBPTR )
    set the specified Datascope database rows to null

dbput ( DBPTR, VALUE )
    put the specified value into a Datascope database

dbputv ( DBPTR, FIELD, VALUE [, FIELD, VALUE ... ] )
    put the specified values into a Datascope database

<subsection Forming views>
dbfree( DBPTR )
    Free resources used by a Datascope database view

DBPTR = dbjoin ( DBPTR1, DBPTR2 [, PATTERN1 [, PATTERN2]] [, 'outer'] )
    join the specified Datascope database tables

DBPTR = dbnojoin ( DBPTR1, DBPTR2 [, PATTERN1 [, PATTERN2]] )
    find records in DBPTR1 which do not join with DBPTR2

DBPTR = dbprocess ( DBPTR, STATEMENT_LIST )
    construct a view as a series of standard operations

DBPTR = dbsort ( DBPTR [, FIELD, FIELD,...] )
    sort the specified Datascope database table

DBPTR = dbsubset ( DBPTR, EXPRESSION )
    subset a Datascope database table

DBPTR = dbtheta ( DBPTR1, DBPTR2 [, EXPRESSION] [, 'outer'] )
    theta-join two Datascope database tables

dbunjoin ( DBPTR, OUTPUT )
    unjoin the specified Datascope database view

<subsection Getting information about the database>
DBPTR = dbjoin_keys ( DBPTR1, DBPTR2 **or**DBPTR, TABLE1, TABLE2 )
    show the inferred join keys between two database tables

QUERY_RESULT = dbquery ( DBPTR, CODE )
    query a Datascope database for various parameters

<subsection Evaluating expressions>
RESULT = dbeval ( DBPTR, EXPRESSION [, TYPE] )
    evaluate an expression on a Datascope database

<subsection Handling waveform data>
ENDTIME = tr_endtime ( TIME, SAMPRATE, NSAMP )
    calculate endtime from time, sample rate, and number of samples

N = tr_nsamp ( TIME, SAMPRATE, ENDTIME )
    calculate number of samples from time, sample rate, and endtime

TIME1 = tr_samp2time ( TIME0, SAMPRATE, N_INDEXED_BY_1 )
    calculate sample time from sample index

SAMPRATE = tr_samprate ( TIME, NSAMP, ENDTIME )
    calculate sample rate from time, endtime, and number of samples

N_INDEXED_BY_1 = tr_time2samp ( TIME0, SAMPRATE, TIME1 )
    calculate sample index from sample time 

trapply_calib ( TRPTR )
    multiply trace-object waveform data by calib value

trdestroy ( TRPTR )
    free trace object and its associated memory

DATA = trextract_data ( TRPTR )
    read a copy of data from a trace object into a matrix

trfree ( TRPTR )
    free memory for part of a trace object

[DATA, NSAMP, T0, T1] = trgetwf ( DBPTR [, REQS, REQE] )
    read trace data from database into matrix

trinsert_data ( TRPTR, DATA )
    put data from a Matlab matrix into a trace-object

TRPTR = trload_css ( DBPTR, TIME, ENDTIME [, TRPTR] [, TABLE] )
    load waveform data from CSS database into trace object

TRPTR = trload_cssgrp ( DBPTR, TIME, ENDTIME [, TRPTR] [, TABLE] )
    load waveform data from grouped CSS database into trace object

TRPTR = trnew ( )
    create a new trace-object

trputwf ( DBPTR, DATA )
    save waveform data into a file

trsave_wf ( TRPTR, DBPTR, DATATYPE, WFNAME [, 'overwrite' | 'append'] )
    save trace-object waveform data to a new database

trsplice ( TRPTR, TOLERANCE )
    splice together data segments

<subsection Error handling>
clear_register ( [ 'print' ] )
    clear the Datascope error register

<subsection Instrument response routines>
R = dbresponse ( FILE )
    dbresponse class constructor

RESPONSE = eval_response ( DBRESPONSE, OMEGA )
    dbresponse evaluation routine

clear ( DBRESPONSE )
    dbresponse elimination routine

free_response ( DBRESPONSE )
    dbresponse elimination routine

<subsection Parameter Files>
PF = dbpf ( )
PF = dbpf ( PFNAME )
PF = dbpf ( PF, STRING )
    dbpf (Parameter File) class constructor

STRING = pf2string ( DBPF )
    convert a parameter file object to a string

STRUCT = pf2struct ( DBPF [, 'recursive' ] )
    convert a parameter file object to a Matlab struct

FILENAMES = pffiles ( PFNAME [, 'all' ] )
    list file corresponding to parameter file PFNAME

clear ( DBPF )
    dbpf elimination routine

pffree ( DBPF )
    dbpf elimination routine

RESULT = pfget ( DBPF, NAME [, 'recursive' ] )
    get a generic parameter from a parameter file object

PF = pfget_arr ( DBPF, NAME [, 'recursive' ] )
    get an associative array from a parameter file object

BOOLEAN = pfget_boolean ( DBPF, NAME )
    get a boolean value from a parameter file object

NUM = pfget_num ( DBPF, NAME )
    get a numeric value from a parameter file object

STRING = pfget_string ( DBPF, NAME )
    get a string from a parameter file object

LIST = pfget_tbl ( DBPF, NAME [, 'recursive' ] )
    get an ordered list from a parameter file object

KEYS = pfkeys ( DBPF )
    find the parameter names in a parameter file object

NAME = pfname ( DBPF )
    find the name of a top-level parameter file object

pfput ( DBPF, NAME, VALUE )
    put a value into a parameter file object

pfput_boolean ( DBPF, NAME, VALUE )
    put a boolean value into a parameter file object

RESULT = pfresolve ( DBPF, NAME [, 'recursive' ] )
    alternate interface to retrieve parameters

TYPESTRING = pftype ( DBPF )
    find the type of a parameter file object

[PF, MODIFIED] = pfupdate ( DBPF )
    refresh a Dbpf object to reflect changes in the file

pfwrite ( DBPF, FILENAME )
    save a parameter file object to a file

<subsection Real-time system connections>
PKTID = orbafter ( ORBFD, TIME )
    set ORB connection to first packet after a specified time

orbclose ( ORBFD )
    close a connection to an Antelope object-ring-buffer

[RESULT, TIME, SRCNAME, PKTID, TYPE] = orbget ( ORBFD [, CODE|PKTID] )
    get packets from an Antelope ORB connection

ORBFD = orbopen ( ORBNAME, OPENTYPE )
    open a connection to an Antelope object-ring-buffer

VERSION = orbping ( ORBFD )
    ask for the version number of an Antelope ORB server

[RESULT, TIME, SRCNAME, PKTID, TYPE] = orbreap ( ORBFD [, 'nodelay'] )
    get successive packets from an Antelope ORB connection

NSOURCES = orbreject ( ORBFD, REGEX )
    reject sources on an Antelope ORB read connection

PKTID = orbseek ( ORBFD, CODE **or**PKTID )
    set an ORB Read connection to the specified position

NSOURCES = orbselect ( ORBFD, REGEX )
    select sources on an Antelope ORB read connection

PKTID = orbtell ( ORBFD )
    ask for the current read-position on an Antelope ORB

<subsection Seismic Travel Times>
[TIMES, PHASENAMES] = arrtimes ( DELTA, DEPTH )
    Returns predicted seismic phase arrival times

<subsection Special functions>
dbadd_remark ( DBPTR, REMARK )
    add a remark to a CSS3.0 database table

[FILENAME STATUS] = dbextfile( DBPTR, TABLENAME )
    Compose a filename from the specified Datascope database record

[FILENAME STATUS] = dbfilename ( DBPTR )
    compose a filename from a database record

IRECORD = dbfind ( DBPTR, EXPRESSION [, FIRST [, COUNT]] [, 'backwards'] )
    locate a database row satisfying some condition

REMARK = dbget_remark ( DBPTR )
    get a remark from a CSS3.0 database table

ID = dbnextid ( DBPTR, IDNAME )
    get the next integer id for id field from a database

<subsection Time conversion>
TIMESTRING = epoch2str ( EPOCH, FORMAT )
    convert epoch time to a string

EPOCH = str2epoch ( TIMESTRING )
    convert a string to epoch time

STRDATE = strdate ( EPOCH )
    convert an epoch time to its corresponding date

STRTDELTA = strtdelta ( EPOCH )
    convert an epoch time difference to an elapsed time

STRTIME = strtime ( EPOCH )
    convert an epoch time to a string date and time

STRYDTIME = strydtime ( EPOCH )
    convert an epoch time to a string date and time, including day of year

YEARDAY = yearday ( EPOCH )
    convert an epoch time to a yearday value
