<chapter Antelope Real Time System>

<subsection Administration and Control>
<commands>
rtm [-icon iconname] [-title title]
    real time system monitor -- displays tasks and resource usage

dbevents dbname
    display map of seismic events, display waveforms

deprecated rtcron name 'execline'
    run real time system cron jobs

rtexec [options] [comment]
    real time system executive; runs all other real time processes
<options>
-c	clear logs
-d	debug mode
-f	don't ask about killing previous rtexec
-k	kill running rtexec
-n	show what processes would be run, but don't run them
-q x	run for x minutes
-R x	run for x minutes, shutdown, repeat
-s	save old logs in new subdirectory
-t	run 'tail -f logs/rtexec' after changing to a daemon
-v	more verbose
</options>

rtinit
    initialize directory for use by rtexec/rtm by creating appropriate directories and copying pf files

rtincident [options] [output_file]
    collect some system related information into a report; rtexec
    may run this program and send the results to someone
<options>
-c corefile	specify corefile (on which dbx is run)
-e command 	specify command line
-l log	specify log file for program
-M msg	specify message to include in report
-m addr	send report as email to addr
-x	append corefile to email
-p program 	specify program
</options>

rtmail [-s subject] [-a filename] recipient
    script to send mail with attachments

rtreport [options] [directory]
    report some statistics on data collection
<options>
-d start	start of reporting period
-m email,..	list of email recipients
-n days	number of days report covers
-s subset	report only on stations statisfying subset
-v	more detail about gaps
-z	only z channels
</options>

rtsys [options] [directory]
    summarize system operation and log reports
<options>
-d time	start of reporting period
-m email,..	list of email recipients
-p	mail only when a problem is detected
-n n	last n lines from log files (default = 10)
</options>

ecrontab [-r] [file]
    gui interface for editing crontab files; -r option for rtexec style crontab

rtrun command
    run command using the rtexec environment (like an rtexec cron job)

cronrun command
    run command immediately, reproducing the cron environment 

rtsnapshot [options] 
    collect some pertinent info from a real time system into tar file for a problem report
<options>
-c	include core files
-d #rows	max rows from database tables
-f filename	specify output filename
-l #loglines	max lines from log files
-v	more verbose
</options>

rtoutage [options] db t0 t1
    show data gaps for database db from time t0 to t1
<options>
-A	format output as an autodrm outage report
-P maxpts	maximum # waveform points to load at one time
-p	print percentage of data recovered for time period
-S	show gaps as seconds only
-s subset	show gaps only for station/channels which satisfy subset
-t	show only the totals, not each individual gap
-z	select only channels ending in 'z' or 'Z'
</options>

truncate_log [options] log [log..]
    eliminate old lines in a log file
<options>
-c	also remove lines without time tags
-r	suppress saving removed lines in new file
-v	be more verbose
-d n	trim lines before n days ago
-s n	only trim files larger than n kbytes
</options>

<subsection IP network monitoring>
<commands>
pingmeister
    display network connectivity

tcpmonitor [options] host
    monitor tcp connections for stability and throughput
<options>
-B sz	specify packet size
-d db	save statistics in database db
-f	send bursts only from server 
-2	send bursts only to server 
-N #pkts	set #packets in a burst
-m	run in monitor (server) mode
-n #loops	# of bursts to send
-P #ping	# of pings between bursts
-r lrsz	set size of client receive buffer
-R rrsz	set size of server receive buffer
-s lssz	set size of client send buffer
-S rssz	set size of server send buffer
-t timeout	set timeout (in  seconds) for  socket reads  
-v	more verbose
-W sec/ping	set number of seconds between "pings"  
</options>

<subsection orbserver and utilities>
orbserver [options] pf
    orb ring buffer server, using parameter file pf
<options>
-k	don't reset the ring buffer
-p port	use specified port
-r	reset the ring buffer
-v[v]	verbose/doubly verbose
</options>

orbstat [options] orb [secs]
    show statistics for orbserver orb every secs seconds
<options>
-c	show client statistics
-s	show source statistics
-i	interactive mode
-m re	show only packets or clients matching re
-r re	don't show packets or clients matching re
-n avg	boxcar average over avg queries 
-v	more verbose
</options>

<subsection Data Loggers>
<commands>
adsend2orb orb port
    read earthworm packets from udp port and copy to orbserver orb

eworm2orb pf
    copy earthworm packets from memory ring buffer to orbserver

guralp2orb [-v] [-pf parameter_file] orb port
    copy data from Guralp datalogger udp port to orbserver orb

ida2orb [-u] orb nrts selection
    copy selected data from IDA nrts to orbserver

ipd [-v] [-c check_rate] [-i] [-p pfile] [-s pkt_size] [-t timeout] [-u] port orb
    copy data from UCSD data multiplexer at port to orbserver orb

liss2orb [-d database] [-m match] [-s pktsize] [-t timeout] [-v] liss orb
    copy data from LISS server liss to orbserver orb

rddas [options] port orb
    copy data from RefTek DAS port to orbserver orb
<options>
-R	send RESET_DAS command to DAS before reading data
-l	create logfile representing data
-p pf	specify parameter file
-s B,P,D,S	specify serial port baud rate B, parity P, data bits D, stop bits S
-u	write uncompressed packets to orb
-v	verbose
</options>

ref2db [options] input dbname [start [end]]
    copy RefTek format data files/tapes/disks to Antelope database (over time range start to end)
<options>
-d datatype	specify waveform datatype
-e	specify RefTek event based waveform files
-l	create logfile containing instrument status information
-m das	copy only packets with serial number das
-p pf	specify parameter file to match das to station name
-s size	default segmentation of waveforms
-n net	specify miniseed network
-v	print srcname and time of every packet read
-w	do not save waveform data; used to extract log file or get gap info
</options>

qt2orb [options] -dataorb orbd -cmdorb orbc -calib_db calib_db [-dataorb2 orbd2]
    communicate between Quanterra digitizer and orb
<options>
-pf pf	specify parameter file
-sta net_sta1 [net_sta2 [...]]	override names from parameter file
-msglevel {0|1}
-v	verbose
</options>

qtdownload [-timeout sec] [-nowait] cmdorb net_sta filename [localfilename]
    download a file from a remote Quanterra digitizer

qtupload [-timeout sec] [-nowait] cmdorb net_sta filename [remotefilename]
    upload a file to a remote Quanterra digitizer

qtping [-timeout sec] [-nowait] cmdorb
    ping the qt2orb instances attached to a single command orb

qtset cmdorb net_sta name value
    set internal state within an instance of qt2orb

cs2orb comserv orb [-v]
    copy data from comserv to an orbserver orb

cs2orb_1_0_1 comserv orbout [-v]
    copy data from comserv (version 1.0.1) to an orbserver orb

k22orb [options] target orbdata [orbcmd]
    transfer data from a Kinemetrics Altus digitizer to an orb
<options>
-pf pf	specify alternate parameter file
-db db	specify database for calib information
-v	be more verbose
-state filename	save state in filename
-start time	only get events after time
</options>

k2cmd [options] orb target datalogger cmd
    execute command cmd on a remote Kinemetrics Altus digitizer
<options>
-timeout timeout
-noblock
-noreply
-prm
-delayhangup delayhangup
</options>

b3s2orb [options]
    read B3S2 data to orb
<options>
-c p1	command port (default = "/dev/ttya")
-i p2	data port (default = "/dev/ttyb" )
-o orb	default = localhost
-p pf	default = pkt.pf
-s
-v	more verbose
</options>

<subsection Other Orb Writers>
pf2orb pfile orb
    put the contents of a parameter file into an orb

dbt2orb [-v] [-s subset_expr] [-l naptime] db table orb
    read Datascope database rows from a database and post them to an orb

db2orb [options] {database|view} [orb]
    send database as packets to an orbserver
<options>
-d	make a hexadecimal dump of the output packets.
-D delay
-f fast	send packets as quickly as possible
-l	loop forever
-m #timesteps
-n n	stop after sending n packets
-p pkttype	make output packets in pkttype format
-s subset	use only wfdisc rows which match subset
-t timestep	size of packets in seconds
-v	verbose
</options>

dbreplay [options] view [[[orb] t0] t1|T]
    replay database view to orb from t0 to t1 (or t0+T)
<options>
-w client	specify read client to watch (to avoid overruns)
-b behind	with -w, pause output if client is more than max seconds behind
-r rate	alternatively, specify a data rate as a ratio where real time = 1
-n n	send only n packets
-p pktsuffix	specify the output packet type
-s expr	subset the input according to expression
-t timestep	specify the packet time size
-v	more verbose
</options>

<subsection Datalogger commanding>
qtcmd [options] cmdorb net_sta cmd [params]
    execute commands on a remote Quanterra digitizer
<options>
-target target
-replytarget replytarget
-timeout timeout
-noreply
</options>

qtmassrecenter [options] cmdorb net_sta
    issue a mass recenter command to a remote Quanterra digitizer
<options>
-timeout sec
-nowait
-board board#
-duration duration
</options>

automrc [options] orbname dc_name
    automatically send mass recentering command to a RefTek DAS
<options>
-m srcmatch
-p pf
-s sleep
-t tperiod
-V verbatim
-v max_lta
</options>


<subsection Real Time data processing: Orb reader/Writers>
orb2orb [options] in out [start [period|end]]
    copy data from one orb to another
<options>
-c suffix	convert packets from input format to suffix format
-d	print a hex dump of each packet 
-f	when reading from a plain file, do not adjust the time tags, and output packets as quickly as possible
-i nsecs	save state file every nsecs seconds
-N	print #samples of the data
-u	unstuff packets as they are received
-l	loop repeatedly over the input forb(5) file
-m re1	read only packets which match re1 
-r re2	don't read packets matching re1
-n n	stop after n packets
-R r	when saving to a plain file, use forb(5) format r
-s p	start after pktid #p
-S filename	save state in filename
-v	more verbose
-b max_behind
-w re	ensure reading programs which match re are no more than max_behind seconds behind 
</options>

orbxfer [-d dir] [-vv] file ... orb
    transfer a set of local files to an orbserver orb; the -d option specifies an alternate directory dir in which the files are to be found

orbxfer [-d dir] [-vv] orb
    unpack files from orbserver orb to local directory, or optionally directory dir 

orbdetect [options] orbname dbname
    multi-frequency STA/LTA detector
<options>
-v
-select expr
-tstart start_time
-twin minutes
-pf pfname
-out orbout
</options>

orbtrigger [options] orbname
    real time network trigger algorithm
<options>
-v
-tstart start_time
-target_orbassoc torbassoc
-pf pfname
-out orbout
</options>

orbassoc [options] orbin orbout dbnextid
    spatial grid search based real time associator/locator
<options>
-start {pktid|time|OLDEST|NEWEST}
-number number
-nowait
-target_orbassoc torbassoc
-target_orbmag torbmag
-pf pfname
</options>

ttgrid [-pf pfname] [-time {timestr|all}] db
    compute a travel time grid file for use by orbassoc and dbgrassoc

orbmag [options] orbwf orbdb dbname
    real time magnitude computation
<options>
-start {pktid|time|OLDEST|NEWEST}
-number number
-nowait
-state filename	save state in filename
-p parameter_file
-auth_expr auth_expr
-target_orbmag torbmag
-make_magtables
-use_mean
-use_if_not_associated
-use_if_not_defining
</options>

ttgrid_show ttgridfile
    dump the contents of a ttgrid file

orbpftrigger [options] orb [cmdstring]
    parameter file trigger of a program execution
<options>
-select expr
-start {pktid|time}
-number number
-nowait
</options>

orbwfmeas [options] orbwf orbdb dbname
    make waveform measurements from an orb
<options>
-select_wf expr
-start {pktid|time|OLDEST|NEWEST}
-number number
-nowait
-state filename	save state in filename
-p parameter_file
-net net
-dbsift_expr dbsift_expr
</options>

qedd [options] dbname
    daemon to get realtime QED data from a finger site
<options>
-l
-ipfinger ipfinger
-sleep seconds
-timeout seconds
-author author
</options>

dbassoc_rt [options] dbcat dbassoc
    real time association of events from an external catalog
<options>
-after time
-number number
-safe
-nowait
</options>

<subsection Orb Real Time Display>
qtmon dataorb data2orb cmdorbname [database]
    monitor Quanterra digitizers

orbmonrtd [options] orb
    real time waveform trace display
<options>
-twin minutes	window size in minutes
-width pixels	trace width in pixels
-height pixels	single trace window height in pixels
-pf pfile	
-hmax hmax	maximum height of main window in pixels
-wmax wmax	maximum width of main window in pixels
-log	
-filter filter	
-source net_sta_chan	select display channels on command line
-select re	select channels matching re
-reject re	reject channels matching re
</options>

orbdisp [options] orbserver [start [range|end]]
    inspect waveform data on orb server
<options>
-c re	save channel matching regular expression re
-m re	select packets matching regular expression re
-r re	reject packets matching regular expression re
-l latency	specify how long window may pause waiting for data
-n	show network on display
-p period	specify minimum packet period
-w t	make time window t seconds
</options>

<subsection Real Time Status Monitoring>
cpu2orb [-i t] [-vv] orb
    put cpu and system utilization packets on orb every t seconds

df2orb [-i t] [-p pf] [-vv] orb
    put filesystem status information packets on orb every t seconds

ps2orb [options] orb
    save process information from ps(1) to orb at interval t seconds
<options>
-a m	report on all processes every m'th iteration
-i t	report every t seconds
-t n	report on the top n processes every iteration
-r {mem|cpu}	sort by mem or cpu
-vv	print the reports on stderr
</options>

tail2orb [options] orb [file ...]
    monitor multiple files, sending any added lines as packets
    to the orbserver orb
<options>
-g n	check for new files matching glob patterns every n'th iteration 
-i t 	check files every t seconds
-m m	specify maximum number of files monitored  
-p pf 	specify alternate parameter file
-S state	specify alternate state file 
-vv	print lines on stderr also
</options>

orblog [-f file] [-s subcode] orb [log info]
    write a single log packet to orb; the packet contents are
    remainder of the command line, stdin, or the specified file

orb2logs [-m match] [-r reject] [-S state] [-w pattern] orb logdb [start]
    saves logs packets (from tail2orb) back into corresponding plain files 
    divided by epoch day boundaries.

rtlogs orb
    display log messages from orbserver orb

<subsection Saving Orb Data in Database>
orb2db [options] orb db [start [end|period]]
    copy waveform data from orbserver orb into database db (starting at time start through end or for stated period)
<options>
-c re	save channel matching regular expression re
-m re	select packets matching regular expression re
-r re	reject packets matching regular expression re

-p pf	specify parameter file
-S file	save state in file
-s datatype	specify output waveform type (overriding pf)
-t timetags	create a file of time tags from input packets
-v	more verbose
-vv	show every packet read.
-w wfname	specify pattern for waveform file names
</options>

orb2dbt [options] orb dbout
    read Datascope database packets from an orb and write to a database
<options>
-select re1	read only packets matching re1
-reject re2	don't read packets matching re2
-verbose
-start {pktid|time|OLDEST|NEWEST}
	begin reading at specified pktid
-number n	read a maximum of n packets
-nowait
-safe
-timeout seconds
-overwrite
-state filename	save state in filename
</options>


orb2db_msg [-s sleep] db [pause|continue|status]
    signal orb2db and orb2dbt processes to pause for database db cleanup

par2db [options] orbname dbname [start [window]]
    create database with GPS site coordinates and DC/DAS status parameters from orb
<options>
-c	Extract DC status parameters
-g	Extract GPS site coordinates
-i time_interval
-m re	select packets matching regular expression re
-v	more verbose
</options>


orblatency [options] orb database
    accumulate latency statistics from a network
<options>
-m re	select packets matching regular expression re
-r re	reject packets matching regular expression re
-p period	specify period over which latencies are averaged
-v	more verbose
</options>

<subsection Orb Alarms>
acalarm [-d] [-m srcmatch ] orbin mail_add [stime]
    send mail when AC power fails for a data collector

battalarm [-d] [-m srcmatch ] orbin mail_add
    send mail when battery power drops for a data collector

pktmon [-p pf] [-S state] orb
    read packets, watch for specific conditions and send alarms

<subsection Miscellaneous>
resetnetblazer hostname line timeout
    reset a Telebit Netblazer terminal server

orb2eworm parameter_file.d
    export waveform data from an Antelope orb to an Earthworm system

orb2pf [options] orb [file]
    copy parameter file objects from an orb to file
<options>
-select expr
-start {pktid|time}
-number number
-nowait
</options>

mail_parser [options] [file [file...]]
    direct incoming email to customized perl handlers
<options>
-v
-m
-f logfile
-l library_path
-p pffile
</options>

<subsection Archiving Data>
<commands>
rtbackup [-v] [-m who] [-p parameter_file] db drive
    copy data from db to archive tape on drive, using orb2db_msg
    to stop and restart orb2db and orb2dbt

get_archive [options] db dbout tape_drive [start_time [end_time]]
    restore tape backups made by rtbackup using db.wftar to dbout
<options>
-c channels
-s stas
-v
</options>

rtdbclean [-n] [-v] [-p parameter_file] orb rt_db
    real time database and disk cleaner

get_wftar -v dbmaster tape_drive
    extracts wftar table from an ARTS archive tar tape

online_backup [options] [directories]
    backup certain files to an online directory
<options>
-d dir	specify an alternate base directory
-m	send mail rather than writing to stdout
-n	don't actually run backup, but show what would happen
-p pf	specify parameter fil
-t t	backup files modified more recently than time t
-v	more verbose
-V	show the generated perl procedure which selects files to be saved
-y n	backup files modified in the last n days
</options>

<subsection Orb Diagnostic tools>
private orbreap [options] orb [start [end|range]]
    multipurpose orb dumping program
<options>
-a time
-c	print packet header information
-C	print packet header information and data
-d	dump packets in hexadecimal format
-F	expect packets in "Fake" format
-m re	select packets matching re
-r re	reject packets matching re
-M	select only packets with numeric source names
-n n	reap n packets, then quit
-N	show delays.
-o file	save packets in file in forb(5) format
-R {a|x|f}	choose forb representation: ascii, hex, or header only
-s pktid	start at pktid
-S bufsize	set socket buffer sizes to bufsize
-v	more verbose
</options>

private orbsend [options] orb
    send test packets to orbserver
<options>
-b m	send m byte packets
-a t	align packets on t second marks
-d d	packets are delayed d seconds
-e	some packets with future times
-f	packet is uninitialized
-F 	special test mode packets
-g {sin|cos|sqr|tri|saw|dlt|ran|stp|pkt}	packets contain specified signal
-i pktfile	read packet from forb(5) file
-j jitter	add some jitter to packet times
-M	regularly send packet with a unique srcname
-N name	specify packet name
-n n	number of time steps (default = 10)
-r rate	specify data rate in kbytes/second
-R pktrate	specify packet rate (per srcname) in pkts/second
-s s	send packets for s distinct srcnames for each time step
-S srcname	specify source name for packet read from forb file
-t start	first packet time = start
-v
-x
-0 srcid0
</options>

deprecated stream2orb orbname
    play back raw orb packet stream back into an orb
<options>
-repeat infile1 [infile2 [...]]
-v	Verbose flag.
-tgap tgap
-dattime
-events dbname
-sleep seconds
</options>

deprecated orblist [options] orb [start [twindow]]
    list an orb contents
<options>
-d	Tells orblist to print a hexdump of orb packets
-h	Tells orblist to print a hexdump of raw packets
-m srcmatch
-n time_diff
-s	do not sort packets
</options>

private orbd [-abips] name
    dump out an orb ring buffer for debugging
<options>
-a	Assume the packets are straight ascii and print them
-b	Print the packets using a standard hex dump format
-i	Enter interactive mode
-p	Show the packet index
-s	Show the source index
-v	Show the indexes verbosely
</options>

deprecated orb2stream orbname
    dump out raw orb packets
<options>
-src srcexpr
-npackets npackets
-tstart time
-twin minutes
-tstart_dat time_dat
</options>

deprecated streamassoc strfile dbsite dborigin refsta method model
    associate events with an orb stream file


orbcapture [options] orb db file
    save packets from orbserver orb to file when new row in database (satisfies condition)
<options>
-b m	start capture m packets before trigger packet
-a n	capture n packets after trigger packet
-c condition	only new rows satisfying condition trigger capture
-R {a|x|f}	specify the output format ascii, hexadecimal, or header only
</options>

deprecated orbcp -orbin in_orbname -orbout out_orbname
    orb copy program
<options>
-src srcexpr
-ircnt
-orcnt
-pktstart pktid
-rcnt_time minutes
-npackets npackets
</options>

deprecated old_orb2orb in out [start [period|end]]
    copy data from one old orbserver orb to another
<options>
-b bufsize
-d	print a hex dump of packets as they are received
-f	when reading from a plain file, do not adjust the time tags
-u	unstuff packets as they are received
-N	print #samples of the data
-l	loop repeatedly over the input forb(5) file
-m match
-r reject
-n npkts	Stop after receiving npkts packets
-R representation
-s pktid
-S statefile
-v more verbose
</options>


forbserver [options] filename
    file orbserver emulator
<options>
-a	use the absolute time specified in the input file
-f	flash mode: disregard timing, pump out data as quickly as possible
-v	more verbose
</options>

