<chapter Datascope database tools>

<subsection Database Schemas>
<commands>

dbhelp [db|s]
    gui to explore schema for database db or schema s

dbdescribe {db|schema} [table]
    generate ascii formatted document describing schema, database, or database table

dbdoc db
    generate troff formatted document describing schema for database db

dbdesign
    create and/or edit Datascope schema files

dbinfer file [file...]
    build a schema file from a set of ascii example files


<subsection Creating and Editing Databases>
dbe [-e] db[.table] [ db[.table] ...]
    general purpose viewer/editor for databases (see .dbe.pf to configure)

dberesp db.table
    run by dbe to plot response curves for instrument 

db_textedit db.table
    run by dbe to edit external text files

db_xvimage db.table
    run by dbe to show external image files

db_showurl db.table
    run by dbe to show external web pages

dbset [-clv] db[.table] field from [to]
    change value of attribute field throughout a database, when initial value is from ('*' specifies all values). -c asks before changing, -v shows each change


dbconvert [-fv] [-s new_schema] db dbout[.table]
    create dbout (or dbout.table) from database db, using rules specified in dbconvert parameter file


dbcp [options] dbin[.table] dbout
    copy database dbin (or dbin.table) to database dbout
<options>
-d	make descriptor file for dbout which references dbin
-i	prompt for permission to overwrite existing tables
-f	copy external files (default changes references)
-l	create local symbolic links for external files
-o	quietly overwrite existing external files
-s	copy without correcting external file references 
-v	verbose
</options>


dbadd dbin.table dbout.table expr1 [expr2 ...]
    add rows to dbout.table using rows from dbin.table and expressions expr1, expr2, ...

dbdelete [options] view [table ...]
    delete (or mark) all records in database view (or only records for specified table)
<options>
-c	require individual confirmations for each record
-m	mark records only (no final crunch)
-s	save a copy of the original file
-v	verbose
</options>

dbaddv [options] database.table [name value name value ...]
    add records to a table
<options>
-i	interactively
-c	confirm each addition
-v	verbose
</options>

dbcrunch [-v] db [table ...]
    crunch out marked (null) records from a database db, or specified tables

dbdestroy [-ginkv] db[.tbl]
    destroy a database or table by removing all associated files
<options>
-g	remove files which match a glob of db
-i	confirm each file removal first
-n	show what would happen (don't do it)
-k	keep the external database files
-v	verbosely
</options>

dbsplit [options] dbin dbout
    copy records from database dbin which satisfy some subset expression into database dbout, using the rules specified in dbsplit parameter file.
<options>
-d	delete selected rows from dbin after copying to dbout
-f 	overwrite any existing output tables in dbout
-k 	keep renamed backup of original tables
-s subset	records which satisfy expr are copied to dbout
-v 	verbose
-vv	more verbose
</options>


dbmerge [-vV] [-x tb1,tb2] dbin dbout
    merge database dbin into database dbout (except for tables tb1, tb2, ...)

dbconcat_event db1 db2 [ db3 ...] dbout
    combine multiple CSS 3.0 event databases db1, db2, ... (arrival, assoc, event, origin, and origerr tables) into a single new database dbout

dbfixids db idname [ idstart ]
    renumber ids for idname (starting at start) in database db

<subsection Creating Database Views>
<commands>
dbsubset [-n name] [-v] aview expr
    create new view from input aview containing only records which satisfy expression expr


dbsort [options] aview [key ...]
    create view with input aview sorted (according to specified key)
<options>
-o	overwrite the original table with the sorted table
-n name	save results into database.name
-r	reverse the sense of the sort
-u	eliminate rows which are identical in the sort keys
</options>


dbjoin [options] aview [:key ...] table2 [[:key ...] table3 ...]
    create view joining input aview with other tables, either by inferring join keys or by explicitly specifying join keys
<options>
-o	outer join
-n name	save results into database.name
-v	verbose
</options>

dbnojoin [-n name] [-v] aview [:key ...] table2
    create view of records from aview which do not join with table2

dbtheta [-c expr] [-n name] [-v] aview table2
    create view joining rows from aview to rows from table2 only when expression expr (evaluated on the joined record) is satisfied

dbseparate [-n viewname] [-v] aview table1
    create a view which contains only the rows of base table table1 used in the input joined view

dbsever [-v] [-n name] aview table2
    create new view which removes table2 from input aview

dbunjoin [-f] -o dbout aview
    create a new database dbout using the base table records from the input aview


dbselect [options] aview [exp ..] [-pre exp exp ...] [-post exp exp ...] [-group field1 field2 .. [-pre exp exp ..] [-post exp exp ..]] [-group field1 field2 .. [-pre exp exp ..] [-post exp exp ..]]
    print selected fields and expressions from input aview
<options>
-b	strip blanks from each field in the output.
-F	separator
-p	print the primary key
-s	allow expressions to modify database fields with operator ":=".
</options>

<subsection Verifying Databases>
dbcheck [-v] db[.table]
    scans database (or specified table only) for lines with invalid length

dbverify [options] db[.table]
    perform some consistency checks on database db (or specified table only)
<options>
-t	turn off all tests
-c	perform consistency checks
-C c1,c2,..	run only specific consistency checks c1,c2,...
-i	check that all referenced foreign ids are present in defining table
-j	test for correct # of records in a join specified in parameter file
-k	verify uniqueness of primary and secondary keys
-l	check that lastid table entries are valid
-p	perform external program tests specified in parameter file
-r	check attribute ranges
-u	complain about unreferenced ids
-x	check for existence of external files
-A t1,t2..	uniqueness of alternate keys not required in specified tables t1, t2, ..
-P t1,t2..	uniqueness of primary keys not required in t1, t2, ..
-v	verbose
</options>

dbdiff [options] db1[.table] db2[.table]
    find differences between two databases (or specified tables)
<options>
-a absolute_tolerance 
-r relative_tolerance
	allow floating point values to vary by some absolute or relative tolerance
-A absolute_tolerance 
-R relative_tolerance
	allow floating point values to vary by some absolute or relative tolerance in indexes
-e	print times as epoch seconds
-i name	list of names to ignore
-l {exact|compare|ignore}
	for link fields
-w width
-x {exact|compare|ignore|Program}	
	for external files
</options>


<subsection Miscellaneous>
<commands>
deprecated db2perl db [ table1 table2 ...]
    create perl subroutines to read and write database tables

dbids [-p port] [-P pf] [-v] database
    idserver for Datascope databases

dbnextid db idname
    get next available id for idname (in database db)

dbcalc [options] db.table [ record# | expression ]
    interactive interface to Datascope expression calculator
<options>
-e	echo input to stdout
-r	print reverse polish notation for the expression
-t	show the type of each piece of the expression and result
</options>

dbremark [ -p ] database table field value
    get/add remark from/to a database (must contain remark table and commid)

deprecated dbtidy db
    sort various tables from CSS database db into a preferred order, and renumber some ids

dbtc [-p pf] [-t time] [-v] gdb:gnet:gsta:gch bdb:bnet:bsta:bch
    create time correction table by comparing good source gdb:...
    with bad source bdb:...

correctdt [-m srcmatch] [-t stime] [-v] bdb
    using correction table from dbtc, correct times in wfdisc and arrival tables, and in miniseed

dbfixchanids [-q] db
    fix chanid attributes in wfdisc and arrival tables

dbfixtimeres db [expr]
    fix time residuals in the assoc table (for records which satisfy expr)

dbfix_calib db
    replace null calib values in wfdisc with values from the calibration table
