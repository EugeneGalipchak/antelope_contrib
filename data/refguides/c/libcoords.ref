<library>
Time and Coordinate Transformations
coords
stock posix4 nsl socket m
STOCKLIBS
coords.h
conversions between epoch time and strings, 2-d and 3-d coordinate transformations, and seismic region routines

<subsection Flinn-Engdahl Regions>
<cdeclarations>

int grnumber ( double lat, double lon )
    returns the Flinn-Engdahl geographic region number which contains the specified lat, lon

int grname ( int grn, char *name )
    returns a Flinn-Engdahl geographic region name for geographic region grn


int srnumber ( int grn )
    returns the Flinn-Engdahl seismic region number for geographic region grn

int srname ( int srn, char *name )
    returns the Flinn-Engdahl seismic region name for seismic region srn

<subsection Earth Units conversion>
<cdeclarations>

double deg2km ( double degrees )
    convert from degrees to kilometers at the equator

double km2deg ( double km )
    convert from kilometers to degrees at the equator


<subsection Time conversion>

<cdeclarations>

int is_epoch_string ( char *s, double *e )
    returns true if string s can be interpreted as a time, returning epoch time e

int zstr2epoch ( char *s, double *e )
    returns zero if no errors occur translating string s to an epoch time e 

double str2epoch ( char *s )
    returns epoch time corresponding to string s, printing error messages


double now ()
    return current epoch time, to clock resolution (typically microseconds)


char *epoch2str ( double e, char *f )
    returns freshly allocated string containing epoch time e formatted according to format f

char *zepoch2str ( double epoch, char *f, char *timezone )
    returns freshly allocated string containing epoch time e formatted according to format f for timezone; if timezone == 0, use UTC, if timezone == "", use $TZ


private int fmttime ( double e, char *result, int fmt, char *timezone )
    returns a formatted time string

char *strdate ( double e )
    returns string representing date portion of epoch time

char *strtdelta ( double e )
    returns a string representation of elapsed time

char *strtime ( double e )
    returns string representing epoch time

char *strydtime ( double e )
    returns standard string representing epoch time


char *getTZ (  )
    get value for TZ (time zone)


private void bcdtime ( char *tmstamp, struct date_time *ptim )
    parse BCD timestamp into date-time structure

private void epoch2bcd ( char *tmstamp, double epoch )
    convert epoch time to BCD


void doy2mday ( int doy, int year, int *month, int *day )
    convert from year and Day-Of-Year doy to month and day of month

private void e2h ( double epoch, int *iyear, int *iday, int *ihour, int *imin, double *sec )
    returns year, doy, h:m:s given epoch time


double epoch ( int yearday )
    Convert epoch time to yearday

int yearday ( double e )
    returns yearday corresponding to given epoch time


private double h2e ( int iyear, int iday, int ihour, int imin, double sec )
    returns the epoch time given inputs

private int mday2doy ( int year, int month, int day )
    convert from year, month, day to Day-Of-Year

private void sdate ( char **tmstr )
    make a file name based on current epoch time

private int time_string2epoch ( char *string, double *time )
    earlier interface to str2epoch


<subsection Spherical Geometry>
<cdeclarations>


double deg ( double r )
    converts input radians to degrees

double rad ( double d )
    convert input degrees to radians


void dist ( double lat1, double long1, double lat2, double long2, double *delta, double *azimuth )
    Compute angular distance between two points

void latlon ( double lat1, double long1, double delta, double azimuth, double *lat2, double *long2 )
    computes lat and lon from azimuth, angular distance, and starting point

void xyztortp ( float u[3], float *r, float *theta, float *phi )
    Convert cartesian coordinates into spherical coordinates

<subsection Vectors and Rotation Matrices>

void carsph ( float u[3], float *ra, float *dec )
    convert a unit 3-vector to ra and dec in radians

void sphcar ( float ra, float dec, float u[3] )
    Convert ra and dec in radians to cartesian coords


void dsphcar ( double ra, double dec, float u[3] )
    Convert ra and dec in radians to cartesian coords


void deatom ( double a, double b, double c, double m[9] )
    convert Euler angles to rotation matrix

void dmtoea ( double m[9], double *a_p, double *b_p, double *c_p )
    Convert rotation matrix to Euler angles

void rotmat ( double u[3], double A[9], double theta )
    create a rotation matrix A about axis u by angle theta

void xrotate ( double u[3], v[3], w[3], theta )
    rotates v by angle theta about axis u, returned in w


void r3add ( float u[3], float v[3], float w[3] )
    add two 3-vectors u and v

void r3cros ( float u[3], float v[3], float w[3] )
    computes cross product of two 3-vectors

double r3dot ( float u[3], float v[3] )
    returns dot product of two 3-vectors

double r3mag ( float u[3] )
    returns the length of a 3-vector

void r3mov ( float u[3], float v[3] )
    move a vector u to a vector v

void r3mxm ( float A[9], float B[9], float C[9] )
    multiply two 3x3 matrices A and B

void r3mxv ( float A[9], float u[3], float v[3] )
    multiply a 3x3 matrix A by a 3-vector u

void r3norm ( float u[3] )
    replaces u with a unit vector

void r3ortho ( float u[3], float v[3] )
    makes u and v orthonormal vectors

void r3sub ( float u[3], float v[3], float w[3] )
    subtracts v from u

void r3sxv ( float c, float v[3], float w[3] )
    multiply a scalar c by a 3-vector v

void r3tran ( float A[9], float B[9] )
    return the transpose of the 3x3 matrix A


