<library>
Time and Space
coords
stock posix4 nsl socket m
STOCKLIBS
coords.h
2-d and 3-d coordinate transformations, and seismic region routines

<subsection Earth Units conversion>
<cdeclarations>
double deg2km ( double degrees )
    convert from degrees at equator to kilometers

double km2deg ( double km )
    convert from kilometers to degrees at equator


<subsection Flinn-Engdahl Regions>
<cdeclarations>
int grnumber ( double lat, double lon )
    return Flinn-Engdahl geographic region number which contains lat, lon

int grname ( int grn, char *name )
    return Flinn-Engdahl geographic region name for geographic region grn

int srnumber ( int grn )
    return Flinn-Engdahl seismic region number for geographic region grn

int srname ( int srn, char *name )
    return Flinn-Engdahl seismic region name for seismic region number srn


<subsection Spherical Geometry>
<cdeclarations>
double deg ( double r )
    convert input radians r to degrees

double rad ( double d )
    convert input degrees d to radians

void dist ( double lat1, double lon1, double lat2, double lon2, double *delta, double *azimuth )
    return angular distance delta and direction azimuth between two points (lat1,lon1) and (lat2,lon2)
    (angles in radians)

void latlon ( double lat1, double lon1, double delta, double azimuth, double *lat2, double *lon2 )
    return new position (lat2,lon2) after moving delta radians in direction azimuth from (lat1,lon1) 
    (angles in radians)

void dcarsph ( double u[3], double *ra, double *dec )
    convert a unit 3-vector u to ra and dec (radians)

void dsphcar ( double ra, double dec, double u[3] )
    convert ra and dec (in radians) to cartesian coords u

void deatom ( double a, double b, double c, double m[9] )
    convert Euler angles a, b, c to rotation matrix m

void dmtoea ( double m[9], double *a, double *b, double *c)
    convert rotation matrix m to Euler angles a, b, c

void rotmat ( double u[3], double A[9], double theta )
    create matrix A which rotates by angle theta about axis u 

void xrotate ( double u[3], v[3], w[3], theta )
    rotate v by angle theta about axis u, returned in w

void dr3add ( double u[3], double v[3], double w[3] )
    add two 3-vectors u and v

void dr3cros ( double u[3], double v[3], double w[3] )
    return cross product w of two 3-vectors u and v

double dr3dot ( double u[3], double v[3] )
    return dot product of two 3-vectors u and v

double dr3mag ( double u[3] )
    return length of a 3-vector

void dr3mov ( double u[3], double v[3] )
    move a vector u to a vector v

void dr3mxm ( double A[9], double B[9], double C[9] )
    multiply two 3x3 matrices A and B, returning result C

void dr3mxv ( double A[9], double u[3], double v[3] )
    multiply 3x3 matrix A by 3-vector u, returning vector v

void dr3norm ( double u[3] )
    make u a unit vector

void dr3ortho ( double u[3], double v[3] )
    makes u and v orthonormal vectors

void dr3sub ( double u[3], double v[3], double w[3] )
    subtracts v from u, returning result w

void dr3sxv ( double c, double v[3], double w[3] )
    multiply 3-vector v by scalar c, returning result w 

void dr3tran ( double A[9], double B[9] )
    transpose 3x3 matrix A into B


