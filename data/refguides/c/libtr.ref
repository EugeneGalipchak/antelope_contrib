<library>
Waveform Manipulation
tr
$(DBLIBS)
TRLIBS
tr.h
implements routines for reading and writing waveforms from a database, and performing some standard operations on them.

<subsection Trace objects>
<cdeclarations>
Dbptr trnew ( char *tr_path, char *schema_name )
    create a new trace database

int trfree ( Dbptr tr )
    free up memory and clear trace object tables

int trdestroy ( Dbptr *trp )
    close a trace database and free its resources

int trtruncate ( Dbptr tr, int n )
    truncate a tr database table after record n

<subsection Reading and Writing waveforms>
<cdeclarations>
int trgetwf ( Dbptr db, Arr **maparr, float **data, int *datasz, double reqt0, double reqt1, double *t0, double *t1, int *npts, int (*fill) (), void *pvt )
    read waveform data for single record db between times reqt0  and reqt1 into buffer data, 
    returning #points npts and actual time range t0 to t1.  returns 0 for success

void trgetwf_error ( Dbptr db, int code )
    add error message to log for trgetwf errors

int trload_css ( Dbptr db, char *reqt0, char *reqt1, Dbptr *trp, char *table, Arr **map)
    load waveform data between reqt0 and reqt1 from all records in
    database view db into trace table trp

int trload_cssgrp ( Dbptr db, char *reqt0, char *reqt1, Dbptr *trp, char *table, Arr **map )
    load waveform data between reqt0 and reqt1 from pre-sorted database view or 
    bundle db into trace table trp

Dbptr trloadchan ( Dbptr db, double t0, double t1, char *sta, char *chan )
     read waveform data for specified sta and chan from db for time range t0 to t1

int trloadwf ( Dbptr db, double t0, double t1, Dbptr tr)
     read waveform data for specified database record from t0 to t1 into tr

deprecated int trputwf ( Dbptr db, float *data )
    save waveform data

int trsave_wf ( Dbptr tr, Dbptr db, char *dt, char *wf, int flags )
    save waveform data from tr to database db creating waveforms of
    specified datatype dt in data files named by trwfname(3) using
    the pattern wf.  trAPPEND flag bit causes data to be appended to 
    existing files; trOVERWRITE flag bit causes data to overwrite existing files.

int trwfname ( Dbptr db, char *wf, char **path )
    generate waveform file name for database row db using specified pattern wf and
    creating any non-existent directories.

<subsection Network, Aux and Loc code Remapping>
<body>

Autodrm and SEED introduce extra keys to uniquely identify station and
channel.  These extra keys must be mapped into sta and chan to work
with the CSS3.0 schema.  These routines implement that mapping.

<cdeclarations>
int finit_db (Dbptr db)
    set the database the routines below use to look up snetsta and schanloc

int refinit_db (Dbptr db)
    change the database the routines below use to look up snetsta and schanloc

int map_autodrm_netsta ( char *anet, char *fsta, char *sta )
    map an autodrm net anet and station code fsta to a CSS3.0 sta code

int autodrm_net ( char *sta, char *anet, char *fsta )
    return autodrm network code anet and station code fsta corresponding to CSS3.0 sta code

int map_autodrm_chanaux ( char *sta, char *fchan, char *aux, char *chan )
    map an autodrm channel fchan and aux code into a CSS3.0 chan code for station sta

int autodrm_aux ( char *sta, char *chan, char *fchan, char *aux )
    return autodrm channel code fchan and aux code corresponding to CSS3.0 sta/chan


int map_seed_netsta ( char *snet, char *fsta, char *sta )
    map a SEED net and station code into a CSS3.0 sta code

int seed_net ( char *sta, char *snet, char *fsta )
    return seed network code snet and station code fsta corresponding to CSS3.0 sta code


int map_seed_chanloc ( char *sta, char *fchan, char *loc, char *chan )
    map a SEED channel fchan and loc code into a CSS3.0 chan code for station sta

int seed_loc ( char *sta, char *chan, char *fchan, char *loc )
    return seed channel code fchan and loc code corresponding to CSS3.0 sta/chan

<subsection Generating test data>

int trsignal_argv ( Dbptr tr, int argc, char **argv )
    generate test signal data in a trace table

int trsignal ( Dbptr tr, char *params )
    generate test signal data in a trace table; params is split into an argc/argv list


void mksignal ( char *type, float *data, double time, int nsamp, double samprate, double t0, double freq, double slew, double amp )
    generate a signal of a specified type: type may be sin, cos, sqr, tri, saw, dlt, ran, stp, pkt or dif. creates floating-point numbers. 

void imksignal ( char *type, int *data, double time, int nsamp, double samprate, double t0, double freq, double slew, double amp )
    generate a signal of a specified type. creates integers.

<subsection miniseed and Steim Compression>
<cdeclarations>
Msd *msdnew ()
    create new configuration block for miniseed generation

void msdfree(Msd *msd) ;
    free miniseed configuration block

void msdclose(Msd *msd)
     close the file descriptor with msd

int msdget ( Msd *msd, char *name, ...)
    get a parameter from msd struct

int msdput ( Msd *msd, char *name, ...)
    set a parameter in msd struct

<body>

The possible parameter names are:
</body>

<example>
MSD_ACTIVITY_FLAGS    MSD_CHAN              
MSD_CNT               MSD_DATAFORMAT        
MSD_FD                MSD_FILENAME          
MSD_FIRST_DATA_FRAME  MSD_FRAMES_PER_RECORD 
MSD_HAS_B100          MSD_HAS_B1000         
MSD_HAS_SEED_HEADER   MSD_IO_FLAGS          
MSD_LEVEL             MSD_LOC               
MSD_MSEED             MSD_MSEED_NBYTES      
MSD_NET               MSD_NSAMP             
MSD_OFFSET            MSD_QUALITY_FLAGS     
MSD_RECORD_SIZE       MSD_SAMPRATE          
MSD_SAMPRATE_FLAGS    MSD_SEQUENCE          
MSD_SPARC_ORDER       MSD_STA               
MSD_TIME              MSD_TIME_CORRECTION   
</example>

int msd2wf ( Msd *msd, Dbptr db, int (add_wfdisc)() );
    reads through a miniseed volume with msdnxt(3), calls 
    add_wfdisc whenever a new data segment is found

int msdnxt ( Msd *msd );
    read header of next input record

int msdrec ( Msd *msd, int rec );
    read header of input record #rec

int dmsd(FILE *file, Msd *msd, int verbose)
    print headers for a miniseed data block (in detail if verbose=1)

void msdpackhdr(Msd *msd, unsigned char *record)
    create a miniseed header in record using info from msd

int umsd ( Msd *msd, int **data, int *npts );
    unpack the msd data record, returning the samples 

int ustc ( Msd * msd, int **data, int *npts );
    uncompresses a single Steim level 1 or level 2 miniseed record

int cstc ( Msd * msd, int (*save_record) (), int *data, int npts );
    compresses the npts input sample data into a miniseed
    record that is accumulated inside the msd struct, and written
    by save_record when full. npts=0 flushes msd.

int dstc(FILE *file, char *rcd, int nbytes)
    prints out a single Steim compressed miniseed record

private int itr2ext ( int *in, int nsamp, Wftype *type, void **out, int *sZout, int *outbytes )
    convert from ints to external representation

private int tr2ext ( Trsample *in, int nsamp, Wftype *type, void **out, int *sZout, int *outbytes )
    convert from floats to external representation

private int tr2gpl ( Dbptr tr, Dbptr *tr_stachan, Tbl *gpl_tbl, double *t0, double *t1 )
    convert from trace table to gpl trace list

private int trgetSEEDwf ( char *seed, int size, double samprate, int nsamp, double time0, int samp0, int nrequest, float *dest )
    read samples from a SEED volume

private void gaps2tr ( Trsample *data, int nsamp, char *datatype )
    replace marked gaps with t4 gap value

private void tr2gaps ( Trsample *data, int nsamp, char *datatype )
    replace t4 gap value with fill value for datatype

private int trwfnew ( Wfdisc *wfdisc )
    create a new wfdisc record

private int trwfhdr ( Wfdisc *wfdisc, void *data, int nsamp )
    create any necessary file header (eg, a SAC header)

private int trwfdata ( Wfdisc *wfdisc, Trsample *data, int nsamp )
    place data into waveform file associated with wfdisc

private int trwf2disc ( Wfdisc *wfdisc, char *data, int nbytes, int nsamp )
    attempts to write the specified data to disc

private int trwftail ( Wfdisc *wfdisc, void *data, int nsamp )
    create any necessary file trailer (eg, an AutoDRM checksum)

private int trwfclose ( Wfdisc *wfdisc )
    close a wfdisc record


<subsection Filters>
int trfilter(Dbptr tr, char *f)
    apply time-domain filters f to trace data tr

int trfilter_segs(int n, int *nsamp, double *dt, float **data, char *f)
    apply time-domain filters f to n waveform segments

int trfilter_pkt(int nsamp, double dt, float *data, char *f, Hook **hook)
    apply time-domain filters f to data, retaining state in hook

int trrotate ( Dbptr tr, double phi, double theta, char **newchan )
    rotate three component data

int rotate_to_standard ( Dbptr tr, char **newchan )
    rotate three component data to standard orientation


int trapply ( Dbptr tr, int (*filter) (), void *pvt )
    apply filter routine to each waveform segment

int trapply_calib ( Dbptr tr )
    multiply waveform data in trace object by calib value


int trdemean ( Dbptr tr )
    subtract mean (DC) value from trace

int trdemean_seg ( Dbptr tr )
    subtract mean (DC) value from trace segment


int trderiv ( Dbptr tr )
    compute derivative of trace data

int trintegral ( Dbptr tr )
    integrate waveform segments

<subsection Utilities>
int trclip ( double time, double samprate, int nsamp, double from, double until, int *pt0, int *npts, double *t0, double *t1 )
    find sample range corresponding to time range


int trsplit ( Dbptr tr, int (*fill) (), int (*findbad) () )
    break up waveform records, eliminating marked missing data

int trsplice1 ( Dbptr tr, int factor_calib, double tolerance, int (*fill)(Dbptr *dbp, Trsample *data, int *i0, int *i1, int *imaxp), int (*resample)() )
    splice together any data segments which fit together, eliminating overlapping portions. 
    don't splice sections with different calibs together if factor_calib is 0.

int trsplice ( Dbptr tr, double tolerance, int (*fill)(Dbptr *dbp, Trsample *data, int *i0, int *i1, int *imaxp), int (*resample)() )
    splice together any data segments which fit together, eliminating overlapping portions. 
    splice sections with different calibs together, multiplying later values by the ratio of calibs.

int trglue ( Dbptr tr, int ns, int ne, double tolerance, int (*fill)(), int (*resample)() )
    unconditionally splice together a specific set of traces from a trace table; gaps are filled with the missing data value


double traligned ( double atime, double std_time, double std_samprate )
    returns a time properly aligned with a specific time and sample rate


void trfill_gap ( Trsample *data, int nsamp )
    fills a data segment with the 'standard' "t4" gap value


deprecated int trcontiguous ( Trseg *prv, Trseg *cur, double tolerance )
    test for contiguousness of waveform segments


deprecated int trsamerate ( Trseg *prv, Trseg *cur, double tolerance )
    test for sample rate match of waveform segments

deprecated int trsameticks ( Trseg *prv, Trseg *cur, double tolerance )
    test for match of sampling

int wfchanid ( Dbptr *db )
    lookup chanid for a wfdisc record in the sensor or sitechan table


private int trdatacode ( char *datatype )
    get index of waveform type corresponding to two character datatype

private char *trdatatype ( int datacode )
    get datatype from waveform type

int trlookup_segtype(char *segtype, char **units, char **desc)
    returns units and description for a segtype code

Wftype *trwflist ( int i )
    return the i'th waveform type

Wftype *trwftype ( char *datatype )
    get waveform type structure for specified type


<subsection Convenience Macros>
double ENDTIME ( t0, samprate, nsamp )
    return endtime based on input parameters

int NSAMP ( t0, samprate, endtime )
    return number of samples based on input parameters

double SAMP2TIME ( t0, samprate, n )
    return a sample time given a sample index

double SAMPRATE ( t0, nsamp, endtime )
    return samprate based on input parameters

int TIME2SAMP ( t0, samprate, t1 )
    return a sample index given a time


int TRCONTIGUOUS(t0, t1, samprate, nsamp)
    test whether a segment of nsamp samples beginning at
    t0 with sample rate samprate abut to t1, within
    the tolerance specified in trdefaults.pf.

int TRSAMERATE(samprate0,samprate1)
    test whether certain values of sample rate are the same
    to within the tolerance specified in trdefaults.pf.

int TRSAMETICKS(t0,t1,samprate)
    test whether two values of time are on the same
    tick marks, within the tolerance specified in trdefaults.pf.

int TRSAMETIME(t0,t1,samprate)
    test whether two values of time are the same
    to within the tolerance specified in trdefaults.pf.

