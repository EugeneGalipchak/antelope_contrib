<chapter>
Fortran Interface


<subsection>
Database Operations
<options>
include "db.i"
integer db(4)
char record(*)
character table_name, field_name
character s
# expression is used as a holder for a pointer to a compiled expression
integer expression 
integer type
# pattern1 and pattern2 are holders for pointers to Tbl lists
integer pattern1, pattern2, nojoin
integer outer
character name(*)

<fdeclarations>
integer dbadd ( db, record )
    add a record to a table

integer dbadd_remark ( db, remark )
    add a remark to CSS database tables

integer dbaddv ( db, table_name, field_name, value1, ... )
    write values to fields in a new database row

integer dbcrunch ( db )
    crunch out null rows in database

integer dbdelete ( db )
    delete rows from database tables

integer dbdestroy ( db )
    remove all base tables for a database

integer dbex_compile ( db, s, expression, type )
    compile a database expression

integer dbex_eval ( db, expression, setflag, result )
    evaluate a database expression for a record

integer dbex_free ( expression )
    free memory for a database expression

integer dbextfile ( db, tablename, filename )
    compose filename from database record

integer dbget ( db, s )
    get ascii tables, records, or fields from a database

integer dbget_remark ( db, remark )
    get a remark from CSS database tables

integer dbgetv ( db, table_name, field_name, value1, ... )
    read values from fields in a database

subroutine dbjoin ( dbresult, db1, db2, pattern1, pattern2, outer, nojoin, name )
    join two database tables

subroutine dblookup ( dbr, db, database, table, field, record )
    lookup database pointer indexes from ascii names

integer dbmark ( db )
    mark rows for deletion

integer dbnextid ( db, name )
    generate unique id from the lastid table

integer dbopen ( name, opentype, db )
    open a database

integer dbopen_database ( name, opentype, db )
    open a database or table pathname

integer dbopen_table ( name, opentype, db )
    open a database or table

integer dbput ( db, s )
    put ascii tables, records, or fields into a database

integer dbputv ( db, table_name, field_name, value1, ... )
    write values to fields in a database

subroutine dbquery ( db, code, value )
    get ancillary information about a database

subroutine dbsort ( result, db, tbl, flag, name )
    create a sorted view

subroutine dbsubset ( result, db, s, name )
    create a subset view

integer dbtruncate ( db, nrows )
    truncate a database table to specified length

integer dbunjoin ( db, database_name, rewrite )
    create new tables from a joined table

subroutine trgetwf ( db, 0, data, NMAX, t0_req, t1_req, t0, t1, npts, fill, fill_value )
    read trace data from file into memory

<subsection>
Spatial Transformations
<fdeclarations>
subroutine dist ( lat1, long1, lat2, long2, *delta, *azimuth )
    compute angular distance and azimuth between two points (all in radians)

subroutine latlon ( lat1, long1, del, azimuth, *lat2, *long2 )
    compute lat and long given starting point and distance (all radians)

<subsection>
Time Transformations

subroutine doy2mday ( doy, year, month, day )
    convert day of year to month and day

subroutine e2h ( epoch, iyear, iday, ihour, imin, sec )
    split epoch time into output components

real *8 epoch ( yearday )
    convert yearday to epoch time

subroutine epoch2str ( s, e, f )
    convert epoch time to formatted string

real*8 h2e ( year, day, hour, min, sec )
    convert input parameters to epoch time

integer mday2doy ( year, month, day )
    convert month and day to day of year

double now (  )
    return current epoch time

real *8 str2epoch ( s )
    convert string to epoch time

subroutine strdate ( s, e )
    convert epoch time to string date

subroutine strtime ( s, e )
    convert epoch time to string time

integer yearday ( e )
    convert epoch time to yearday


<subsection>
Error Handling

<fdeclarations>
subroutine clear_register ( printflag )
    clear the error register

subroutine complain ( sysflag, msg )
    log an error message and print

subroutine die ( sysflag, msg )
    log an error message and die

subroutine register_error ( sysflag, msg )
    register an error message

<subsection>
General Programming Utilities

<fdeclarations>
subroutine datafile ( pathname, envname, filename )
    Find a program's datafile

subroutine datapath ( pathname, envname, dirname, filename, suffix )
    Find a program's data file based on pathname components

subroutine isort ( a, n, size, compare, private )
    insertion sort routine

integer newdata ( pathname, envname, dirname, filename, suffix )
    Construct pathname for a new datafile

subroutine shellsort ( a, n, size, compare, private )
    shell sort implementation

integer ssearch ( key, keysize, a, n, unique, compare, private, ns, ne )
    binary search of index
<subsection>
Niceplot

<fdeclarations>
subroutine axis ( xdim, ydim, xmarg, ymarg, xlow, ylow, xmax,  xmin, ymax,  ymin,  dxsmal, dxnumb, dysmal, dynumb, fmtx, fmty, labelx, labely, title, iclear )
    Draw a box with tic marks and labels

subroutine box ( xleft, xright, ybot, ytop, thick, ithick, iclip )
    draw a box

subroutine cfont ( integer jfont )
    change font

subroutine chrdir ( real angle )
    change text labelling direction

subroutine chrsiz ( height, ratio, slant )
    change size and slant of text labelling

subroutine circle ( xc, yc, r, narc, iclose, iclip, thick, ithick )
    draw a circle

subroutine clear (  )
    clear the window

subroutine clrrgn ( xmn, xmx, ymn, ymx )
    clear a region in the window

subroutine cpyrgn ( xmn, xmx, ymn, ymx )
    copy a region from the pixmap to the window

subroutine cursor ( x, y, chr )
    reads in the cursor position upon keypress

subroutine finitt (  )
    finish plotting

subroutine fplot ( n, x, y )
    fast plotting routine

subroutine getchr ( c, nstrks, npoint, ioff, ix, iy )
    compute the outline of a character

subroutine getsiz ( c, ihite, iwidth )
    compute the size of a character

subroutine initt ( itran, plotfile, display, program, ssize, xwin, ywin )
    initialize window

subroutine laxis ( xdim, ydim, xmarg, ymarg, xlow, ylow, xmax, xmin, ymax, ymin, dysmal, dynumb, fmty, labelx, labely, title, iclear )
    draw log-linear axes

subroutine line ( x1, y1, x2, y2, thick, ithick, iclip )
    draw a line

subroutine llaxis ( xdim, ydim, xmarg, ymarg, xlow, ylow, xmax, xmin, ymax, ymin, labelx, labely, title, iclear )
    draw log-log axes

subroutine ltype ( integer n )
    set line type
<options>
0 - solid
1 - dotted
2 - dot-dashed
3 - short-dashed
4 - long-dashed
</options>

<fdeclarations>
subroutine ncontour ( nx, nxmax, ny, x, y, z,  ctype,  zmin,  zmax, dz )
    render a contour map

subroutine nplot ( n, x, y, igraf, iclip, thick, ithick, asymb )
    plot a set of points

subroutine ntype ( xtype, ytype )
    define plot scales

subroutine plot1 ( n, x, y, roff, iclip )
    plot a curve

subroutine sclsiz ( real*4 scale )
    scale character sizes

subroutine setbac ( hue, light, sat )
    set background color

subroutine setbg ( character *(*) color )
    set background color

subroutine setcursor ( type, param1, param2 )
    set the appearance of the graphics cursor

subroutine setdim ( xdim, ydim, xlow, ylow )
    set plotting area dimensions

subroutine setfg ( character *(*) color )
    set foreground color

subroutine setfor ( hue, light, sat )
    set foreground color

subroutine setscl ( xmin, xmax, ymin, ymax )
    set plotting area scaling

subroutine text ( x, y, angle, iref, string, iclip )
    plot a text string

subroutine tics ( x1, y1, x2, y2, stic, ntic, dtic, tlen, thick, idir )
    plot tic marks

subroutine trackcursor ( external callback(x, y) )
    executes callback routine when cursor is moved

subroutine trackcursoroff (  )
    disables cursor tracking callback routine

subroutine xmap ( real x )
    convert from plotting to raster units

subroutine ymap ( real y )
    convert from plotting to raster units
<subsection>
Ordered Lists

<fdeclarations>
integer maxtbl ( itbl )
    return the number of elements in a list

subroutine strfreetbl ( itbl )
    free memory associated with a list

subroutine strgettbl ( itbl, i, s )
    copy the i'th string from a list to a FORTRAN string

subroutine strputtbl ( itbl, i, s )
    copy a string to the i'th element of a list

subroutine strtbl ( itbl, s, ... )
    Create a new list from a list of strings

<subsection>
Parameter Files

<fdeclarations>
subroutine pfcompile ( string, pf, retcode )
    read a parameter file from a string

subroutine pffree ( pf )
    free resources for a parameter space

subroutine pfget ( pf, name, result, retcode )
    get a value from a parameter file

subroutine pfget_arr ( pf, name, iresult )
    get an associative array from a parameter file

subroutine pfget_boolean ( pf, name, iresult )
    get a boolean value from a parameter file

subroutine pfget_double ( pf, name, fresult )
    get a double precision value from a parameter file

subroutine pfget_int ( pf, name, iresult )
    get an integer value from a parameter file

subroutine pfget_string ( pf, name, svalue )
    get a string value from a parameter file

subroutine pfget_tbl ( pf, name, iresult )
    get an ordered list from a parameter file

subroutine pfnew ( type, result )
    start a new parameter space

subroutine pfput ( pf, name, value, type )
    put a value into a parameter space

subroutine pfput_arr ( pf, name, value )
    put an associative array into a parameter space

subroutine pfput_boolean ( pf, name, value )
    put a boolean value into a parameter space

subroutine pfput_double ( pf, name, fvalue )
    put a double precision value into a parameter space

subroutine pfput_int ( pf, name, value )
    put an integer value into a parameter space

subroutine pfput_string ( pf, name, svalue )
    put a string value into a parameter space

subroutine pfput_tbl ( pf, name, value )
    put an ordered list into a parameter space

subroutine pfread ( name, pf, retcode )
    read a parameter file

subroutine pfwrite ( pf, filename, retcode )
    write a parameter file object to the specified file
<subsection>
Seismic Information

<fdeclarations>
integer arrtimes ( delta, depth, phases, times )
    returns all the calculated phases

integer grname ( grn )
    Return the name of a Flinn-Engdahl geographic region

integer grnumber ( lat, lon )
    Return the Flinn-Engdahl geographic region number

real*8 phasetime ( phase, delta, depth )
    returns the time for a specified phase

real*8 ptime ( delta, depth )
    returns the first P arrival

integer srname ( srn )
    Return the name of a Flinn-Engdahl seismic region

integer srnumber ( grn )
    Return the Flinn-Engdahl seismic region number

real*8 stime ( delta, depth )
    returns the first S arrival


