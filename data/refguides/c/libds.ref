<library>
Database Operations
ds
tttaup response $(STOCKLIBS)
DBLIBS
db.h
implements the Datascope relational database system

<structures>
typedef struct Dbptr {
    long database ;
    long table ;
    long field ;
    long record ;
} Dbptr ;

<subsection Opening/Closing a Database>
<cdeclarations>

int dbopen ( char *path, char *p, Dbptr *db )
    open database path with permission p ("r" or "r+"), return database pointer db

long dbopen_database ( char *path, char *p, Dbptr *db )
    open database or table path, return database pointer db

long dbopen_table ( char *path, char *p, Dbptr *db )
    open table path, return database pointer db

Dbptr dblookup ( Dbptr db, char *d, char *t, char *f, char *r)
    return database pointer for database d, table t, field f, and first 
    row where field f==r

int dbcreate(char *path, char *schema, char *dbpath, char *description, char *detail)
    create new database descriptor file path 

Dbptr dbtmp(char *schema)
    create temporary database using schema

int dbclose ( Dbptr db )
    close database db

<subsection Adding and Retrieving Values>
<cdeclarations>
long dbadd ( Dbptr db, char *r )
    add row r to table db, return new record number

long dbadd_remark ( Dbptr db, char *r )
    add comment r to CSS table db

long dbaddnull ( Dbptr db )
    add null row to table db

long dbaddv ( Dbptr db, char *t,  char *f1, v1, ... NULL )
    add new row to table db/t, with values v1,...  for
    corresponding fields f1, ...  ; terminate list with zero.  return
    record number of new row (or existing matching row), 
    or negative result if no row can be added 

int dbget ( Dbptr db, char *s )
    get row (or field or whole table) from database into s

int dbgetv ( Dbptr db, char *t, char *f1, &v1, ... NULL )
    read values from row db/t for fields f1, ..., return corresponding
    values in v1, ...; terminate list with NULL.  return -1 if
    problem occurs.

int dbget_remark ( Dbptr db, char **remark )
    get comment from row db of CSS tables, into new string remark

int dbput ( Dbptr db, char *s )
    put row (or field or whole table) from s into database/table/field/row db

int dbputv ( Dbptr db, char *t, char *f1, v1, ... NULL)
    write values v1, ... to corresponding fields f1, ... in database row db.
    terminate list with zero.

int dbselect ( Dbptr db, Tbl *l, FILE *f)
    for each row in view db or range (db.record to db.field), 
    print value of expressions in list l to file f.

<subsection Removing and Deleting Rows>
<cdeclarations>
int dbdelete ( Dbptr db )
    delete row db from view

int dbmark ( Dbptr db )
    mark row db by setting all fields to NULL value

int dbcrunch ( Dbptr db )
    remove marked (all null) rows from table db

int dbtruncate ( Dbptr db, long n)
    truncate table db to first n rows

int dbdestroy ( Dbptr db )
    remove descriptor file and each table in database db.

<subsection Manipulating and Saving Views>
<cdeclarations>
Dbptr dbsubset ( Dbptr db, char *s, char *name )
    create new view with rows from db which satisfy expression s

Dbptr dbjoin ( Dbptr db1, Dbptr db2, Tbl **keys1, Tbl **keys2, int outer, Tbl **nojoin, char *name )
    return new joined view from two input views db1 and db2.
    Uses keys keys1 and keys2, or inferred join keys.
    Return join keys used and list nojoin of db1 rows which did not join.
    Setting outer causes every row in db1 to appear in 
    output view, joined to null record for db2 if necessary.

int dbfind_join_keys (Dbptr db1, Dbptr db2, Tbl **keys1, Tbl **keys2)
    returns keys for join between db1 and db2

Dbptr dbnojoin ( Dbptr db1, Dbptr db2, Tbl **keys1, Tbl **keys2, char *view_name )
    return view of rows from view db1 which do not match row in view db2.

long dbmatches ( Dbptr db1, Dbptr db2, Tbl **keys1, Tbl **keys2, Hook **hook, Tbl **t )
    return in t list of row from db2 matching row db1.  hook is 
    used by dbmatches for specific join; it must =zero at first call,
    is freed with free_hook when done.

Dbptr dbtheta ( Dbptr db1, Dbptr db2, char *s, int outer, char *name )
    return joined view of rows from db1 and db2 where expression s,
    evaluated against trial join of two rows, is non-zero.

Dbptr dbseparate ( Dbptr db, char *tablename )
    creates new subset of base table tablename, containing
    only rows which participate in input view db

Dbptr dbsever ( Dbptr db, char *t, char *name )
    remove table t from joined view db, return new view

Dbptr dbsort ( Dbptr db, Tbl *t, int f, char *name )
    sort input view db according to list t of fields or expressions;
    sort uniquely if f & dbSORT_UNIQUE is true; reverse sort order if
    f & dbSORT_REVERSE is true.

Dbptr dbgroup ( Dbptr db, Tbl *fields, char *name, long type )
    return view in which each row references groups of 1 or more 
    adjacent rows of input view db, where all fields in list 
    for each group are identical.

Dbptr dbungroup(Dbptr db, char *name)
    return view containing all rows referenced in input grouped view db

Dbptr dbprocess ( Dbptr db, Tbl *operations, Dbptr (*unknown)() )
    construct new view using list of operations, which may include:
    dbopen, dbjoin, dbgroup, dbleftjoin, dbnojoin, 
    dbselect, dbseparate, dbsever, dbsort, dbsubset, dbtheta, dbungroup

Dbptr dblist2subset ( Dbptr db, Tbl *t )
    convert list t of rows for view db to subset view

int dbread_view ( FILE *f, Dbptr *db, char *name )
    read database view from open file f, return new
    database pointer in db.  Return dbINVALID if unsuccessful.

int dbwrite_view ( Dbptr db, FILE *f )
    write database view db to open file f.

int dbsave_view ( Dbptr db )
    save database view db to file named according to view and database name

int dbunjoin ( Dbptr db, char *name, int rewrite )
    using base table rows referenced in view db, write new 
    tables (files) to an output database name. fails if any output tables are
    already present, unless rewrite is non-zero, in which case old tables
    are replaced.

int dbuntangle ( Dbptr db, Arr **a )
    return an array a indexed by table with lists of rows present
    in view db 

void dbfree_untangle ( Arr *a )
    free array a of lists of rows returned by dbuntangle

int dbfree ( Dbptr db )
    free space taken by database view: specify db.table.  base tables
    and views referenced by other views should not be freed.

Dbptr dbbase (Dbptr db, char *table)
    returns the base table dbptr for a record of a join/subset/sort view

void dbget_range ( Dbptr db, long *s, long *e )
    get row number range from grouped view bundle pointer

int dbcopy ( Dbptr dbin, Dbptr dbout, Arr *expressions )
    copy rows field by field from table dbin to table dbout, translating
    fields as indicated by array expressions.

private int dbupdate_index ( Dbindex *dbindex )
    force your copy of database indices to be updated

<subsection Evaluating Database Expressions>
<cdeclarations>
int dbex_compile ( Dbptr db, char *s, Expression **e, int type )
    compile string s as database expression, return compiled
    representation e.  type may be dbBOOLEAN, dbINTEGER, dbREAL, 
    dbTIME, dbYEARDAY, or dbSTRING (forcing result type) or 0
    letting result type be dictated by expression

int dbex_eval ( Dbptr db, Expression *e, int f, void *v )
    evaluate expression e for database row db.  If flag f is non-zero,
    allow expression to change field values in row.

int dbex_free ( Expression *e)
    free database expression e

int dbex_evalstr ( Dbptr db, char *s, int type, void *v )
    evaluate string s as an expression for database
    row db, convert result to type, return result v 

long dbfind(Dbptr db, char *string, int flags, Hook **hook)
    search for row matching string in view db, where string is regular expression, Datascope expression, or plain string.  if flags&1, search backward.

int dbstrtype ( Dbptr db, char *s )
    return strREAL, strINTEGER, strNULL, strSTRING, strTIME, strEXPR, 
    strFIELD, or strUNKNOWN, indicating how s might be evaluated

<subsection External Files>
<cdeclarations>
int dbextfile ( Dbptr db, char *table, char *p )
    compose path p using dir and dfile from database row db; specify table 
    when view db contains multiple tables with dfile.

int dbfilename ( Dbptr db, char *filename )
    compose filename from dir/dfile in database row db, creating directories if needed 

<subsection Managing Ancillary Information>
<cdeclarations>
int dbquery ( Dbptr db, int code, void *value )
    return variety of information for database pointer db (see Datascope Constants)

Tbl * dbtables ( Dbptr db, char *f)
    return list of tables which use field f

int dbcompile ( Dbptr db, char *s )
    compile some fragment of schema, to add new relations and perhaps attributes 
    to schema

Dbptr dbinvalid ()
    return database pointer with all elements set to dbINVALID

long dbnextid ( Dbptr db, char *name )
    generate unique id for field name of database db
