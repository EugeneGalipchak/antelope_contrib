package require Brttplot
package require Datascope

lappend auto_path $env(ANTELOPE)/data/tcl/library
catch { package require Tclx}

global zooming
global default_cursor
set zooming 0

proc Postscript { printout } {
	
	global pagewidth_mm
	global pageheight_mm
	global pagemargin_mm
	global psfilename
	global printcmd
	if ($printout) {
		set fn [format "/tmp/mg_%d.ps" [pid]]
	} else {
		set fn $psfilename
	}
	set pw [expr $pagewidth_mm - 2 * $pagemargin_mm]
	set pagey [expr $pageheight_mm - 5 * $pagemargin_mm]

	set cw [.f.c cget -width]
	set ch [.f.c cget -height]
	
	set cmd [format ".f.c postscript -file %s -pagewidth %dm -pageanchor nw -pagex %dm -pagey %dm -width %d -height %d -x 0 -y 0" \
		$fn $pw $pagemargin_mm $pagey $cw $ch]
	eval $cmd
	if ($printout) {
		catch {system $printcmd $fn >/dev/null} dummy
		catch {file delete $fn}
	}
}
proc normalize {} {
	global mapcenter_lat
	global mapcenter_lon	
	global mrange
	global prange

.f.c itemconfigure vp -latr $mapcenter_lat -lonr $mapcenter_lon \
   	-xleft $mrange -xright $prange -ybottom $mrange -ytop $prange

}

proc toggle_labels { tagname } {
	global default_cursor
	.f.c config -cursor watch
	set cswitch [.f.c itemcget $tagname -showtext]
	if {$cswitch} {
	   set cswitch 0
	} else {
	   set cswitch 1
	}
	.f.c itemconfigure $tagname -showtext $cswitch
	.f.c config -cursor $default_cursor
}
proc start_stroke { x y } {
	global zoomx1
	global zoomy1	
	global zooming 
	global default_cursor
	set zooming 1
	set zoomx1 $x
   	set zoomy1 $y
	catch {
		.f.c addtag zoomarea withtag [.f.c create rectangle $x $y $x $y -outline black] 
	}
	.f.c config -cursor crosshair
}
proc end_stroke { x y } {
	global zoomx1
	global zoomy1	
	global zooming
	global default_cursor
	set zooming 0
	catch {
		.f.c delete zoomarea
	}
	set vp "vp" ;#[getvp $x $y]

	set xy [getviewportwcoords $vp $zoomx1 $zoomy1]
	set lon1 [lindex $xy 0]
	set lat1 [lindex $xy 1]
	set xy [getviewportwcoords $vp $x $y]
	set lon2 [lindex $xy 0]
	set lat2 [lindex $xy 1]

	set latr [expr 0.5*($lat1+$lat2)]
	set lonr [expr 0.5*($lon1+$lon2)]

	set latd [expr abs($latr - $lat1)]
	set mlatd [expr 0 - $latd]
	set lond [expr abs($lonr - $lon1)]
	set mlond [expr 0 - $lond]

	.f.c itemconfigure $vp -latr $latr -lonr $lonr -xleft $mlond -xright $lond -ybottom $mlatd -ytop $latd
	.f.c config -cursor $default_cursor

}

#    this procedure will locate a canvas coordinate
#    in a particular viewport
proc invp {vptag x y} {
	set bb [.f.c bbox $vptag]
	set x0 [lindex $bb 0]
	set y0 [lindex $bb 1]
	set x1 [lindex $bb 2]
	set y1 [lindex $bb 3]
	if {$x > $x0 && $x < $x1 && $y > $y0 && $y < $y1} {
		return 1
	} else {
		return 0
	}
}

#    this procedure will move the edp viewport
#    map reference lat-lon to the antipode
proc antipodemap {x y} {
	if {[invp vp $x $y] != 1} {
		return
	}
	set latr [.f.c itemcget vp -latr]
	set lonr [.f.c itemcget vp -lonr]
	set latr [expr -$latr]
	set lonr [expr $lonr+180.0]
	while {$lonr >  180.0} {set lonr [expr $lonr-360.0]}
	while {$lonr < -180.0} {set lonr [expr $lonr+360.0]}
	.f.c itemconfigure vp -latr $latr -lonr $lonr
}

#    this procedure will display the current
#    position of the mouse in units of latitude
#    and longitude
proc stroke {x y} {
	global zoomx1
	global zoomy1	
	global zooming
	if ($zooming) {
		catch {
			.f.c delete zoomarea
		}
		catch {
			.f.c addtag zoomarea withtag [.f.c create rectangle $zoomx1 $zoomy1 $x $y -outline black] 
		}
	}
	global latlon
	set vp "vp" ;#[getvp $x $y]

	# getviewportwcoords is a tcl extension that
	# maps canvas coordinates into world coords
	set xy [getviewportwcoords $vp $x $y]
	set lon [lindex $xy 0]
	set lat [lindex $xy 1]

	if {$lat < 0.0} {
		set lat [format "S%06.3f" [expr -$lat]]
	} else {
		set lat [format "N%06.3f" $lat]
	}
	if {$lon < 0.0} {
		set lon [format "W%07.3f" [expr -$lon]]
	} else {
		set lon [format "E%07.3f" $lon]
	}
	set latlon "$lat $lon"
}

#    this procedure will move (pan) the edp viewport
#    map reference lat-lon to a point specified by
#    a canvas coordinate
proc panmap {x y} {
	set vp "vp" ;#[getvp $x $y]

	set xy [getviewportwcoords $vp $x $y]
	set lon [lindex $xy 0]
	set lat [lindex $xy 1]

	.f.c itemconfigure vp -latr $lat -lonr $lon
}

#    this procedure will zoom in/out either of the 
#    map viewports according to a factor. The x y
#    canvas coordinate is used to determine which
#    viewport to zoom.
proc zoommap {x y factor} {
	set vp  "vp" ;#[getvp $x $y]
 
	set xl [.f.c itemcget $vp -xleft]
	set xr [.f.c itemcget $vp -xright]
	set yb [.f.c itemcget $vp -ybottom]
	set yt [.f.c itemcget $vp -ytop]

	set xc [expr 0.5*($xl+$xr)]
	set yc [expr 0.5*($yb+$yt)]

	set xl [expr $xl - $xc]
	set xr [expr $xr - $xc]
	set yb [expr $yb - $yc]
	set yt [expr $yt - $yc]

	set xl [expr $xc + $factor*$xl]
	set xr [expr $xc + $factor*$xr]
	set yb [expr $yc + $factor*$yb]
	set yt [expr $yc + $factor*$yt]

	.f.c itemconfigure $vp -xleft $xl -xright $xr -ybottom $yb -ytop $yt
}

#    this procedure will set a color specification
#    for transforming a depth value into a color
proc setcolor {depth} {
	set symlit 0.75
	set hue [expr 240.0*(1.0-($depth/600.0))]
	return [format "%.1f:%s:1.0" $hue $symlit]
}

#    set overall sizes, margins and positions

proc usage {} {
	global argv0
	puts "Usage $argv0 \[-pf pfname\] \[-ps filename\] \[-dboverlay database.table \] database\[.table\] \[record\]"
	exit
}

set subset_recno 0
set use_db2 0

set Pf dbmap_gui
set range 10			;#degrees
set psfilename /tmp/dbmap_gui.ps

if { $argc < 1 || $argc > 6 } { 
	usage 
} 
set plot_stations 0
set station_labels 0
for { set i 0;set used 0} {$i < [expr $argc -2]} {incr i} {
	switch -- [lindex $argv $i] {
		-pf {
			set Pf [lindex $argv [expr $i + 1]]
			incr i
			incr used 2
		}
		-ps {
			set psfilename [lindex $argv [expr $i + 1]]
			incr i
			incr used 2
		}
		-dboverlay {
                        set use_db2 1
						set db2_name [lindex $argv [expr $i + 1]]
						incr i
						incr used 2
		}
	}
}

set pagewidth_mm [pfget $Pf pagewidth_mm]
set pageheight_mm [pfget $Pf pageheight_mm]
set pagemargin_mm [pfget $Pf pagemargin_mm]
set printcmd [pfget $Pf printcmd]
set dot_color [pfget $Pf dot_color]
set label_color [pfget $Pf label_color]
set circle_color [pfget $Pf circle_color]
set overlay_dot_color [pfget $Pf overlay_dot_color]
set overlay_label_color [pfget $Pf overlay_label_color]
set overlay_circle_color [pfget $Pf overlay_circle_color]
set range_degrees [pfget $Pf range_degrees]
pfgetarr tables @$Pf#tables
set table_names [array names tables]
foreach table $table_names {
	set label($table) [pfget $tables($table) label]
	set dummy [pfget $tables($table) circle]
	if  { $dummy != "" } {
		set circle($table)	$dummy
	} else {
		set circle($table) 0
	}
}

set dbname [lindex $argv $used]
incr used

set db [dbopen_database $dbname "r"]
if { [lindex $db 1] < 0 } {
    set db [dblookup $db 0 site 0 0]
}

if { $argc > [expr $used + 1] } {
	set recno [lindex $argv [expr $used + 1]]
	set subset_recno 1
} 

if { $use_db2 } {
	set db2 [dbopen_database $db2_name r]
	if { [lindex $db2 1] < 0 } {
		puts stderr "you must specify table for dboverlay"
		exit
	}
	set name2 [dbquery $db2 dbTABLE_NAME]
	if { [info exists label($name2)] } {
		set field2 $label($name2)
	} else {
		set field2 {}
	}
	if { [info exists circle($name2)] } {
		if { $circle($name2) != 0 } {
			set field3 $circle($name2)
		} else {
			set field3 ""
		}
	} else {
		set field3 ""
	}

}



if { $subset_recno } {
	set mapcenter_lat [dbgetv $db 0 $recno "lat"]
	set mapcenter_lon [dbgetv $db 0 $recno "lon"]
} else {
	set mapcenter_lat [dbeval $db "sum(lat)/count()"]
	set mapcenter_lon [dbeval $db "sum(lon)/count()"]
}

set database [dbquery $db dbDATABASE_NAME]
set db [dblookup $db 0 0 lat 0]
set name [dbquery $db dbFIELD_BASE_TABLE]

if { [info exists label($name)] } {
	set field $label($name)
} else {
	set field {}
}
if { [info exists circle($name)] } {
	if { $circle($name) != 0 } {
		set field1 $circle($name)
	} else {
		set field1 ""
	}
} else {
	set field1 ""
}


#set expr [format "evid==%d" $evid]
#set dbe [dbsubset $dbe $expr]
#set dbo [dblookup $db 0 origin 0 0]
#set dbe [dbjoin $dbe $dbo prefor#orid]
#set lat [dbgetv $dbe 0 0 lat]
#set lon [dbgetv $dbe 0 0 lon]
#set mapcenter_lat $lat
#set mapcenter_lon $lon
set prange $range_degrees
set mrange [expr 0 - $prange]

set width 700
set heighte $width
set mleft 40
set mright 40
set mbottomm 50
set mbottome 20
set mtopm 20
set mtope 5

set fwidth [expr $width+$mleft+$mright]
set fheighte [expr $heighte+$mtope+$mbottome]

set cwidth $fwidth
set cheight [expr $fheighte]

#    tell the window manager to not allow
#    interactive resizing - this display
#    will be fixed size
wm resizable . 0 0
#wm title . evmap
wm title . "$database $name"

#    create main frame
frame .f
#    this frame will contain the current mouse
#    position display
frame .f.t -background white
#    this is the canvas frame that will contain
#    the maps
canvas .f.c -width $cwidth -height $cheight

#    pack and place
grid configure .f.t -column 0 -row 0 -sticky nsew
grid configure .f.c -column 0 -row 1 -sticky nsew
grid configure .f -column 0 -row 0 -sticky nsew

grid rowconfigure .f 0 -weight 0
grid rowconfigure .f 1 -weight 1
grid columnconfigure .f 0 -weight 1

grid rowconfigure . 0 -weight 1
grid columnconfigure . 0 -weight 1

#    assign canvas bindings for mouse and
#    keyboard events
#    O,o  = zoom out
#    I,i  = zoom in
#    a    = move to antipode
#    p    = make postscript file
#    but1 = pan map
#    motion = display coords
bind .f.c <Any-Enter> "focus .f.c"
bind .f.c <p> "Postscript 0"
bind .f.c <P> "Postscript 1"
bind .f.c <O> "zoommap %x %y 2.0"
bind .f.c <o> "zoommap %x %y 1.25"
bind .f.c <I> "zoommap %x %y 0.5"
bind .f.c <i> "zoommap %x %y 0.8"
bind .f.c <a> "antipodemap %x %y"
bind .f.c <q> "destroy ."
if ($use_db2) {
	bind .f.c <L> "toggle_labels fields"
	bind .f.c <l> "toggle_labels overlay"
} else {
	bind .f.c <L> "toggle_labels fields"
	bind .f.c <l> "toggle_labels fields"
}
bind .f.c <n> "normalize"

bind .f.c <ButtonPress-2> "panmap %x %y"
bind .f.c <ButtonPress-1> "start_stroke %x %y"
bind .f.c <ButtonRelease-1> "end_stroke %x %y"
bind .f.c <Motion> "stroke %x %y"

#    setup widget for displaying current
#    mouse coordinates
set latlon "N00.000 E000.000"

#label .f.t.l -textvariable latlon -width 16 -font "helvetica 10 bold" -background white
label .f.t.l -textvariable latlon -width 16 -font "arial 10 bold" -background white
grid configure .f.t.l -column 0 -row 0 -sticky nsew

grid rowconfigure .f.t 0 -weight 1
grid columnconfigure .f.t 0 -weight 1

#    create viewport for EDP map
.f.c create viewport vp 0 0 \
		-wtran edp \
		-latr 0.0  -lonr 0.0 \
		-width $fwidth -height $fheighte \
		-xleft -90 -xright 90 \
		-ybottom -90.0 -ytop 90.0 \
		-mleft $mleft -mright $mright \
		-mbottom $mbottome -mtop $mtope \
		-fill_frame \#ecffec \
		-fill gray \
		-tag [list vp map]

#    create map for EDP map
.f.c create map vp \
		-resolution auto \
		-political 1:#ff0000:1,2:#00a000:0,3:#ff00ff:0 \
		-tag map  

#    put in axes labeling for EDP map
#    note that currently the axis number labeling
#    is disabled for EDP maps
.f.c create axes vp \
		-mindx	100 \
		-xincrement 30.0 \
		-yincrement 30.0 \
		-xincrement_small 5.0 \
		-yincrement_small 5.0 \
		-tag map

#    put in lat-lon grid lines for EDP map
.f.c create grid vp \
		-mindx	0 \
		-mindy	0 \
		-fill	darkgray \
		-fill_small	darkgray \
		-linewidth -1 \
		-linewidth_small 1 \
		-xincrement 30.0 \
		-yincrement 30.0 \
		-xincrement_small 5.0 \
		-yincrement_small 5.0 \
		-tag map

if ($use_db2) {
	set myoverlay [vector_create]

	set n [dbquery $db2 dbRECORD_COUNT]
	for {set i 0} {$i < $n} {incr i} {
		set lat [dbgetv $db2 0 $i lat]
		set lon [dbgetv $db2 0 $i lon]
		if [ cequal $field2 "" ] {
			vector_append $myoverlay -1 $lon $lat

		} else {

			set mylabel2 [dbgetv $db2 0 $i $field2]
#get rid of the curly brackect that are misinterpreted as overlay format specifications...
			regsub -all "{" $mylabel2 "" mylabel2
			regsub -all "}" $mylabel2 "" mylabel2
			set my_overlay [format "%s" $mylabel2]
			
			vector_append $myoverlay -1 $lon $lat $mylabel2
		}
	}

#    now we create polypoint items to show the origins
#    in each map
	.f.c create polypoint vp \
			-vector $myoverlay \
			-tags overlay \
			-symbol square \
			-showtext 1 \
			-font "helvetica 8" \
			-fill $overlay_dot_color \
			-textforeground $overlay_label_color \
			-outline "" \
			-size 3
		}
set myfields [vector_create]

if ($subset_recno) {
	set lat [dbgetv $db 0 $recno lat]
	set lon [dbgetv $db 0 $recno lon]
	if [ cequal $field "" ] {
		vector_append $myfields -1 $lon $lat
	} else {
		set mylabel [dbgetv $db 0 $recno $field]
#get rid of the curly brackets that are misinterpreted as label format specifications...
		regsub -all "{" $mylabel "" mylabel
		regsub -all "}" $mylabel "" mylabel
		set my_label [format "%s" $mylabel]
	}
} else {
	set n [dbquery $db dbRECORD_COUNT]
	for {set i 0} {$i < $n} {incr i} {
		set lat [dbgetv $db 0 $i lat]
		set lon [dbgetv $db 0 $i lon]
		if [ cequal $field "" ] {
			vector_append $myfields -1 $lon $lat
		} else {
			set mylabel [dbgetv $db 0 $i $field]
#get rid of the curly brackets that are misinterpreted as label format specifications...
			regsub -all "{" $mylabel "" mylabel
			regsub -all "}" $mylabel "" mylabel
			set my_label [format "%s" $mylabel]
			vector_append $myfields -1 $lon $lat $my_label
		}
	}
}

#    now we create polypoint items to show the origins
#    in each map
.f.c create polypoint vp \
		-vector $myfields \
		-tags fields \
		-symbol square \
		-showtext 1 \
		-font "helvetica 8" \
		-fill $dot_color \
		-textforeground $label_color \
		-outline "" \
		-size 3


#this is how we adjust the map to our needs
#set center		
.f.c itemconfigure vp -latr $mapcenter_lat -lonr $mapcenter_lon
#and set range
.f.c itemconfigure vp -xleft $mrange -xright $prange -ybottom $mrange -ytop $prange

set default_cursor [.f.c cget -cursor]
		
update idletasks
