.TH DBCENTRAL 1 "$Date$"
.SH NAME
dbcentral \- centralized utility to launch commands on commonly used databases
.SH SYNOPSIS
.nf
dbcentral [-n] [-t timestring] [-d] [database_clustername [task_nickname]]
.fi
.SH DESCRIPTION
Many institutions have a variety of databases which are commonly used
by researchers, analysts, lab personnel, field crew etc. These may be
single databases, such as site databases, or groups of databases with
standardized naming conventions (such as databases of earthquakes or
waveforms, which often have some kind of timestamp in their name). Even
for people who know where all of these are, for large enough installations
it can be a nuisance to keep track of them, and repeatedly type in the
full paths for common tasks (such as dbe(1)). Also, for people who do
not spend the majority of their waking hours in the institution's unix
filesystem, such as field personnel or perhaps visiting researchers,
constantly having to refresh their memory on database locations etc. can
slow down work. Dbcentral is intended to solve these problems.

The databases and database-clusters used at a site should be listed 
in a centralized database in the dbcluster0.5 or higher schema. This schema 
allows a \fIclustername\fP to be given to each related set of databases (the 
set may contain only one database for such standard administrative 
entities as site databases etc). Each row of the dbcluster database gives 
the time-range covered by a subset of the databases in that cluster that 
all follow a regular naming convention. The naming convention is given in the 
\fIdir\fP and \fIdfile\fP fields, using percent-escape characters understood 
by the \fIepoch2str\fP(3) command. The \fIclusters.volumes\fP field of the
dbcluster0.5 schema, described in more detail in the schema file itself (and 
therefore with explanation available through dbhelp(1)) is intended to 
support looping over clusters of databases that have regular volume sizes, 
alignments, and names, for example databases segmented day, week, month, or
year. Rows in the cluster database representing single databases will have 
this field set to \fIsingle\fP. The optional \fInet\fP field in the 
\fIclusters\fP table allows specific sensor network names to be given, 
if a cluster of databases is unique to one particular sensor network. 

A parameter file is set up once for the whole site, usually by system
operators responsible for creating and maintaining all the databases. This
parameter file contains the name of the centralized dbcluster database as 
well as the default tasks which are commonly run on them. This list 
of default tasks for a given database cluster may be overridden in the 
custom_tasks array as shown in the example below.  Each task should have a 
descriptive name for the task, then a unix command-line that will run 
the task. The DBNAME macro in this command-line will be replaced by the 
actual database name when dbcentral runs. 

When dbcentral is launched with no command-line options, it reads this
parameter file and cluster database and creates a GUI with one pull-down menu per
database cluster.
Each pull-down menu contains entries for the commands which may be run
on that cluster. In addition, a time-of-interest field is specified at
the top of the GUI window.  This time is used to interpret
database-name templates which depend on time.  The time-of-interest
field is initialized to be the launch time of the dbcentral program,
determined from the system clock. However, a different time may be
typed in by the user. Hitting 'return' in the entry box after changing
the time will normalize the time-string to the standard print format.
Any time string accepted by str2epoch(3) may be entered.

The dir and dfile fields of the dbcluster database are intended to be a
template for str2epoch(3), which
allows dbcentral to handle entire structures of databases with similar,
time-dependent names. For example, if the analyst-reviewed hypocentral
solutions are in day volumes, such as
.nf

	 /catalog/2002/138/quakes_2002_05_18

.fi
the corresponding database pathname in the cluster database (combining dir
and dfile) might be 
.nf

	/catalog/%Y/%j/quakes_%Y_%m_%d

.fi
The meaning of the percent-escape codes is listed in str2epoch(3). Given
this name template, dbcentral can use one description for the entire
class of databases, interpret the template according to the time of
interest specified in dbcentral, and hunt down the correct database.

The parameter file and supporting database for dbcentral may be useful far
beyond the dbcentral
GUI itself. Properly configured for the installation, 
these can allow automated processes to look up databases they need, rather 
than having them in their own parameter file.  For example, if a particular 
parameter file for some application has the entry
.nf

	site_database /Seis/databases/stations/master_stations

.fi
That may be replaced by a parameter-file execution of dbcentral:
.nf

	site_database &exec(dbcentral -d site_database)

.fi
(assuming, of course, that that site_database has been specified in 
the cluster database!).

If one holds down the middle mouse button over the database clustername, 
the fully resolved pathname (i.e. for the current time specification)
for that database is displayed. 

If one clicks the right mouse button on the database clustername, the 
first listed task is performed on the database. 

A Control-C in the dbcentral GUI window will kill the application. 

In addition to the GUI mode, launched with no arguments, dbcentral has 
a command-line mode for easy retrieval of and command-launches on common 
databases. If one of the database clustername is specified on the 
command line, the first task listed for that database is launched. A task 
nickname may be specified in addition to the database clustername, in which
case the specified task is launched. The -t option may be used to 
specify a time other than the current time to use in the database name 
template. Finally, the -d option may be used to retrieve absolute 
pathnames, and the -n option may be used to print a list of available database 
clusternames, or available task nicknames for a given database clustername. The -d 
option is useful in scripts and in other parameter files (via the &exec()
mechanism; see pf(3)). This allows common database pathnames to be 
centrally configured.

.SH OPTIONS
.IP -d
Show absolute pathname of database. A database clustername must 
be specified when using the -d option.

.IP -n
Show available database clusternames or task nicknames.

.IP -t
Specify a time-string interpretable by the epoch(1) command (default is "now"). 
A database clustername must be specified when using the -t option.

.SH FILES
.SH ENVIRONMENT
.SH PARAMETER FILE
.nf

home &env(HOME)
dbcentral_database &home/dbcentral

default_tasks &Tbl{
	dbe		dbe DBNAME
	dbe_editable	dbe -e DBNAME
}

custom_tasks &Arr{
	antelope_demo &Tbl{
		dbe		dbe DBNAME
		dbe_origin	dbe  DBNAME.origin 
		dbpick		xterm -e dbpick -nostarttalk DBNAME
		smartpick 	smartpick -nowait DBNAME
	}
}
.fi
.SH EXAMPLE
.ft CW
.in 2c
.nf
To create a demo cluster database:

% cat > ~/dbcentral
#
schema dbcluster0.5
%
% dbaddv ~/dbcentral.clusters <<EOF
? clustername antelope_demo
? time 4/27/92
? dir /opt/antelope/data/db/demo
? dfile demo
? net KNET
? volumes single
? schema css3.0
? % 


To launch the GUI application:

% dbcentral
% 

To launch dbe on the demo database, given the above parameter file:

% dbcentral antelope_demo

To launch dbpick on the demo database, given the above parameter file:

% dbcentral antelope_demo dbpick

To get the absolute pathname of the demo database:

% dbcentral -d antelope_demo
/opt/antelope/data/db/demo/demo

To get the currently-configured database clusternames:

% dbcentral -n

dbcentral database clusternames:


        antelope_demo


To get the currently configured task nicknames for the demo database:

% dbcentral -n antelope_demo

dbcentral command nicknames for antelope_demo:


        dbe

        dbe_origin

        dbpick

        smartpick

To get the pathname for PDE database containing data for Dec. 31, 1997, provided 
such a cluster is specified in the cluster database:

% dbcentral -t "12/31/97" -d pde

/space/pde/pde_1997

% 

.fi
.in
.ft R
.SH RETURN VALUES
.SH LIBRARY
.SH ATTRIBUTES
.SH DIAGNOSTICS
.nf
% dbcentral fake_clustername

dbcentral: No tasks defined for database 'fake_clustername'

% dbcentral antelope_demo fake_task

dbcentral: No task 'fake_task' defined for database 'antelope_demo'

.fi
.SH "SEE ALSO"
.nf
dbe(1), epoch(1)
.fi
.SH "BUGS AND CAVEATS"
The task-names in the parameter file may not contain spaces or other 
strange characters (see pf(5), even if quoted). This allows a simple
implementation in which the GUI menu items come up in the same order
as they are listed in the parameter file. Spaces may be used in 
a database clustername, providing the entire clustername is quoted.

Dbcentral does not check, after constructing a database name from the 
parameter-file template and the time specified in the GUI, whether 
the database actually exists or has any tables. The command of interest 
is blindly run on the pathname created. This is possibly a mistake. However,
because of the general nature of dbcentral, the templates and commands 
could just as easily be used for database creation as for running commands 
on pre-existing databases. Thus, no checking is done. One could always add
an existence check as one of the parameter-file entries.

dbcentral does not check to see whether the command succeeded.

One could arguably hard-wire dbcentral to always include a dbe(1) 
line for each database. Instead, this is left at the discretion of the
administrator. This allows the administrator to choose whether dbe 
comes up by default in editable mode ("-e" option to dbe).

dbcentral needs a -l mode to list the available databases in a cluster, 
looping over any volume segmentation in each cluster row and checking for the 
corresponding existing databases. 

dbcentral needs a -q mode to run dbprocess queries on all databases in a 
cluster. 
.SH AUTHOR
.nf
Kent Lindquist
Lindquist Consulting, Inc.
.fi
.\" $Id$
