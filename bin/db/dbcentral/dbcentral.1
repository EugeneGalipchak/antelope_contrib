.TH DBCENTRAL 1 "$Date$"
.SH NAME
dbcentral \- centralized GUI to launch commands on commonly used databases
.SH SYNOPSIS
.nf
dbcentral [-n] [-t timestring] [-d] [database_nickname [task_nickname]]
.fi
.SH DESCRIPTION
Many institutions have a variety of databases which are commonly used
by researchers, analysts, lab personnel, field crew etc. These may be
single databases, such as site databases, or groups of databases with
standardized naming conventions (such as databases of earthquakes or
waveforms, which often have some kind of timestamp in their name). Even
for people who know where all of these are, for large enough installations
it can be a nuisance to keep track of them, and repeatedly type in the
full paths for common tasks (such as dbe(1)). Also, for people who do
not spend the majority of their waking hours in the institution's unix
filesystem, such as field personnel or perhaps visiting researchers,
constantly having to refresh their memory on database locations etc. can
slow down work. Dbcentral is intended to solve these problems.

A parameter file is set up once for the whole site, usually by system
operators responsible for creating and maintaining all the databases. This
parameter file contains 'nicknames' for each database, such as 
site_database, real_time_hypocenters, pde_catalog, etc. For each
of these databases, the parameter file contains a name of the database,
plus an array of commands that may be run on that database. Generally it is 
the responsibility of the software administrator for a given site to 
maintain this parameter file for a given site, 
adding/removing/changing entries as necessary. Of course, individual users
can add their own databases to personal extensions of the dbcentral.pf 
parameter file.

dbcentral reads this parameter file and creates a GUI with one pull-down
menu per database. Each pull-down menu contains entries for the commands
which may be run on that database. In addition, a time-of-interest field 
is specified. This is used to interpret database-name templates which 
depend on time. The time-of-interest field is initialized to be the launch
time of the dbcentral program, determined from the system clock. However, 
a different time may be typed in by the user. Hitting 'return' in the entry 
box after changing the time will normalize the time-string to the standard 
print format. Any time string accepted by str2epoch(3) may be entered.

The database name is intended to be a template for str2epoch(3), which
allows dbcentral to handle entire structures of databases with similar,
time-dependent names. For example, if the analyst-reviewed hypocentral
solutions are in day volumes, such as
.nf

	 /catalog/2002/138/quakes_2002_05_18

.fi
 the corresponding database pathname in the parameter file might be 
.nf

	/catalog/%Y/%j/quakes_%Y_%m_%d

.fi
The meaning of the percent-escape codes is listed in str2epoch(3). Given
this name template, dbcentral can use one description for the entire
class of databases, interpret the template according to the time of
interest specified in dbcentral, and hunt down the correct database.

The parameter file for dbcentral may be useful far beyond the dbcentral
GUI itself. This parameter file, properly configured for the installation, 
can allow automated processes to look up databases they need, rather 
than having them in their own parameter file.  For example, if a particular 
parameter file for some application has the entry
.nf

	site_database /Seis/databases/stations/master_stations

.fi
That may be replaced by a reference to the central parameter file:
.nf

	site_database &ref(dbcentral,site_database{dbname_template})

.fi
(assuming, of course, that that site_database has been specified in dbcentral.pf!).

If one holds down the right mouse button over the database nickname, 
the fully resolved pathname (i.e. for the current time specification)
for that database is displayed. 

In addition to the GUI mode, launched with no arguments, dbcentral has 
a command-line mode for easy retrieval of and command-launches on common 
databases. If one of the database nicknames is specified on the 
command line, the first task listed for that database is launched. A task 
nickname may be specified in addition to the database nickname, in which
case the specified task is launched. The -t option may be used to 
specify a time other than the current time to use in the database name 
template. Finally, the -d option may be used to retrieve absolute 
pathnames, and the -n option may be used to print a list of available database 
nicknames, or available task nicknames for a given database nickname.
.SH OPTIONS
-d Show absolute pathname of database

-n Show available database nicknames or task nicknames 

-t Specify a time-string interpretable by the epoch(1) command (default is "now")
.SH FILES
.SH ENVIRONMENT
.SH PARAMETER FILE
.nf

antelope_demo &Arr{
	dbname_template	/opt/antelope/data/db/demo/demo
	tasks	&Tbl{
		dbe		dbe DBNAME
		dbe_editable	dbe -e DBNAME
		dbpick		xterm -e dbpick -nostarttalk DBNAME
		smartpick 	smartpick -nowait DBNAME
	}
}

.fi
.SH EXAMPLE
.ft CW
.in 2c
.nf
To launch the GUI application:

yukon% dbcentral
yukon% 

To launch dbe on the demo database, given the above parameter file:

yukon% dbcentral antelope_demo

To launch dbpick on the demo database, given the above parameter file:

yukon% dbcentral antelope_demo dbpick

To get the absolute pathname of the demo database:

yukon% dbcentral -d antelope_demo
/opt/antelope/data/db/demo/demo

To get the currently-configured database nicknames:

yukon% dbcentral -n

dbcentral database nicknames:


        antelope_demo


To get the currently configured task nicknames for the demo database:

yukon% dbcentral -n antelope_demo

dbcentral command nicknames for antelope_demo:


        dbe

        dbe_editable

        dbpick

        smartpick

.fi
.in
.ft R
.SH RETURN VALUES
.SH LIBRARY
.SH ATTRIBUTES
.SH DIAGNOSTICS
.nf
yukon% dbcentral fake_nickname

dbcentral: No tasks defined for database 'fake_nickname'

yukon% dbcentral antelope_demo fake_task

dbcentral: No task 'fake_task' defined for database 'antelope_demo'

.fi
.SH "SEE ALSO"
.nf
dbe(1), epoch(1)
.fi
.SH "BUGS AND CAVEATS"
The task-names in the parameter file may not contain spaces or other 
strange characters (see pf(5), even if quoted). This allows a simple
implementation in which the GUI menu items come up in the same order
as they are listed in the parameter file. Spaces may be used in 
a database nickname, providing the entire nickname is quoted.

Dbcentral does not check, after constructing a database name from the 
parameter-file template and the time specified in the GUI, whether 
the database actually exists or has any tables. The command of interest 
is blindly run on the pathname created. This is possibly a mistake. However,
because of the general nature of dbcentral, the templates and commands 
could just as easily be used for database creation as for running commands 
on pre-existing databases. Thus, no checking is done. One could always add
an existence check as one of the parameter-file entries.

dbcentral does not check to see whether the command succeeded.

One could arguably hard-wire dbcentral to always include a dbe(1) 
line for each database. Instead, this is left at the discretion of the
administrator. This allows the administrator to choose whether dbe 
comes up by default in editable mode ("-e" option to dbe).
.SH AUTHOR
.nf
Kent Lindquist
Lindquist Consulting
.fi
.\" $Id$
