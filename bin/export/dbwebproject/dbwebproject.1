.TH DBWEBPROJECT 1 "$Date$"
.SH NAME
dbwebproject \- automatically create and maintain a database-dependent dynamic website
.SH SYNOPSIS
.nf
\fBdbwebproject \fP[-v] [-n] [-p \fIpfname\fP] [-r \fIDocumentRoot\fP] [\fIrecipe\fP]
.fi
.SH DESCRIPTION

\fBdbwebproject\fP automatically builds and maintains an entire website,
or subdirectory of a website, based on instructions in its parameter file.

The web-site contents can include both files that are installed once
at the outset and then left unchanged (e.g. stylesheets, fixed graphic
elements such as bullets and logos, perhaps a top-level index.html, etc.),
and files that are created or modified automatically based on the contents
of a dynamic database (for example, a page created especially to display
one particular earthquake out of a database).

The structure of the web-site generated by \fBdbwebproject\fP is governed by
the contents of the \fBdbwebproject\fP.pf parameter file. Foremost is the
top-level directory location for all the files that are installed
by \fBdbwebproject\fP. Instead of being specified as one parameter, this
location is specified with a pair of parameters: \fIDocumentRoot\fP and
\fIDocumentRootSubdir\fP. All files handled by \fBdbwebproject\fP are ultimately
placed in \fIDocumentRoot\fP/\fIDocumentRootSubdir\fP or one of its further subdirectories.
This division of the web-site install location into two separate parameters
is intended to help make clear the relationship between the \fBdbwebproject\fP
target directory and the root directory familiar to users of Apache or
similar web-servers.

The \fBdbwebproject\fP application is based on recipes, which determine
the structure of the web-site created. The \fIrun_recipes\fP parameter
in the parameter file determines which recipes are followed when
\fBdbwebproject\fP is invoked. Recipes are followed in the order listed. The
\fIrun_recipes\fP table refers to recipes by their nicknames, which are
used to look up the specifics of each recipe in the \fIrecipes\fP array.
Each recipe should have an entry in the \fIrecipes\fP array which provides details
about all the web-site components that the recipe builds.

Before describing the recipes array in detail, however, it is
helpful to explain one more preparatory component, the optional
web-configuration parameter file. Many times a real-time web-site
has a number of parameters, database locations etc., which must be specified
for the site and available to real-time applications. Because of the
convenience of Antelope parameter-files, it is often nice to store these
values in a single parameter-file for the whole web-site. The array
\fIweb_config_pf\fP within \fBdbwebproject\fP.pf controls these parameters. The
\fIweb_config_pf\fP encloses several sub-parameters. The \fIpf_location\fP parameter indicates
where the final web-site configuration parameter file resides. Usually,
for security reasons, this should not be in a directory visible
below the Apache \fIDocumentRoot\fP. The \fIpf_contents\fP parameter gives either
a literal string value with the contents of the web-site configuration
parameter file, or a pathname to the location of the 'source' for this
parameter file. (\fBdbwebproject\fP tries to test for the existence of a file
with name as given by the \fIpf_contents\fP parameter; if no such file is found,
\fBdbwebproject\fP assumes the \fIpf_contents\fP parameter contains the literal
contents that should go into the file at \fIpf_location\fP, and writes them there).
Generally in order to use this site-configuration parameter-file in your
web-site files, you need also to have some kind of 'loader' script
that can be included in all your custom PHP code to load in the contents.
At the simplest this script would contain only one line of PHP code to
set a parameter file containing the name and location of the
site-configuration pf file (usually without the .pf extension). Similar
to the parameters setting the contents of the site-configuration parameter
itself, there are two parameters for the loader: \fIloader_location\fP and
\fIloader_contents\fP. Again, the \fIloader_contents\fP parameter can be given
either as a filename with the 'source' or as a string-literal with the
actual contents. The web-configuration parameter file is only installed if 
\fIinstall_web_config_pf\fP is set to \fIyes\fP (or other boolean \fItrue\fP value). 

If a single \fIrecipe\fP name is specified on the command line, it is 
executed. Otherwise, the \fIrecipes\fP table of the \fBdbwebproject\fP.pf parameter file lists recipes
to generate all of the automatically-created and statically installed
files. The recipetype indicates the nature of the file creation/installation
process; right now only the recipetype \fIinstall\fP is supported.
Recipes of this type merely install raw materials into their target
locations. Relative pathnames in the source locations for files are
interpreted relative to the place where \fBdbwebproject\fP is run. Relative
pathnames in the target locations are interpreted relative to
the \fIDocumentRoot\fP/\fIDocumentRootSubdir\fP directory, as specified by those
parameters in the \fBdbwebproject\fP.pf parameter file. Further explanation
of the structure of this recipe type is given in the PARAMETER FILE
section below.

The \fIcommands\fP array of the parameter file provides a list of commands
used by \fBdbwebproject\fP. These are aliases for the commands,
followed by optional absolute paths to the executables. If an alias
appears on its own, without an explicit pathname, a command of the
same name is expected to be found on the path.

.SH OPTIONS
.IP -v
Verbose
.IP -n 
Don't actually run any commands, just report what would be done
.IP "-p pfname"
Alternate name of the parameter file. The default is \fBdbwebproject\fP.pf.
.SH PARAMETER FILE
.IP "-r DocumentRoot" 
Override the DocumentRoot setting in the parameter file, using the 
specified location instead.

.in 2c
.ft CW
.nf

.ne 7

DocumentRoot            /var/apache/htdocs
DocumentRootSubdir      .

install_web_config_pf 	no

web_config_pf &Arr{
   pf_location  /var/apache/config/web_config.pf
   pf_contents  &Literal{

.ne 5
     Databases &Arr{
        antelope_demo        /opt/antelope/data/db/demo/demo
     }

     # other parameters specific to the local web-site

.ne 7
   }
   loader_location      &DocumentRoot/ssi/_web_config_pf.php
   loader_contents &Literal{

     <?php
        $web_config_pf = "/var/apache/config/web_config";
     ?>

.ne 6
   }
}

run_recipes &Tbl{
        a_static_recipe
}

.ne 32
recipes &Arr{

        a_static_recipe &Arr{
                recipetype      install
                pages   &Tbl{
                # This table lists source files and destination file names
                # in one of two forms. In the examples below, the placeholder
                # entries enclosed in angle brackets should be replaced with
                # user entries (without the enclosing corner brackets)
                # The first form is just a source filename and a dest
                # filename, the first interpretable from the directory in
                # which \fBdbwebproject\fP is run and the second relative
                # to $DocumentRoot/$DocumentRootSubdir:
                #
                #       <some_sourcefile>   <some_destfile>
                #
                # The second form allows clusters of source-files
                # that have the same source directory and same
                # destination directory to be installed in batch mode:
                #
                #  &Arr{
                #       sourcedir       <some_sourcedir>
                #       targetdir       <some_destdir>
                #       files &Tbl{
                #               <some_filename>
                #               <some_filename>
                #               ....
                #       }
                #  }
                }
        }
}

commands &Arr{
        deposit
}

.fi
.ft R
.in
.SH LIBRARY
0.SH DIAGNOSTICS

\fBdbwebproject\fP complains and dies if it cannot find one of the commands
listed in the parameter file as necessary for the recipes.

.SH "SEE ALSO"
.nf
dbrecenteqs(1)
.fi
.SH "BUGS AND CAVEATS"

Currently this program only creates web sites whose constituent files
are not changing (recipetype=\fIinstall\fP), and it does not draw dynamically
from databases. Notably, \fBdbwebroject\fP does not yet implement some
recipetypes such as 'create' and 'cleanup' which will probably be necessary.

The complexity of this structure may be overkill for small web-sites,
creating unnecessary setup work (albeit with the advantage of supporting
CVS-tracked web-site content and automatic rebuilding). The benefit of
the complex structures in \fBdbwebproject\fP.pf begin to show as the web sites
grow larger and larger. Similarly, the \fBdbwebproject\fP structure requires
additional steps during the development cycle: changes must not only
be made to the 'source' files for the web-site; they must also be installed
in their access locations for \fBdbwebproject\fP (if applicable), then projected
into the final destination by \fBdbwebproject\fP. Again, for simpler web sites,
this complexity may be an unnecessary nuisance which can be bypassed either
by using a CVS structure without any 'make install' step, or by bypassing
CVS repository storage of web content entirely. Conversely, for more complex
web sites and especially web-sites that have dynamic content driven by
Antelope-dependent code, these extra steps are essential, first to link
to Antelope correctly and assemble the ingredients, second to propagate
those ingredients to the web directory. For extensive development projects
it may be beneficial to test and debug code pieces in their final location,
then propagate them backwards into the CVS/install/\fBdbwebproject\fP architecture
when ready. This latter strategy has worked well for the author provided
careful track is kept of the midified files such that none of the pieces are 
orphaned when development is finished.

.SH AUTHOR
.nf
Kent Lindquist
Lindquist Consulting
.fi
.\" $Id$
