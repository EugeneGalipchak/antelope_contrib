.\" $Name$ $Date$
.TH ADSEND2ORB 1
.SH NAME
adsend2orb  \- Take Earthworm analog data from internet and put on ORB
.SH SYNOPSIS
.nf
adsend2orb orbname adsend_port
.fi
.SH DESCRIPTION
adsend2orb reads multiplexed Earthworm data in packets of TYPE_ADBUF,
or demultiplexed Earthworm data in packets of TYPE_TRACEBUF, from a UDP
port number specified on the command line. These packets are
demultiplexed if necessary and recast into packets for the Antelope
ORB.

For multiplexed packets, i.e. packets of TYPE_ADBUF, the conversion
between the scan order of channels in the multiplexer and the net, sta,
and channel names for the ORB packet is taken from the database
specified by the SITE_DB environment variable. The scan order of
channels is taken as the adchan field of the ewanalog table; the net,
station, and channel names are taken from the pins table.  Stations
listed with pins.savechan set to "n" are not saved to the ORB. The data
packets are saved to the ORB in Iceworm-Trace-Buffer format, so the
pin-number is taken from the pins table and placed into the packets. If
the optional calibration table is present in the site database, the
calib field for listed stations is filled into the orb-packet header.
Otherwise the calib info in the header is left at the NULL value. If
the optional timecorr table is present in the site database, stations
with nonzero entries for the commdelay field have their start-times
shifted accordingly before the packets are placed on the ORB. If any of
these tables are modified, adsend2orb dynamically rereads the database
and adjusts the demultiplexing accordingly. This allows the user to
change calibration information, change multiplexer data-channel
assignments, and turn stations on or off without having to restart
either the digitizer or the adsend2orb module.

For demultiplexed packets, i.e. packets of TYPE_TRACEBUF, the
station-channel-network for the packet is assigned in the adsend
software for the digitizer. The default condition is for adsend2orb to
use this assignment in constructing the source name for the orb data
packet. There is another feature, however, to support dynamic
reassignment of multiplexer channels to station-channel-network codes
without restarting any software. In this case the adsend software must
be configured to set the pin-number in the TYPE_TRACEBUF packets equal
to the DAQ channel number, i.e.  the 'adchan' or A-to-D channel number
specified in the iceworm1.3 site database.  If the adsend2orb parameter
pinno_as_adchan is set to true, then adsend2orb will use the
 'pin-number' in the received trace packets as an adchan value, look up
the appropriate station, channel, network, and pin-number in the site
database, and use these values in constructing the orb packet.

The parameter file specifies whether to compress the data with the
gencompress algorithm; and also whether to swap the bytes of the
TYPE_ADBUF packets before decoding them. Some or all of the Earthworm
packet logo may be put in the parameter file: the integers for
installation ID, earthworm module ID, and TYPE_ADBUF or TYPE_TRACEBUF
type id, specified as shown below. If these are specified, packets
which do not match are rejected. Either the ewADBUF_TYPE or the
ewTRACEBUF_TYPE parameter is necessary in order to get any output out
of adsend2orb. Both may be specified. These integers are usually
specified in the earthworm.d parameter file of the sending
institution.  The pinno_as_adchan field is a boolean value. If set to 1
or true, the pin-number in the TRACEBUF packets is interpreted as a
mux/digitizer channel ID number, i.e. the scan order of the
multiplexer, also known as the adchan field of the ewanalog table in
the iceworm1.3 schema. With the pinno_as_adchan field set to true, the
site database is used to derive the network, station, and channel
names, calib value, and communication delay from the supplied site
database. With the pinno_as_adchan field set to true, adsend2orb also
ignores channels of data which do not appear in the ewanalog table of
the site database. If pinno_as_adchan is set to 0 or false, the net,
sta, chan names are the ones used in the trace-packet header. In this
case the adsend2orb program will still try to resolve the communication
delay, calib, and pin-number from the site database, but if it fails at
this adsend2orb will still put the packet on the orb with commdelay and
calib set to zero and with the pin-number taken directly from the
packet header.

If the rt_priority parameter is present in the parameter file, the
integer value of this is used as the Real-time class run-time priority
for adsend2orb.  If this parameter is present, adsend2orb will attempt
to switch user to root, change the priority class of the UDP
packet-reading thread to Real-Time, change the priority level of the
UDP packet-reading thread to the specified value, and then reset the
user id of the adsend2orb process back to the value from which it was
launched, to make sure rtexec can still control the process. This whole
procedure presumes that the adsend2orb executable is owned by root,
that its setuid flag is set ('chmod u+s adsend2orb'), and that the
adsend2orb exists in a directory that allows suid programs (sometimes
suid to root will be disallowed for an entire automount partition).  If
either the setuid or the priority setting fails, adsend2orb will
complain but continue to process data with the UDP packet reading
taking place in the standard time-sharing priority class.

If the reject_future_packets_sec parameter is set in the parameter
file, adsend2orb will reject packets which have data that end too far
past the current wall-clock time for the system. This allowable 
difference between packet endtime and system clock time is specified in 
seconds. The comparison between
packet endtime and the real-time system clock is done right before the
packet is put on the orb, which allows a little bit of leniency
depending on how far the digitizer, UDP communication, and adsend2orb
are behind real-time.
.SH OPTIONS
.SH FILES
adsend2orb requires the parameter file adsend2orb.pf. Also, adsend2orb
bases its decoding (station-naming, whether to ignore stations or not)
on four tables of a database in iceworm1.3 schema format: those tables
are the pins table, the ewanalog table, the calibration table, and the
timecorr table. The pins table and the ewanalog table are required.
.SH ENVIRONMENT
SITE_DB contains the name of a database in iceworm1.3 schema format.
This environment variable may actually be omitted, in which case only
TYPE_TRACEBUF packets are processed; the calib value and communication
delay is set to zero for each packet; and the pin number is taken
directly from the packet. Omitting the SITE_DB environment variable
while having the pinno_as_adchan parameter set to true is a fatal
error. If the SITE_DB environment variable is set, the pins and
ewanalog tables of the specified database must be present.

PFPATH must contain the path to the parameter file. 

.SH PARAMETER FILE
.nf
nordic% pfecho adsend2orb.pf
compress        1 	# Whether to compress data when putting it on the ORB
ewADBUF_TYPE 	1	# optional type-id number: earthworm TYPE_ADBUF
ewTRACEBUF_TYPE 20	# optional type-id number: earthworm TYPE_TRACEBUF
ewMOD 		1	# optional earthworm module id number 
ewINST 		1	# optional earthworm installation id number
pinno_as_adchan	1	# Whether to assign station info via database for tracebuf packets
swap_adbuf_bytes 1	# whether to swap byte order of incoming multiplexed data
rt_priority	10	# Real-time priority for packet-reading thread (optional)
reject_future_packets_sec 120 # Optional filter to reject packets that are too far ahead of system clock
nordic%
.fi
.SH EXAMPLE
nordic% adsend2orb localhost 9900
.RS .2i
.RE
.SH RETURN VALUES
.SH LIBRARY
.SH DIAGNOSTICS
.nf
FATAL:

Usage: adsend2orb orbname adsend_port
adsend2orb: missing or incorrect parameter file
adsend2orb: failed to create mutex
adsend2orb: Failed to create input thread
adsend2orb: environment variable SITE_DB not set
adsend2orb: pins table not present in $SITE_DB
adsend2orb: ewanalog table not present in $SITE_DB
adsend2orb: Can't open the socket
adsend2orb: Error permitting socket address reuse
adsend2orb: Can't bind address to socket
adsend2orb: pinno_as_adchan option requires environment variable SITE_DB to be set.

NON-FATAL:

adsend2orb: gencompress error			
adsend2orb: malloc() error.
adsend2orb: orbput failed for [source id string]
adsend2orb: lost [number of] messages for inst_mod_type [Earthworm logo numbers], got # [sequence num] expecting # [sequence num]
adsend2orb: Datatype %s not understood
adsend2orb: failed to set user ID to root:
adsend2orb: Failed to set real-time priority %d for udp thread:
adsend2orb: no SITE_DB environment variable: relying on packet contents
adsend2orb: rejecting packet from AK_CUT_SHZ, which ends 4:00 minutes into future
.fi
.SH "SEE ALSO"
.nf
orbserver(1), gencompress(3), dbe(1)
.fi
.SH "BUGS AND CAVEATS"
adsend2orb uses file modification time of the tables in $SITE_DB in order
to decide whether to reread the site database. Modifying those tables with 
dbe does not change the modification time of the actual files until one 
quits the dbe program.

adsend2orb intentionally ignores the array of pin-numbers sent by the 
adsend software in the TYPE_ADBUF data packets. Adsend2orb relies solely
on the packing order of those packets, which it assumes is specified by 
the "adchan" field of the ewanalog table of the site database. This allows
the operator to change channel assignments without having to stop the digitizing
PC to change the setup file for adsend.

adsend2orb does not dynamically reread its parameter file.
.SH AUTHOR
.nf
Kent Lindquist
Geophysical Institute
University of Alaska

(recasting a few lines of coaxtoring.c from the USGS Earthworm 
group in order to take in UDP packets and recast into TYPE_ADBUF
messages.)
.fi
