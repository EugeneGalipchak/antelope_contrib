.TH GURALP2ORB 1 "$Date$"
.SH NAME
guralp2orb \- Import Guralp data into an Antelope orb
.SH SYNOPSIS
.nf
guralp2orb [-v] [-V] [-p parameter_file] [-l status_logfile] [-r reject_sec] orbname 
.fi
.SH DESCRIPTION
guralp2orb receives seismic data from Guralp digitizers, via the 
SCREAM program from Guralp Inc., onto an Antelope orb. The data are 
preserved in native GCF format. Waveform packets are placed on the 
orb with the suffix GCF; status packets with the suffix GCFS. Status 
packets will also be written to standard error in verbose mode, and 
to the specified log file if the -l option is used. 

guralp2orb will optionally reject packets which are too far into 
the future, judged by the system clock. 

guralp2orb has two main modes. In the first, udplisten, guralp2orb 
listens on one or more specified UDP ports. In this case it expects 
that remote instances of SCREAM will initiate dataflow. In the 
second mode, udpinitiate, guralp2orb sends requests to remote 
instances of SCREAM, asking that they start sending data via UDP. 
This presumes that the remote instance of SCREAM is configured to 
listen to network requests on a certain port, known in advance and listed
in the guralp2orb parameter file. The udpinitiate mode specifies the 
port for UDP packet reception. It is not necessary to specify this port
in the udplisten table of the parameter file; guralp2orb will coordinate 
the listener threads on its own, launching whatever listeners are 
necessary. 

guralp2orb supports the TCP-based packet recovery mechanism to fill gaps 
in the data caused by UDP packet loss. guralp2orb tracks the 
sequence numbers of packets from multiple instances of scream, noticing
gaps and requesting that they be filled. Each TCP-recovery thread 
can handle only one recovery at a time (recovering a contiguous range 
of packet sequence numbers from a single instance of SCREAM), however 
the user my specify multiple recovery threads with the nrecovery_threads 
parameter in the parameter file. The TCP recovery mechanism will detect
hung connections and remain intact (though the block of packets being
processed during the hang may be lost). The TCP recovery mechanism
may be shut off by setting nrecovery_threads to 0. 

guralp2orb starts the construction of the packet sourcename from the 
sysid, streamid, and specified default network. It then morphs this 
sourcename according to the regular expressions in the srcname_morph
table of the parameter file, as explained by morphtbl(3). These can 
be simple, one-to-one mappings, like 
.nf

	/somenet_somesysid_somestreamid/net_sta_chan/

.fi
or they can be more complex regular expressions.

.SH OPTIONS
-v verbose

-V very verbose. Lists information on every incoming packet. 

-p parameter_file Specify alternate parameter file (default is guralp2orb.pf)

-l status_logfile Write status packets to the specified log file

-r reject_sec Reject packets which start more than the specified number
of seconds into the future. Status packets are never rejected, since 
they might be useful in debugging the cause of the incorrect timestamps. 
.SH FILES
.SH ENVIRONMENT
.SH PARAMETER FILE
.nf
cat guralp2orb.pf
# number of tcp recovery threads. 0 to disable TCP recovery
nrecovery_threads 3 
# default network assignment:
default_net -       
udplisten &Tbl{
        4567
        53764
        53765
}
udpinitiate &Tbl{ # initiate connections to these SCREAM servers
#       SCREAM_IP:NETWORK_PORT   UDP_LISTENING_PORT
#       137.229.32.243:1567 10001
}

# Apply these regular expression substitutions to source-names constructed 
# from default net, srcid, and streamid:
srcname_morph &Tbl{
        /-_SPSHE2_XXH6EY/PP_MCLA_BHZ/
        /-_SKGA00/PP_SKGA/
        /-_UNV000/AK_UNV/
        /-_(NHSA|SBEA|PPSA|PHSA|GCSA)/PP_$1/
        /-_(DIV|SPIA|MCK|BMR|THY|SAW|SWD|JIS|AUL|TNA|RC01|FIB)/AK_$1/
        /(SWD|AUL|MCK|TNA|UNV|SPIA|RC01|FIB|SAW|GCSA|THY|JIS)_BH([ZNE])2/$1_BH$2/
        /(SWD|AUL|MCK|TNA|UNV|SPIA)_BH([ZNE])3/$1_HH$2/
        /(BMR|DIV)_BH([ZNE])4/$1_BH$2/
        /(BMR|DIV)_BH([ZNE])5/$1_HH$2/
        /(NHSA|SBEA|PPSA)_BHZ4/$1_BHZ/
}
.fi

.SH EXAMPLE
.ft CW
.in 2c
.nf
.fi
.in
.ft R
.SH RETURN VALUES
.SH LIBRARY
.SH DIAGNOSTICS
.SH "SEE ALSO"
.nf
orbserver(1), morphtbl(3)
.fi
.SH "BUGS AND CAVEATS"
If something goes wrong with a particular TCP recovery of packets, that 
block of packets is lost: no further recovery attempts are made. In 
principle, more involved recovery attempts may be possible, though perhaps 
of limited value.

The log file of status packets grows indefinitely, unless cleaned out 
by hand or other process. Since guralp2orb opens and closes the log 
file on reception of each status packet, it is probably reasonably 
safe to clean the file up while guralp2orb is running.

guralp2orb relies on the ability of the packet library to decompress
GCF format. Thus, one must have a current version of packets.pf and 
mk_libpkt.pf, with an up-to-date libPkt.so constructed from them. 

.SH AUTHOR
.nf
Kent Lindquist
Geophysical Institute
University of Alaska
.fi
.\" $Id$
