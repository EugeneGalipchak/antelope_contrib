.TH MAGNITUDE 3P "$Date$"
.SH NAME
Magnitude \- magnitude computation super class for evproc generalized event processing
.SH SYNOPSIS
.nf
our @ISA= ( "Magnitude" ) ; 

($obj,$hashref) = new($class,"db" => $dbref,
		"dbm" => $dbmref[,$name1,$val1[,...]]) ;

display($obj[,@keys]) ;

put($obj,$name1,$val1[,...]) ;

@vals = get($obj,@keys) ;

$hashref = process_channel($obj,$trref,$flush) ;

$hashref = process_station($obj,$sta,$flush) ;

$hashref = process_network($obj,$flush) ;

.fi
.SH DESCRIPTION
This provides a super class that can be used by other perl computational
modules for computing magnitudes. Note that by itself, this module is incomplete
and cannot be used directly by \fBorb/dbevproc\fP.
.LP
\fBnew\fP is the constructor method and does the basic setup of the internal
perl structures for magnitude processing. There must be at least two input
hash key-value pairs corresponding to the input temporaray database
with the event info, specified by the key \fB"db"\fP with a database
array reference \fI$dbref\fP as a value, and the master, or metadatabase,
specified by the key \fB"dbm"\fP with a database
array reference \fI$dbmref\fP as a value. \fBorb/dbevproc\fP sets up these
databases, opens them, and passes in the array reference values when the
perl processing object is created. Additional key-value pairs may also be
specified which causes these to appear as new variables within the object
structure. The \fBMagnitude::new\fP method looks for \fIorigin\fP, \fIassoc\fP,
\fIsite\fP and \fIsnetsta\fP non-empty tables in the input info database. It 
also looks for non-empty \fIsitechan\fP and \fIcalibration\fP tables in the 
metadatabase. If any of these tables are missing, \fBMagnitude::new\fP
will set the object output disposition to \fB"skip"\fP, which will cause \fBorb/dbevproc\fP
to immediately destroy the object and skip the event-process. The returns are the
object reference in \fI$obj\fP and a standard hash reference in \fI$hashref\fP
as returned by \fBevproc::makereturn\fP (see \fBevproc.3p\fP).
.LP
\fBdisplay\fP is a utility method for displaying (printing) the object structure values
specified in the \fI@keys\fP list. If \fI@keys\fP is not specified, then
all of the object values are shown. Note that the display is recursive so that
a all of the elements of a value which is a reference to a hash or array are displayed recursively.
This method is normally used only for debugging.
.LP
\fBput\fP is a utility method for putting values into the object structure.
.LP
\fBget\fP is a utility method for getting values correspinding to the
list of \fI@keys\fP from an object;
.LP
\fBprocess_channel\fP is the method that is called by \fBorb/dbevproc\fP whenever
there is new trace data to be processed for a particular channel. 
The object instance is referenced by \fI$obj\fP. The channel data waveform values
are referenced by \fI$trref\fP which is a reference to a \fBTraces4.0\fP schema \fItrace\fP
table database pointer array. Trace data is read by \fBorb/dbevproc\fP and is converted
into temporary internal \fItrace\fP tables which are then passed to the the \fIprocess_channel\fP
methods in the various perl processing module instances. The current channel to be processed is always 
in record \fB0\fP of this input trace table. In order to facilitate processing by the perl
modules, \fBorb/dbevproc\fP only returns a single trace channel in a single \fItrace\fP
table row even if the channel has missing sample values. Missing sample values are flagged with special
"gap" values (anything bigger than 1.e30 can be considered a gap value). The \fBprocess_channel\fP methods
are called by \fBorb/dbevproc\fP whenever there are new sample values to be processed according
to user specified timeouts so that processing occurs on a regular basis even when the data segments have not been completely
filled. If \fI$flush\fP is set, then \fBorb/dbevproc\fP has decided that either the trace is complete or
that \fBorb/dbevproc\fP will not wait any longer for missing sample values. Either way this indicates
that this will be the last call made by \fBorb/dbevproc\fP to this method for this object and that
partial results, if any need to be computed now.
.LP
\fBMagnitude::process_channel\fP computes a set of waveform statistics according to signal
and noise time windows that must be previously cached in the object data structure (this is
done in the individual computational method \fBgetwftimes\fP methods). These output values are cached
for subsequent processing by the computational module sub-classes.
\fBMagnitude::process_channel\fP also sets the disposition, using \fBevproc::makereturn\fP, to values
that should be read by the sub-class objects and are also read by \fBorb/dbevproc\fP to indicate when particular channel, station and/or network 
processing has been done by the perl computational module and is ready for output. A disposition
of \fB"ok"\fP means that the trace data was processed successfully, but the perl processing pbject
expects more input data and should be called again whenever new data is available. A disposition
of \fB"channeldone"\fP means that this particualr channel processing is finished, but more data is needed for other
channels and stations. A disposition
of \fB"stationdone"\fP means that this particualr station processing is finished, but more data is needed for other
stations. A disposition
of \fB"processdone"\fP means that this perl processing object is completely finished with waveform sample
processing.
.LP
\fBprocess_station\fP is the method that is called by \fBorb/dbevproc\fP whenever
it appears that the processing for a station is finished (usually due to \fBprocess_channel\fP returning
a disposition of \fBstationdone\fP or \fBprocessdone\fP). Currently, all \fBMagnitude::process_station\fP
does is to cache the lergest channel magnitude as the station magnitude.
.LP
\fBprocess_network\fP is the method that is called by \fBorb/dbevproc\fP whenever
it appears that the processing for a network is finished (usually due to \fBprocess_channel\fP returning
a disposition of \fBprocessdone\fP). \fBMagnitude::process_network\fP first computes the network magnitude
mean, standard deviation, median and uncertainty from the individual station magnitdues which must be
already domputed and cached within the processing module data structure. Then all of the output values
are put into the appropriate temporary info database tables and certain return values are set in the
return hash that is read by \fBorb/dbevproc\fP to indicate exactly which database values need to be output.
.SH LIBRARY
use lib $ENV{ANTELOPE}/data/evproc ;
.SH "SEE ALSO"
.nf
orbevproc(1), evproc(3p), Mlrichter(3p), Mbusneic(3p)
.fi
.SH "BUGS AND CAVEATS"
.SH AUTHOR
Danny Harvey
