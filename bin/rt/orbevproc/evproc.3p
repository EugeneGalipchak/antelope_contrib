.TH EVPROC 3P "$Date$"
.SH NAME
evproc \- some boilerplate functions to drive the evproc generalized event processing
.SH SYNOPSIS
.nf
use evproc ; 

prettyprint($ref[,$prefix]) ;

$str = mystrtime($time) ;

$val = isyes($str) ;

clearlogs($obj) ;

addlog($obj,$level,$format[,$val1[,...]]) ;

$hashref = makereturn($obj,$disposition[,$name1,$val1[,...]]) ;

$disposition = setup_processes($obj) ;

($disposition,$hashref) = match_sta($obj,$sta) ;

$isamp = time2samp($deltime,$dt) ;

($tstart,$istart,$npts) = findrange($t0,$dt,$nsamp[,$tstart[,$tend]]) ;

($tstart,$tend) = trimtrace(@db) ;

($nbad,$fbad) = findbad(@db[,$tstart[,$tend]]) ;

($amax,$vmax,$tmax,$amp,$per,$mean,$std)
	= computestats(@db,$applycalib,$meanremove[,$tstart[,$tend]]) ;
.fi
.SH DESCRIPTION
These routines provide utility functions for building up other
evproc perl computational modules.
.LP
\fBprettyprint\fP will recursively print out the contents of a perl
structure (hash, list or scalar) referenced by \fI$ref\fP. This is
used for debugging purposes. A string \fI$prefix\fP can also be 
specified which is prepended to each line of output.
.LP
\fBmystrtime\fP is a utility function that returns a time string for \fI$time\fP
in the form of "julianday:hr:mn:ss.sss".
.LP
\fBisyes\fP will return a boolean \fB0\fP or \fB1\fP derived
from \fI$str\fP, which can be any of \fB"yes"\fP, \fB"no"\fP, \fB"1"\fP, \fB"0"\fP, etc.
.LP
\fBclearlogs\fP will clear out the internal log messages hash within the
perl object referenced by \fI$obj\fP. The log messages hash is a standard
way of communicating log messages at various levels of severity back to
the \fBorb/dbevproc\fP program which then disposes of the log messages
in a standard way.
.LP
\fBaddlog\fP will add a single log message to the internal log messages hash within the
perl object referenced by \fI$obj\fP. The log level is indicated by \fI$level\fP
with higher levels meaning more detailed logs and level \fB0\fP meaning errors
that should always be displayed. The message itself is formed according
to \fI$format\fP and a variable list of values \fI$val1\fP, etc., in the same manner
as the perl \fBprintf\fP function.
.LP
\fBmakereturn\fP will create the output perl hash that should always be returned from
the object methods that are executed by \fBorb/dbevproc\fP (these methods are \fBnew\fP,
\fBgetwftimes\fP, \fBprocess_channel\fP, \fBprocess_station\fP and \fBprocess_network\fP). 
The \fBorb/dbevproc\fP program is expecting this perl hash to exist and be populated
with certain entries. The perl object is referenced by \fI$obj\fP. The overall return
status is indicated by \fI$disposition\fP which should always be \fB"ok"\fP to
indicate a successful return status and something else when not ok, like \fB"skip"\fP in \fBgetwftimes\fP
to indicate that a particular event-process should be skipped.
Additional return values can optionally be specified through name-val pairs.
Following is an example use of \fBmakereturn\fP.
.ft CW
.nf
.ps 8

return makereturn ( $self, "ok", "sta" => $sta, "chan" => $chan ) ;

.ps
.fi
.ft R
.LP
\fBsetup_processes\fP is a utility function that is used by the \fBMlrichter(3p)\fP
and \fBMbusneic(3p)\fP computational modules to parse the parameter file objects
that are passed from the \fIorbevproc.pf\fP or \fIdbevproc.pf\fP parameter files
by the \fBorb/dbevproc\fP program into the object creation methods.
The perl object is referenced by \fI$obj\fP. The exit status is returned in \fI$disposition\fP and is \fB"ok"\fP
if it was successful. This function parses out the \fIchannels\fP and \fIreject\fP tables from
the parameter file specifications and converts them into internal object perl structures.
.LP
\fBmatch_sta\fP is a utility function that is used by the \fBMlrichter(3p)\fP
and \fBMbusneic(3p)\fP computational modules to match stations against the
regular expressions in the \fIchannels\fP and \fIreject\fP tables from
the parameter file specifications.
The perl object is referenced by \fI$obj\fP and the station to match is in \fI$sta\fP (CSS naming convention).
The \fIdisposition\fP (\fB"ok"\fP if there is a match) and a hash reference to the particular
entry in the original \fIchannels\fP table where the match occured, \fI$hashref\fP, is returned. 
This function should be used in conjunction with \fBsetup_processes\fP.
.LP
\fBtime2samp\fP is a utility function that will return the closest integer
sample index, \fI$isamp\fP, that corresponds to data delta time of \fI$deltime\fP
(this refers to the difference between the desired time and the data array start time)
and with sampling increment \fI$dt\fP. This works properly for negative indices.
.LP
\fBfindrange\fP is a utility function that finds the actual range of data sample
values corresponding to desired start and end times. The data array start time is \fI$t0\fP,
the data array sampling increment is \fI$dt\fP, the data array number of samples in \fI$nsamp\fP.
The desired time range can be input as optional \fI$tstart\fP and \fI$tend\fP.
The actual closest sample corresponding to the desired start time is returned in \fI$tstart\fP
and the index within the input data array is returned in \fI$istart\fP. The number of sample values
up to the desired end time is returned in \fI$npts\fP.
.LP
\fBtrimtrace\fP is a utility function that looks for gap values at the beginning and end
of a trace (\fI@bd\fP) and "trims" them off by returning the start (\fI$tstart\fP) and end times (\fI$tend\fP) 
corresponding to the trimmed trace. Note that the trace array itself is not modified and
the input \fI@db\fP trace pointer should already be set to the desired record.
.LP
\fBfindbad\fP is a utility function that looks for gap values throughout
a trace (\fI@bd\fP) and returns the number of gap values (\fI$nbad\fP) and the fraction of gap values 
relative to the entire trace window (\fI$fbad\fP). Optional 
start (\fI$tstart\fP) and end times (\fI$tend\fP) can be specified to constrain the search.
The input \fI@db\fP trace pointer should already be set to the desired record.
.LP
\fBcomputestats\fP is a utility function that computes a variety of statistics from
a single data trace referenced by \fI@db\fP. The trace \fIcalib\fP value will be applied to the
data before processing if \fI$applycalib\fP is set. A mean value, \fI$meanremove\fP, can
be specified which is removed from the data before processing. Note that this must be precomputed
and it is assumed to be previously scaled in accordance with \fIapplycalib\fP.  Optional 
start (\fI$tstart\fP) and end times (\fI$tend\fP) can be specified to constrain the time
range of the statistics.
The input \fI@db\fP trace pointer should already be set to the desired record.
The statistics returned are \fI$amax\fP, the maximum absolute trace value, \fI$vmax\fP,
the trace value with sign corresponding to \fI$amax\fP, \fI$tmax\fP, the time corresponding to
\fI$amax\fP, \fI$amp\fP and \fI$per\fP, the mid to peak amplitude and the full wavecycle period of 
the wavecycle with highest absolute amplitude immediate before or after \fI$tmax\fP with negative
\fI$per\fP indicating the wavecycle was before \fI$tmax\fP, \fI$mean\fP, the mean value over the
measurement time window and \fI$std\fP, the standard deviation over the measurement time window.
.SH LIBRARY
use lib $ENV{ANTELOPE}/data/evproc ;
.SH "SEE ALSO"
.nf
orbevproc(1), Magnitude(3p), Mlrichter(3p), Mbusneic(3p)
.fi
.SH "BUGS AND CAVEATS"
.SH AUTHOR
Danny Harvey
