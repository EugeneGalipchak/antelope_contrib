'\" te
.TH MAKEGCLGRID 3 "%G"
.SH NAME
makegclgrid - build a GCLgrid object and save to database
.SH SYNOPSIS
.nf
makegclgrid db [-pf pffile]
.fi
.SH DESCRIPTION
.LP
This program builds a GCLgrid object and stores the coordinates that
define it in a database with a set of external files.  A GCLgrid 
is a general way to build a gridded model in earth coordinates.  
This program build such an object of a special type.  It's primary
use is to build a grid of target control points for the cluster 
program and dbpmel for relocation of an entire catalog.  
The grid this program produces is about the best attempt one 
could do for regional scale problems to map a sphere onto a 
reasonably uniform grid.  The process is basically to map
the 0,0 point on the earth (i.e. the intersection of the prime
meridian and the equator) to a specified origin.  The equivalent
of the equator is then rotated by a specified angle to provide 
a baseline.  The grid is then defined by equally spaced grid 
lines defined by this great circle and the pole to it (the x2 axis).
See the paramete file description below for more clarification on this.
.LP
The program builds this GCLgrid object and stores the result to an
output database defined by the db argument.  Note this uses an
extension table called "gclgrid" that is defined in genloc1.1.
.SH OPTIONS
The -pf flag can be used to specify an alternative parameter file to the
standard one defined by the program name (makegclgrid.pf).
.SH PARAMETER FILE
.LP
What this program does and how the parameters interact with are best described through
and example:
.nf
gridname kyrghyz
origin_latitude 41.4
origin_longitude 76.0
x_axis_azimuth 80.0
delta_x1 5.0
delta_x2 5.0
delta_x3 2.0
n1 100
n2 100
n3 20
origin_offset_x1 50
origin_offset_x2 50
build_3d_grid true
gridfile_directory ./GCLgrids
.fi
.LP
The origin of the grid makegclgrid would produce with this pf is at 41.4 degrees N
and 76.0 degrees east.  A baseline great circle path that defines the x1 (x) axis 
for this example would be projected at an azimuth of 80 degrees (i.e 10 degrees 
north of east) from this origin.  
A second great circle path would be draw that defines the x2 (y) 
axis at -10 degrees azimuth (N 10 degrees W).  The x1 and x2 baselines are both
divided into 100 points separated by 5 km (this is exact for the baselines).  
longitude-like lines are drawn perpendicular from the x1 baseline and latitude-like
lines are drawn perpendicular to x2.  There intersections for the surface, 2D, grid.
A 3D grid is constructed of 20 radial surfaces at depth increments of 2.0 km 
below this surface (i.e. the bottom of the 3D volume for this example will
be at a depth of 38 km).  
.LP
The gridfile_directory and gridname parameters control how the information is 
stored an indexed.  A file containing the computed coordinates with the name
defined by gridname (in this case kyrghyz) will be written in the directory 
defined by gridfiel_directory (for this example the file will be
"./GCLgrids/kyrghyz").  
.LP
The program always produces a 2D grid.  It will only compute and save a 3D
grid i the build_3d_grid boolean is set true.
.SH "SEE ALSO"
.nf
cluster(1), dbpmel(1)
.fi
.SH "BUGS AND CAVEATS"
This program has been heavily used by the author, but is in the process of
being converted to a C++ implementation because the GCLgrid concept is
well suited to object-oriented programming.  Future contrib releases may
cause collisions between versions verify correct compilation if you 
rebuild contrib.
.SH AUTHOR
.nf
Gary L. Pavlis
Indiana University
pavlis@indiana.edu
.fi
.\" $Id$
